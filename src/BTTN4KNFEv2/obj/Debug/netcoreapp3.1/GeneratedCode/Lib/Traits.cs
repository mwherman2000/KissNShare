#pragma warning disable 162,168,649,660,661,1522

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Trinity.TSL;
using Trinity.TSL.Lib;
namespace BTTN4KNFE
{
    internal class TypeSystem
    {
        #region TypeID lookup table
        private static Dictionary<Type, uint> TypeIDLookupTable = new Dictionary<Type, uint>()
        {
            
            { typeof(bool), 0 }
            ,
            { typeof(int), 1 }
            ,
            { typeof(long), 2 }
            ,
            { typeof(DateTime), 3 }
            ,
            { typeof(string), 4 }
            ,
            { typeof(int[]), 5 }
            ,
            { typeof(List<long>), 6 }
            ,
            { typeof(List<string>), 7 }
            ,
            { typeof(List<BTTKeyValuePair>), 8 }
            ,
            { typeof(BTTClaim), 9 }
            ,
            { typeof(BTTEncryptedClaims), 10 }
            ,
            { typeof(BTTGenericCredential_Envelope), 11 }
            ,
            { typeof(BTTGenericCredential_EnvelopeContent), 12 }
            ,
            { typeof(BTTGenericCredential_EnvelopeSeal), 13 }
            ,
            { typeof(BTTGenericCredential_PackingLabel), 14 }
            ,
            { typeof(BTTKeyValuePair), 15 }
            ,
            { typeof(BTTNFE_N4K_Claims), 16 }
            ,
            { typeof(BTTNFE_N4K_Envelope), 17 }
            ,
            { typeof(BTTNFE_N4K_EnvelopeContent), 18 }
            ,
            { typeof(BTTNFE_N4K_SealedEnvelope), 19 }
            ,
            { typeof(BTTVerifiableCredential_SealedEnvelope), 20 }
            ,
            { typeof(BTTEncryptionFlag), 21 }
            ,
            { typeof(BTTGenericCredentialType), 22 }
            ,
            { typeof(BTTNFEBodyPart), 23 }
            ,
            { typeof(BTTTrustLevel), 24 }
            ,
            { typeof(List<List<BTTKeyValuePair>>), 26 }
            ,
            { typeof(List<BTTClaim>), 27 }
            ,
            { typeof(BTTEncryptedClaims?), 29 }
            ,
            { typeof(BTTNFE_N4K_Claims?), 30 }
            ,
        };
        #endregion
        #region CellTypeID lookup table
        private static Dictionary<Type, uint> CellTypeIDLookupTable = new Dictionary<Type, uint>()
        {
            
            { typeof(BTTN4KNFEDirectory), 0 }
            ,
            { typeof(BTTNFE_N4K_SealedEnvelope_Cell), 1 }
            ,
            { typeof(BTTVerifiableCredential_SealedEnvelope_Cell), 2 }
            
        };
        #endregion
        internal static uint GetTypeID(Type t)
        {
            uint type_id;
            if (!TypeIDLookupTable.TryGetValue(t, out type_id))
                type_id = uint.MaxValue;
            return type_id;
        }
        internal static uint GetCellTypeID(Type t)
        {
            uint type_id;
            if (!CellTypeIDLookupTable.TryGetValue(t, out type_id))
                throw new Exception("Type " + t.ToString() + " is not a cell.");
            return type_id;
        }
    }
    internal enum TypeConversionAction
    {
        TC_NONCONVERTIBLE = 0,
        TC_ASSIGN,
        TC_TOSTRING,
        TC_PARSESTRING,
        TC_TOBOOL,
        TC_CONVERTLIST,
        TC_WRAPINLIST,
        TC_ARRAYTOLIST,
        TC_EXTRACTNULLABLE,
    }
    internal interface ITypeConverter<T>
    {
        
        T ConvertFrom_bool(bool value);
        bool ConvertTo_bool(T value);
        TypeConversionAction GetConversionActionTo_bool();
        IEnumerable<bool> Enumerate_bool(T value);
        
        T ConvertFrom_int(int value);
        int ConvertTo_int(T value);
        TypeConversionAction GetConversionActionTo_int();
        IEnumerable<int> Enumerate_int(T value);
        
        T ConvertFrom_long(long value);
        long ConvertTo_long(T value);
        TypeConversionAction GetConversionActionTo_long();
        IEnumerable<long> Enumerate_long(T value);
        
        T ConvertFrom_DateTime(DateTime value);
        DateTime ConvertTo_DateTime(T value);
        TypeConversionAction GetConversionActionTo_DateTime();
        IEnumerable<DateTime> Enumerate_DateTime(T value);
        
        T ConvertFrom_string(string value);
        string ConvertTo_string(T value);
        TypeConversionAction GetConversionActionTo_string();
        IEnumerable<string> Enumerate_string(T value);
        
        T ConvertFrom_int_Array_150(int[] value);
        int[] ConvertTo_int_Array_150(T value);
        TypeConversionAction GetConversionActionTo_int_Array_150();
        IEnumerable<int[]> Enumerate_int_Array_150(T value);
        
        T ConvertFrom_List_long(List<long> value);
        List<long> ConvertTo_List_long(T value);
        TypeConversionAction GetConversionActionTo_List_long();
        IEnumerable<List<long>> Enumerate_List_long(T value);
        
        T ConvertFrom_List_string(List<string> value);
        List<string> ConvertTo_List_string(T value);
        TypeConversionAction GetConversionActionTo_List_string();
        IEnumerable<List<string>> Enumerate_List_string(T value);
        
        T ConvertFrom_List_BTTKeyValuePair(List<BTTKeyValuePair> value);
        List<BTTKeyValuePair> ConvertTo_List_BTTKeyValuePair(T value);
        TypeConversionAction GetConversionActionTo_List_BTTKeyValuePair();
        IEnumerable<List<BTTKeyValuePair>> Enumerate_List_BTTKeyValuePair(T value);
        
        T ConvertFrom_BTTClaim(BTTClaim value);
        BTTClaim ConvertTo_BTTClaim(T value);
        TypeConversionAction GetConversionActionTo_BTTClaim();
        IEnumerable<BTTClaim> Enumerate_BTTClaim(T value);
        
        T ConvertFrom_BTTEncryptedClaims(BTTEncryptedClaims value);
        BTTEncryptedClaims ConvertTo_BTTEncryptedClaims(T value);
        TypeConversionAction GetConversionActionTo_BTTEncryptedClaims();
        IEnumerable<BTTEncryptedClaims> Enumerate_BTTEncryptedClaims(T value);
        
        T ConvertFrom_BTTGenericCredential_Envelope(BTTGenericCredential_Envelope value);
        BTTGenericCredential_Envelope ConvertTo_BTTGenericCredential_Envelope(T value);
        TypeConversionAction GetConversionActionTo_BTTGenericCredential_Envelope();
        IEnumerable<BTTGenericCredential_Envelope> Enumerate_BTTGenericCredential_Envelope(T value);
        
        T ConvertFrom_BTTGenericCredential_EnvelopeContent(BTTGenericCredential_EnvelopeContent value);
        BTTGenericCredential_EnvelopeContent ConvertTo_BTTGenericCredential_EnvelopeContent(T value);
        TypeConversionAction GetConversionActionTo_BTTGenericCredential_EnvelopeContent();
        IEnumerable<BTTGenericCredential_EnvelopeContent> Enumerate_BTTGenericCredential_EnvelopeContent(T value);
        
        T ConvertFrom_BTTGenericCredential_EnvelopeSeal(BTTGenericCredential_EnvelopeSeal value);
        BTTGenericCredential_EnvelopeSeal ConvertTo_BTTGenericCredential_EnvelopeSeal(T value);
        TypeConversionAction GetConversionActionTo_BTTGenericCredential_EnvelopeSeal();
        IEnumerable<BTTGenericCredential_EnvelopeSeal> Enumerate_BTTGenericCredential_EnvelopeSeal(T value);
        
        T ConvertFrom_BTTGenericCredential_PackingLabel(BTTGenericCredential_PackingLabel value);
        BTTGenericCredential_PackingLabel ConvertTo_BTTGenericCredential_PackingLabel(T value);
        TypeConversionAction GetConversionActionTo_BTTGenericCredential_PackingLabel();
        IEnumerable<BTTGenericCredential_PackingLabel> Enumerate_BTTGenericCredential_PackingLabel(T value);
        
        T ConvertFrom_BTTKeyValuePair(BTTKeyValuePair value);
        BTTKeyValuePair ConvertTo_BTTKeyValuePair(T value);
        TypeConversionAction GetConversionActionTo_BTTKeyValuePair();
        IEnumerable<BTTKeyValuePair> Enumerate_BTTKeyValuePair(T value);
        
        T ConvertFrom_BTTNFE_N4K_Claims(BTTNFE_N4K_Claims value);
        BTTNFE_N4K_Claims ConvertTo_BTTNFE_N4K_Claims(T value);
        TypeConversionAction GetConversionActionTo_BTTNFE_N4K_Claims();
        IEnumerable<BTTNFE_N4K_Claims> Enumerate_BTTNFE_N4K_Claims(T value);
        
        T ConvertFrom_BTTNFE_N4K_Envelope(BTTNFE_N4K_Envelope value);
        BTTNFE_N4K_Envelope ConvertTo_BTTNFE_N4K_Envelope(T value);
        TypeConversionAction GetConversionActionTo_BTTNFE_N4K_Envelope();
        IEnumerable<BTTNFE_N4K_Envelope> Enumerate_BTTNFE_N4K_Envelope(T value);
        
        T ConvertFrom_BTTNFE_N4K_EnvelopeContent(BTTNFE_N4K_EnvelopeContent value);
        BTTNFE_N4K_EnvelopeContent ConvertTo_BTTNFE_N4K_EnvelopeContent(T value);
        TypeConversionAction GetConversionActionTo_BTTNFE_N4K_EnvelopeContent();
        IEnumerable<BTTNFE_N4K_EnvelopeContent> Enumerate_BTTNFE_N4K_EnvelopeContent(T value);
        
        T ConvertFrom_BTTNFE_N4K_SealedEnvelope(BTTNFE_N4K_SealedEnvelope value);
        BTTNFE_N4K_SealedEnvelope ConvertTo_BTTNFE_N4K_SealedEnvelope(T value);
        TypeConversionAction GetConversionActionTo_BTTNFE_N4K_SealedEnvelope();
        IEnumerable<BTTNFE_N4K_SealedEnvelope> Enumerate_BTTNFE_N4K_SealedEnvelope(T value);
        
        T ConvertFrom_BTTVerifiableCredential_SealedEnvelope(BTTVerifiableCredential_SealedEnvelope value);
        BTTVerifiableCredential_SealedEnvelope ConvertTo_BTTVerifiableCredential_SealedEnvelope(T value);
        TypeConversionAction GetConversionActionTo_BTTVerifiableCredential_SealedEnvelope();
        IEnumerable<BTTVerifiableCredential_SealedEnvelope> Enumerate_BTTVerifiableCredential_SealedEnvelope(T value);
        
        T ConvertFrom_BTTEncryptionFlag(BTTEncryptionFlag value);
        BTTEncryptionFlag ConvertTo_BTTEncryptionFlag(T value);
        TypeConversionAction GetConversionActionTo_BTTEncryptionFlag();
        IEnumerable<BTTEncryptionFlag> Enumerate_BTTEncryptionFlag(T value);
        
        T ConvertFrom_BTTGenericCredentialType(BTTGenericCredentialType value);
        BTTGenericCredentialType ConvertTo_BTTGenericCredentialType(T value);
        TypeConversionAction GetConversionActionTo_BTTGenericCredentialType();
        IEnumerable<BTTGenericCredentialType> Enumerate_BTTGenericCredentialType(T value);
        
        T ConvertFrom_BTTNFEBodyPart(BTTNFEBodyPart value);
        BTTNFEBodyPart ConvertTo_BTTNFEBodyPart(T value);
        TypeConversionAction GetConversionActionTo_BTTNFEBodyPart();
        IEnumerable<BTTNFEBodyPart> Enumerate_BTTNFEBodyPart(T value);
        
        T ConvertFrom_BTTTrustLevel(BTTTrustLevel value);
        BTTTrustLevel ConvertTo_BTTTrustLevel(T value);
        TypeConversionAction GetConversionActionTo_BTTTrustLevel();
        IEnumerable<BTTTrustLevel> Enumerate_BTTTrustLevel(T value);
        
        T ConvertFrom_List_List_BTTKeyValuePair(List<List<BTTKeyValuePair>> value);
        List<List<BTTKeyValuePair>> ConvertTo_List_List_BTTKeyValuePair(T value);
        TypeConversionAction GetConversionActionTo_List_List_BTTKeyValuePair();
        IEnumerable<List<List<BTTKeyValuePair>>> Enumerate_List_List_BTTKeyValuePair(T value);
        
        T ConvertFrom_List_BTTClaim(List<BTTClaim> value);
        List<BTTClaim> ConvertTo_List_BTTClaim(T value);
        TypeConversionAction GetConversionActionTo_List_BTTClaim();
        IEnumerable<List<BTTClaim>> Enumerate_List_BTTClaim(T value);
        
        T ConvertFrom_BTTEncryptedClaims_nullable(BTTEncryptedClaims? value);
        BTTEncryptedClaims? ConvertTo_BTTEncryptedClaims_nullable(T value);
        TypeConversionAction GetConversionActionTo_BTTEncryptedClaims_nullable();
        IEnumerable<BTTEncryptedClaims?> Enumerate_BTTEncryptedClaims_nullable(T value);
        
        T ConvertFrom_BTTNFE_N4K_Claims_nullable(BTTNFE_N4K_Claims? value);
        BTTNFE_N4K_Claims? ConvertTo_BTTNFE_N4K_Claims_nullable(T value);
        TypeConversionAction GetConversionActionTo_BTTNFE_N4K_Claims_nullable();
        IEnumerable<BTTNFE_N4K_Claims?> Enumerate_BTTNFE_N4K_Claims_nullable(T value);
        
    }
    internal class TypeConverter<T> : ITypeConverter<T>
    {
        internal class _TypeConverterImpl : ITypeConverter<object>
            
            , ITypeConverter<bool>
        
            , ITypeConverter<int>
        
            , ITypeConverter<long>
        
            , ITypeConverter<DateTime>
        
            , ITypeConverter<string>
        
            , ITypeConverter<int[]>
        
            , ITypeConverter<List<long>>
        
            , ITypeConverter<List<string>>
        
            , ITypeConverter<List<BTTKeyValuePair>>
        
            , ITypeConverter<BTTClaim>
        
            , ITypeConverter<BTTEncryptedClaims>
        
            , ITypeConverter<BTTGenericCredential_Envelope>
        
            , ITypeConverter<BTTGenericCredential_EnvelopeContent>
        
            , ITypeConverter<BTTGenericCredential_EnvelopeSeal>
        
            , ITypeConverter<BTTGenericCredential_PackingLabel>
        
            , ITypeConverter<BTTKeyValuePair>
        
            , ITypeConverter<BTTNFE_N4K_Claims>
        
            , ITypeConverter<BTTNFE_N4K_Envelope>
        
            , ITypeConverter<BTTNFE_N4K_EnvelopeContent>
        
            , ITypeConverter<BTTNFE_N4K_SealedEnvelope>
        
            , ITypeConverter<BTTVerifiableCredential_SealedEnvelope>
        
            , ITypeConverter<BTTEncryptionFlag>
        
            , ITypeConverter<BTTGenericCredentialType>
        
            , ITypeConverter<BTTNFEBodyPart>
        
            , ITypeConverter<BTTTrustLevel>
        
            , ITypeConverter<List<List<BTTKeyValuePair>>>
        
            , ITypeConverter<List<BTTClaim>>
        
            , ITypeConverter<BTTEncryptedClaims?>
        
            , ITypeConverter<BTTNFE_N4K_Claims?>
        
        {
            bool ITypeConverter<bool>.ConvertFrom_bool(bool value)
            {
                
                return (bool)value;
                
            }
            bool ITypeConverter<bool>.ConvertTo_bool(bool value)
            {
                return TypeConverter<bool>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<bool>.Enumerate_bool(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_int(int value)
            {
                
                return (value != 0);
                
            }
            int ITypeConverter<bool>.ConvertTo_int(bool value)
            {
                return TypeConverter<int>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_int()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int> ITypeConverter<bool>.Enumerate_int(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_long(long value)
            {
                
                return (value != 0);
                
            }
            long ITypeConverter<bool>.ConvertTo_long(bool value)
            {
                return TypeConverter<long>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<bool>.Enumerate_long(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_DateTime(DateTime value)
            {
                
                throw new InvalidCastException("Invalid cast from 'DateTime' to 'bool'.");
                
            }
            DateTime ITypeConverter<bool>.ConvertTo_DateTime(bool value)
            {
                return TypeConverter<DateTime>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_DateTime()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<DateTime> ITypeConverter<bool>.Enumerate_DateTime(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    bool intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = ExternalParser.TryParse_bool(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "bool");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<bool>.ConvertTo_string(bool value)
            {
                return TypeConverter<string>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<bool>.Enumerate_string(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_int_Array_150(int[] value)
            {
                
                throw new InvalidCastException("Invalid cast from 'int[]' to 'bool'.");
                
            }
            int[] ITypeConverter<bool>.ConvertTo_int_Array_150(bool value)
            {
                return TypeConverter<int[]>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_int_Array_150()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int[]> ITypeConverter<bool>.Enumerate_int_Array_150(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_List_long(List<long> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<long>' to 'bool'.");
                
            }
            List<long> ITypeConverter<bool>.ConvertTo_List_long(bool value)
            {
                return TypeConverter<List<long>>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_List_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<long>> ITypeConverter<bool>.Enumerate_List_long(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'bool'.");
                
            }
            List<string> ITypeConverter<bool>.ConvertTo_List_string(bool value)
            {
                return TypeConverter<List<string>>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<bool>.Enumerate_List_string(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_List_BTTKeyValuePair(List<BTTKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTKeyValuePair>' to 'bool'.");
                
            }
            List<BTTKeyValuePair> ITypeConverter<bool>.ConvertTo_List_BTTKeyValuePair(bool value)
            {
                return TypeConverter<List<BTTKeyValuePair>>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTKeyValuePair>> ITypeConverter<bool>.Enumerate_List_BTTKeyValuePair(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_BTTClaim(BTTClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTClaim' to 'bool'.");
                
            }
            BTTClaim ITypeConverter<bool>.ConvertTo_BTTClaim(bool value)
            {
                return TypeConverter<BTTClaim>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTClaim> ITypeConverter<bool>.Enumerate_BTTClaim(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_BTTEncryptedClaims(BTTEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims' to 'bool'.");
                
            }
            BTTEncryptedClaims ITypeConverter<bool>.ConvertTo_BTTEncryptedClaims(bool value)
            {
                return TypeConverter<BTTEncryptedClaims>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_BTTEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims> ITypeConverter<bool>.Enumerate_BTTEncryptedClaims(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_BTTGenericCredential_Envelope(BTTGenericCredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_Envelope' to 'bool'.");
                
            }
            BTTGenericCredential_Envelope ITypeConverter<bool>.ConvertTo_BTTGenericCredential_Envelope(bool value)
            {
                return TypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_BTTGenericCredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_Envelope> ITypeConverter<bool>.Enumerate_BTTGenericCredential_Envelope(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_BTTGenericCredential_EnvelopeContent(BTTGenericCredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeContent' to 'bool'.");
                
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<bool>.ConvertTo_BTTGenericCredential_EnvelopeContent(bool value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_BTTGenericCredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeContent> ITypeConverter<bool>.Enumerate_BTTGenericCredential_EnvelopeContent(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(BTTGenericCredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeSeal' to 'bool'.");
                
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<bool>.ConvertTo_BTTGenericCredential_EnvelopeSeal(bool value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_BTTGenericCredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeSeal> ITypeConverter<bool>.Enumerate_BTTGenericCredential_EnvelopeSeal(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_BTTGenericCredential_PackingLabel(BTTGenericCredential_PackingLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_PackingLabel' to 'bool'.");
                
            }
            BTTGenericCredential_PackingLabel ITypeConverter<bool>.ConvertTo_BTTGenericCredential_PackingLabel(bool value)
            {
                return TypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_BTTGenericCredential_PackingLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_PackingLabel> ITypeConverter<bool>.Enumerate_BTTGenericCredential_PackingLabel(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_BTTKeyValuePair(BTTKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTKeyValuePair' to 'bool'.");
                
            }
            BTTKeyValuePair ITypeConverter<bool>.ConvertTo_BTTKeyValuePair(bool value)
            {
                return TypeConverter<BTTKeyValuePair>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTKeyValuePair> ITypeConverter<bool>.Enumerate_BTTKeyValuePair(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_BTTNFE_N4K_Claims(BTTNFE_N4K_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims' to 'bool'.");
                
            }
            BTTNFE_N4K_Claims ITypeConverter<bool>.ConvertTo_BTTNFE_N4K_Claims(bool value)
            {
                return TypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_BTTNFE_N4K_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims> ITypeConverter<bool>.Enumerate_BTTNFE_N4K_Claims(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_BTTNFE_N4K_Envelope(BTTNFE_N4K_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Envelope' to 'bool'.");
                
            }
            BTTNFE_N4K_Envelope ITypeConverter<bool>.ConvertTo_BTTNFE_N4K_Envelope(bool value)
            {
                return TypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_BTTNFE_N4K_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Envelope> ITypeConverter<bool>.Enumerate_BTTNFE_N4K_Envelope(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(BTTNFE_N4K_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_EnvelopeContent' to 'bool'.");
                
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<bool>.ConvertTo_BTTNFE_N4K_EnvelopeContent(bool value)
            {
                return TypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_BTTNFE_N4K_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_EnvelopeContent> ITypeConverter<bool>.Enumerate_BTTNFE_N4K_EnvelopeContent(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(BTTNFE_N4K_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_SealedEnvelope' to 'bool'.");
                
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<bool>.ConvertTo_BTTNFE_N4K_SealedEnvelope(bool value)
            {
                return TypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_BTTNFE_N4K_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_SealedEnvelope> ITypeConverter<bool>.Enumerate_BTTNFE_N4K_SealedEnvelope(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTVerifiableCredential_SealedEnvelope' to 'bool'.");
                
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<bool>.ConvertTo_BTTVerifiableCredential_SealedEnvelope(bool value)
            {
                return TypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_BTTVerifiableCredential_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTVerifiableCredential_SealedEnvelope> ITypeConverter<bool>.Enumerate_BTTVerifiableCredential_SealedEnvelope(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_BTTEncryptionFlag(BTTEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptionFlag' to 'bool'.");
                
            }
            BTTEncryptionFlag ITypeConverter<bool>.ConvertTo_BTTEncryptionFlag(bool value)
            {
                return TypeConverter<BTTEncryptionFlag>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_BTTEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptionFlag> ITypeConverter<bool>.Enumerate_BTTEncryptionFlag(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_BTTGenericCredentialType(BTTGenericCredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredentialType' to 'bool'.");
                
            }
            BTTGenericCredentialType ITypeConverter<bool>.ConvertTo_BTTGenericCredentialType(bool value)
            {
                return TypeConverter<BTTGenericCredentialType>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_BTTGenericCredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredentialType> ITypeConverter<bool>.Enumerate_BTTGenericCredentialType(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_BTTNFEBodyPart(BTTNFEBodyPart value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFEBodyPart' to 'bool'.");
                
            }
            BTTNFEBodyPart ITypeConverter<bool>.ConvertTo_BTTNFEBodyPart(bool value)
            {
                return TypeConverter<BTTNFEBodyPart>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_BTTNFEBodyPart()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFEBodyPart> ITypeConverter<bool>.Enumerate_BTTNFEBodyPart(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_BTTTrustLevel(BTTTrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTTrustLevel' to 'bool'.");
                
            }
            BTTTrustLevel ITypeConverter<bool>.ConvertTo_BTTTrustLevel(bool value)
            {
                return TypeConverter<BTTTrustLevel>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_BTTTrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTTrustLevel> ITypeConverter<bool>.Enumerate_BTTTrustLevel(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_List_List_BTTKeyValuePair(List<List<BTTKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<BTTKeyValuePair>>' to 'bool'.");
                
            }
            List<List<BTTKeyValuePair>> ITypeConverter<bool>.ConvertTo_List_List_BTTKeyValuePair(bool value)
            {
                return TypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_List_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<BTTKeyValuePair>>> ITypeConverter<bool>.Enumerate_List_List_BTTKeyValuePair(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_List_BTTClaim(List<BTTClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTClaim>' to 'bool'.");
                
            }
            List<BTTClaim> ITypeConverter<bool>.ConvertTo_List_BTTClaim(bool value)
            {
                return TypeConverter<List<BTTClaim>>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_List_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTClaim>> ITypeConverter<bool>.Enumerate_List_BTTClaim(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_BTTEncryptedClaims_nullable(BTTEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims?' to 'bool'.");
                
            }
            BTTEncryptedClaims? ITypeConverter<bool>.ConvertTo_BTTEncryptedClaims_nullable(bool value)
            {
                return TypeConverter<BTTEncryptedClaims?>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_BTTEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims?> ITypeConverter<bool>.Enumerate_BTTEncryptedClaims_nullable(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_BTTNFE_N4K_Claims_nullable(BTTNFE_N4K_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims?' to 'bool'.");
                
            }
            BTTNFE_N4K_Claims? ITypeConverter<bool>.ConvertTo_BTTNFE_N4K_Claims_nullable(bool value)
            {
                return TypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_BTTNFE_N4K_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims?> ITypeConverter<bool>.Enumerate_BTTNFE_N4K_Claims_nullable(bool value)
            {
                
                yield break;
            }
            int ITypeConverter<int>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'int'.");
                
            }
            bool ITypeConverter<int>.ConvertTo_bool(int value)
            {
                return TypeConverter<bool>.ConvertFrom_int(value);
            }
            TypeConversionAction ITypeConverter<int>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_TOBOOL;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<int>.Enumerate_bool(int value)
            {
                
                yield break;
            }
            int ITypeConverter<int>.ConvertFrom_int(int value)
            {
                
                return (int)value;
                
            }
            int ITypeConverter<int>.ConvertTo_int(int value)
            {
                return TypeConverter<int>.ConvertFrom_int(value);
            }
            TypeConversionAction ITypeConverter<int>.GetConversionActionTo_int()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int> ITypeConverter<int>.Enumerate_int(int value)
            {
                
                yield break;
            }
            int ITypeConverter<int>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'int'.");
                
            }
            long ITypeConverter<int>.ConvertTo_long(int value)
            {
                return TypeConverter<long>.ConvertFrom_int(value);
            }
            TypeConversionAction ITypeConverter<int>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<int>.Enumerate_long(int value)
            {
                
                yield break;
            }
            int ITypeConverter<int>.ConvertFrom_DateTime(DateTime value)
            {
                
                throw new InvalidCastException("Invalid cast from 'DateTime' to 'int'.");
                
            }
            DateTime ITypeConverter<int>.ConvertTo_DateTime(int value)
            {
                return TypeConverter<DateTime>.ConvertFrom_int(value);
            }
            TypeConversionAction ITypeConverter<int>.GetConversionActionTo_DateTime()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<DateTime> ITypeConverter<int>.Enumerate_DateTime(int value)
            {
                
                yield break;
            }
            int ITypeConverter<int>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    int intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = int.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "int");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<int>.ConvertTo_string(int value)
            {
                return TypeConverter<string>.ConvertFrom_int(value);
            }
            TypeConversionAction ITypeConverter<int>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<int>.Enumerate_string(int value)
            {
                
                yield break;
            }
            int ITypeConverter<int>.ConvertFrom_int_Array_150(int[] value)
            {
                
                throw new InvalidCastException("Invalid cast from 'int[]' to 'int'.");
                
            }
            int[] ITypeConverter<int>.ConvertTo_int_Array_150(int value)
            {
                return TypeConverter<int[]>.ConvertFrom_int(value);
            }
            TypeConversionAction ITypeConverter<int>.GetConversionActionTo_int_Array_150()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int[]> ITypeConverter<int>.Enumerate_int_Array_150(int value)
            {
                
                yield break;
            }
            int ITypeConverter<int>.ConvertFrom_List_long(List<long> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<long>' to 'int'.");
                
            }
            List<long> ITypeConverter<int>.ConvertTo_List_long(int value)
            {
                return TypeConverter<List<long>>.ConvertFrom_int(value);
            }
            TypeConversionAction ITypeConverter<int>.GetConversionActionTo_List_long()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<long>> ITypeConverter<int>.Enumerate_List_long(int value)
            {
                
                yield break;
            }
            int ITypeConverter<int>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'int'.");
                
            }
            List<string> ITypeConverter<int>.ConvertTo_List_string(int value)
            {
                return TypeConverter<List<string>>.ConvertFrom_int(value);
            }
            TypeConversionAction ITypeConverter<int>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<int>.Enumerate_List_string(int value)
            {
                
                yield break;
            }
            int ITypeConverter<int>.ConvertFrom_List_BTTKeyValuePair(List<BTTKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTKeyValuePair>' to 'int'.");
                
            }
            List<BTTKeyValuePair> ITypeConverter<int>.ConvertTo_List_BTTKeyValuePair(int value)
            {
                return TypeConverter<List<BTTKeyValuePair>>.ConvertFrom_int(value);
            }
            TypeConversionAction ITypeConverter<int>.GetConversionActionTo_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTKeyValuePair>> ITypeConverter<int>.Enumerate_List_BTTKeyValuePair(int value)
            {
                
                yield break;
            }
            int ITypeConverter<int>.ConvertFrom_BTTClaim(BTTClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTClaim' to 'int'.");
                
            }
            BTTClaim ITypeConverter<int>.ConvertTo_BTTClaim(int value)
            {
                return TypeConverter<BTTClaim>.ConvertFrom_int(value);
            }
            TypeConversionAction ITypeConverter<int>.GetConversionActionTo_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTClaim> ITypeConverter<int>.Enumerate_BTTClaim(int value)
            {
                
                yield break;
            }
            int ITypeConverter<int>.ConvertFrom_BTTEncryptedClaims(BTTEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims' to 'int'.");
                
            }
            BTTEncryptedClaims ITypeConverter<int>.ConvertTo_BTTEncryptedClaims(int value)
            {
                return TypeConverter<BTTEncryptedClaims>.ConvertFrom_int(value);
            }
            TypeConversionAction ITypeConverter<int>.GetConversionActionTo_BTTEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims> ITypeConverter<int>.Enumerate_BTTEncryptedClaims(int value)
            {
                
                yield break;
            }
            int ITypeConverter<int>.ConvertFrom_BTTGenericCredential_Envelope(BTTGenericCredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_Envelope' to 'int'.");
                
            }
            BTTGenericCredential_Envelope ITypeConverter<int>.ConvertTo_BTTGenericCredential_Envelope(int value)
            {
                return TypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_int(value);
            }
            TypeConversionAction ITypeConverter<int>.GetConversionActionTo_BTTGenericCredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_Envelope> ITypeConverter<int>.Enumerate_BTTGenericCredential_Envelope(int value)
            {
                
                yield break;
            }
            int ITypeConverter<int>.ConvertFrom_BTTGenericCredential_EnvelopeContent(BTTGenericCredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeContent' to 'int'.");
                
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<int>.ConvertTo_BTTGenericCredential_EnvelopeContent(int value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_int(value);
            }
            TypeConversionAction ITypeConverter<int>.GetConversionActionTo_BTTGenericCredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeContent> ITypeConverter<int>.Enumerate_BTTGenericCredential_EnvelopeContent(int value)
            {
                
                yield break;
            }
            int ITypeConverter<int>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(BTTGenericCredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeSeal' to 'int'.");
                
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<int>.ConvertTo_BTTGenericCredential_EnvelopeSeal(int value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_int(value);
            }
            TypeConversionAction ITypeConverter<int>.GetConversionActionTo_BTTGenericCredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeSeal> ITypeConverter<int>.Enumerate_BTTGenericCredential_EnvelopeSeal(int value)
            {
                
                yield break;
            }
            int ITypeConverter<int>.ConvertFrom_BTTGenericCredential_PackingLabel(BTTGenericCredential_PackingLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_PackingLabel' to 'int'.");
                
            }
            BTTGenericCredential_PackingLabel ITypeConverter<int>.ConvertTo_BTTGenericCredential_PackingLabel(int value)
            {
                return TypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_int(value);
            }
            TypeConversionAction ITypeConverter<int>.GetConversionActionTo_BTTGenericCredential_PackingLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_PackingLabel> ITypeConverter<int>.Enumerate_BTTGenericCredential_PackingLabel(int value)
            {
                
                yield break;
            }
            int ITypeConverter<int>.ConvertFrom_BTTKeyValuePair(BTTKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTKeyValuePair' to 'int'.");
                
            }
            BTTKeyValuePair ITypeConverter<int>.ConvertTo_BTTKeyValuePair(int value)
            {
                return TypeConverter<BTTKeyValuePair>.ConvertFrom_int(value);
            }
            TypeConversionAction ITypeConverter<int>.GetConversionActionTo_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTKeyValuePair> ITypeConverter<int>.Enumerate_BTTKeyValuePair(int value)
            {
                
                yield break;
            }
            int ITypeConverter<int>.ConvertFrom_BTTNFE_N4K_Claims(BTTNFE_N4K_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims' to 'int'.");
                
            }
            BTTNFE_N4K_Claims ITypeConverter<int>.ConvertTo_BTTNFE_N4K_Claims(int value)
            {
                return TypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_int(value);
            }
            TypeConversionAction ITypeConverter<int>.GetConversionActionTo_BTTNFE_N4K_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims> ITypeConverter<int>.Enumerate_BTTNFE_N4K_Claims(int value)
            {
                
                yield break;
            }
            int ITypeConverter<int>.ConvertFrom_BTTNFE_N4K_Envelope(BTTNFE_N4K_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Envelope' to 'int'.");
                
            }
            BTTNFE_N4K_Envelope ITypeConverter<int>.ConvertTo_BTTNFE_N4K_Envelope(int value)
            {
                return TypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_int(value);
            }
            TypeConversionAction ITypeConverter<int>.GetConversionActionTo_BTTNFE_N4K_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Envelope> ITypeConverter<int>.Enumerate_BTTNFE_N4K_Envelope(int value)
            {
                
                yield break;
            }
            int ITypeConverter<int>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(BTTNFE_N4K_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_EnvelopeContent' to 'int'.");
                
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<int>.ConvertTo_BTTNFE_N4K_EnvelopeContent(int value)
            {
                return TypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_int(value);
            }
            TypeConversionAction ITypeConverter<int>.GetConversionActionTo_BTTNFE_N4K_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_EnvelopeContent> ITypeConverter<int>.Enumerate_BTTNFE_N4K_EnvelopeContent(int value)
            {
                
                yield break;
            }
            int ITypeConverter<int>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(BTTNFE_N4K_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_SealedEnvelope' to 'int'.");
                
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<int>.ConvertTo_BTTNFE_N4K_SealedEnvelope(int value)
            {
                return TypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_int(value);
            }
            TypeConversionAction ITypeConverter<int>.GetConversionActionTo_BTTNFE_N4K_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_SealedEnvelope> ITypeConverter<int>.Enumerate_BTTNFE_N4K_SealedEnvelope(int value)
            {
                
                yield break;
            }
            int ITypeConverter<int>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTVerifiableCredential_SealedEnvelope' to 'int'.");
                
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<int>.ConvertTo_BTTVerifiableCredential_SealedEnvelope(int value)
            {
                return TypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_int(value);
            }
            TypeConversionAction ITypeConverter<int>.GetConversionActionTo_BTTVerifiableCredential_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTVerifiableCredential_SealedEnvelope> ITypeConverter<int>.Enumerate_BTTVerifiableCredential_SealedEnvelope(int value)
            {
                
                yield break;
            }
            int ITypeConverter<int>.ConvertFrom_BTTEncryptionFlag(BTTEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptionFlag' to 'int'.");
                
            }
            BTTEncryptionFlag ITypeConverter<int>.ConvertTo_BTTEncryptionFlag(int value)
            {
                return TypeConverter<BTTEncryptionFlag>.ConvertFrom_int(value);
            }
            TypeConversionAction ITypeConverter<int>.GetConversionActionTo_BTTEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptionFlag> ITypeConverter<int>.Enumerate_BTTEncryptionFlag(int value)
            {
                
                yield break;
            }
            int ITypeConverter<int>.ConvertFrom_BTTGenericCredentialType(BTTGenericCredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredentialType' to 'int'.");
                
            }
            BTTGenericCredentialType ITypeConverter<int>.ConvertTo_BTTGenericCredentialType(int value)
            {
                return TypeConverter<BTTGenericCredentialType>.ConvertFrom_int(value);
            }
            TypeConversionAction ITypeConverter<int>.GetConversionActionTo_BTTGenericCredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredentialType> ITypeConverter<int>.Enumerate_BTTGenericCredentialType(int value)
            {
                
                yield break;
            }
            int ITypeConverter<int>.ConvertFrom_BTTNFEBodyPart(BTTNFEBodyPart value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFEBodyPart' to 'int'.");
                
            }
            BTTNFEBodyPart ITypeConverter<int>.ConvertTo_BTTNFEBodyPart(int value)
            {
                return TypeConverter<BTTNFEBodyPart>.ConvertFrom_int(value);
            }
            TypeConversionAction ITypeConverter<int>.GetConversionActionTo_BTTNFEBodyPart()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFEBodyPart> ITypeConverter<int>.Enumerate_BTTNFEBodyPart(int value)
            {
                
                yield break;
            }
            int ITypeConverter<int>.ConvertFrom_BTTTrustLevel(BTTTrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTTrustLevel' to 'int'.");
                
            }
            BTTTrustLevel ITypeConverter<int>.ConvertTo_BTTTrustLevel(int value)
            {
                return TypeConverter<BTTTrustLevel>.ConvertFrom_int(value);
            }
            TypeConversionAction ITypeConverter<int>.GetConversionActionTo_BTTTrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTTrustLevel> ITypeConverter<int>.Enumerate_BTTTrustLevel(int value)
            {
                
                yield break;
            }
            int ITypeConverter<int>.ConvertFrom_List_List_BTTKeyValuePair(List<List<BTTKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<BTTKeyValuePair>>' to 'int'.");
                
            }
            List<List<BTTKeyValuePair>> ITypeConverter<int>.ConvertTo_List_List_BTTKeyValuePair(int value)
            {
                return TypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_int(value);
            }
            TypeConversionAction ITypeConverter<int>.GetConversionActionTo_List_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<BTTKeyValuePair>>> ITypeConverter<int>.Enumerate_List_List_BTTKeyValuePair(int value)
            {
                
                yield break;
            }
            int ITypeConverter<int>.ConvertFrom_List_BTTClaim(List<BTTClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTClaim>' to 'int'.");
                
            }
            List<BTTClaim> ITypeConverter<int>.ConvertTo_List_BTTClaim(int value)
            {
                return TypeConverter<List<BTTClaim>>.ConvertFrom_int(value);
            }
            TypeConversionAction ITypeConverter<int>.GetConversionActionTo_List_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTClaim>> ITypeConverter<int>.Enumerate_List_BTTClaim(int value)
            {
                
                yield break;
            }
            int ITypeConverter<int>.ConvertFrom_BTTEncryptedClaims_nullable(BTTEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims?' to 'int'.");
                
            }
            BTTEncryptedClaims? ITypeConverter<int>.ConvertTo_BTTEncryptedClaims_nullable(int value)
            {
                return TypeConverter<BTTEncryptedClaims?>.ConvertFrom_int(value);
            }
            TypeConversionAction ITypeConverter<int>.GetConversionActionTo_BTTEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims?> ITypeConverter<int>.Enumerate_BTTEncryptedClaims_nullable(int value)
            {
                
                yield break;
            }
            int ITypeConverter<int>.ConvertFrom_BTTNFE_N4K_Claims_nullable(BTTNFE_N4K_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims?' to 'int'.");
                
            }
            BTTNFE_N4K_Claims? ITypeConverter<int>.ConvertTo_BTTNFE_N4K_Claims_nullable(int value)
            {
                return TypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_int(value);
            }
            TypeConversionAction ITypeConverter<int>.GetConversionActionTo_BTTNFE_N4K_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims?> ITypeConverter<int>.Enumerate_BTTNFE_N4K_Claims_nullable(int value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'long'.");
                
            }
            bool ITypeConverter<long>.ConvertTo_bool(long value)
            {
                return TypeConverter<bool>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_TOBOOL;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<long>.Enumerate_bool(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_int(int value)
            {
                
                return (long)value;
                
            }
            int ITypeConverter<long>.ConvertTo_int(long value)
            {
                return TypeConverter<int>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_int()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int> ITypeConverter<long>.Enumerate_int(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_long(long value)
            {
                
                return (long)value;
                
            }
            long ITypeConverter<long>.ConvertTo_long(long value)
            {
                return TypeConverter<long>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<long>.Enumerate_long(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_DateTime(DateTime value)
            {
                
                throw new InvalidCastException("Invalid cast from 'DateTime' to 'long'.");
                
            }
            DateTime ITypeConverter<long>.ConvertTo_DateTime(long value)
            {
                return TypeConverter<DateTime>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_DateTime()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<DateTime> ITypeConverter<long>.Enumerate_DateTime(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    long intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = long.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "long");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<long>.ConvertTo_string(long value)
            {
                return TypeConverter<string>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<long>.Enumerate_string(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_int_Array_150(int[] value)
            {
                
                throw new InvalidCastException("Invalid cast from 'int[]' to 'long'.");
                
            }
            int[] ITypeConverter<long>.ConvertTo_int_Array_150(long value)
            {
                return TypeConverter<int[]>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_int_Array_150()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int[]> ITypeConverter<long>.Enumerate_int_Array_150(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_List_long(List<long> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<long>' to 'long'.");
                
            }
            List<long> ITypeConverter<long>.ConvertTo_List_long(long value)
            {
                return TypeConverter<List<long>>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_List_long()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<long>> ITypeConverter<long>.Enumerate_List_long(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'long'.");
                
            }
            List<string> ITypeConverter<long>.ConvertTo_List_string(long value)
            {
                return TypeConverter<List<string>>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<long>.Enumerate_List_string(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_List_BTTKeyValuePair(List<BTTKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTKeyValuePair>' to 'long'.");
                
            }
            List<BTTKeyValuePair> ITypeConverter<long>.ConvertTo_List_BTTKeyValuePair(long value)
            {
                return TypeConverter<List<BTTKeyValuePair>>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTKeyValuePair>> ITypeConverter<long>.Enumerate_List_BTTKeyValuePair(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_BTTClaim(BTTClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTClaim' to 'long'.");
                
            }
            BTTClaim ITypeConverter<long>.ConvertTo_BTTClaim(long value)
            {
                return TypeConverter<BTTClaim>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTClaim> ITypeConverter<long>.Enumerate_BTTClaim(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_BTTEncryptedClaims(BTTEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims' to 'long'.");
                
            }
            BTTEncryptedClaims ITypeConverter<long>.ConvertTo_BTTEncryptedClaims(long value)
            {
                return TypeConverter<BTTEncryptedClaims>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_BTTEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims> ITypeConverter<long>.Enumerate_BTTEncryptedClaims(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_BTTGenericCredential_Envelope(BTTGenericCredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_Envelope' to 'long'.");
                
            }
            BTTGenericCredential_Envelope ITypeConverter<long>.ConvertTo_BTTGenericCredential_Envelope(long value)
            {
                return TypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_BTTGenericCredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_Envelope> ITypeConverter<long>.Enumerate_BTTGenericCredential_Envelope(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_BTTGenericCredential_EnvelopeContent(BTTGenericCredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeContent' to 'long'.");
                
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<long>.ConvertTo_BTTGenericCredential_EnvelopeContent(long value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_BTTGenericCredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeContent> ITypeConverter<long>.Enumerate_BTTGenericCredential_EnvelopeContent(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(BTTGenericCredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeSeal' to 'long'.");
                
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<long>.ConvertTo_BTTGenericCredential_EnvelopeSeal(long value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_BTTGenericCredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeSeal> ITypeConverter<long>.Enumerate_BTTGenericCredential_EnvelopeSeal(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_BTTGenericCredential_PackingLabel(BTTGenericCredential_PackingLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_PackingLabel' to 'long'.");
                
            }
            BTTGenericCredential_PackingLabel ITypeConverter<long>.ConvertTo_BTTGenericCredential_PackingLabel(long value)
            {
                return TypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_BTTGenericCredential_PackingLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_PackingLabel> ITypeConverter<long>.Enumerate_BTTGenericCredential_PackingLabel(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_BTTKeyValuePair(BTTKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTKeyValuePair' to 'long'.");
                
            }
            BTTKeyValuePair ITypeConverter<long>.ConvertTo_BTTKeyValuePair(long value)
            {
                return TypeConverter<BTTKeyValuePair>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTKeyValuePair> ITypeConverter<long>.Enumerate_BTTKeyValuePair(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_BTTNFE_N4K_Claims(BTTNFE_N4K_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims' to 'long'.");
                
            }
            BTTNFE_N4K_Claims ITypeConverter<long>.ConvertTo_BTTNFE_N4K_Claims(long value)
            {
                return TypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_BTTNFE_N4K_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims> ITypeConverter<long>.Enumerate_BTTNFE_N4K_Claims(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_BTTNFE_N4K_Envelope(BTTNFE_N4K_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Envelope' to 'long'.");
                
            }
            BTTNFE_N4K_Envelope ITypeConverter<long>.ConvertTo_BTTNFE_N4K_Envelope(long value)
            {
                return TypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_BTTNFE_N4K_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Envelope> ITypeConverter<long>.Enumerate_BTTNFE_N4K_Envelope(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(BTTNFE_N4K_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_EnvelopeContent' to 'long'.");
                
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<long>.ConvertTo_BTTNFE_N4K_EnvelopeContent(long value)
            {
                return TypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_BTTNFE_N4K_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_EnvelopeContent> ITypeConverter<long>.Enumerate_BTTNFE_N4K_EnvelopeContent(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(BTTNFE_N4K_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_SealedEnvelope' to 'long'.");
                
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<long>.ConvertTo_BTTNFE_N4K_SealedEnvelope(long value)
            {
                return TypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_BTTNFE_N4K_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_SealedEnvelope> ITypeConverter<long>.Enumerate_BTTNFE_N4K_SealedEnvelope(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTVerifiableCredential_SealedEnvelope' to 'long'.");
                
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<long>.ConvertTo_BTTVerifiableCredential_SealedEnvelope(long value)
            {
                return TypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_BTTVerifiableCredential_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTVerifiableCredential_SealedEnvelope> ITypeConverter<long>.Enumerate_BTTVerifiableCredential_SealedEnvelope(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_BTTEncryptionFlag(BTTEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptionFlag' to 'long'.");
                
            }
            BTTEncryptionFlag ITypeConverter<long>.ConvertTo_BTTEncryptionFlag(long value)
            {
                return TypeConverter<BTTEncryptionFlag>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_BTTEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptionFlag> ITypeConverter<long>.Enumerate_BTTEncryptionFlag(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_BTTGenericCredentialType(BTTGenericCredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredentialType' to 'long'.");
                
            }
            BTTGenericCredentialType ITypeConverter<long>.ConvertTo_BTTGenericCredentialType(long value)
            {
                return TypeConverter<BTTGenericCredentialType>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_BTTGenericCredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredentialType> ITypeConverter<long>.Enumerate_BTTGenericCredentialType(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_BTTNFEBodyPart(BTTNFEBodyPart value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFEBodyPart' to 'long'.");
                
            }
            BTTNFEBodyPart ITypeConverter<long>.ConvertTo_BTTNFEBodyPart(long value)
            {
                return TypeConverter<BTTNFEBodyPart>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_BTTNFEBodyPart()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFEBodyPart> ITypeConverter<long>.Enumerate_BTTNFEBodyPart(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_BTTTrustLevel(BTTTrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTTrustLevel' to 'long'.");
                
            }
            BTTTrustLevel ITypeConverter<long>.ConvertTo_BTTTrustLevel(long value)
            {
                return TypeConverter<BTTTrustLevel>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_BTTTrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTTrustLevel> ITypeConverter<long>.Enumerate_BTTTrustLevel(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_List_List_BTTKeyValuePair(List<List<BTTKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<BTTKeyValuePair>>' to 'long'.");
                
            }
            List<List<BTTKeyValuePair>> ITypeConverter<long>.ConvertTo_List_List_BTTKeyValuePair(long value)
            {
                return TypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_List_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<BTTKeyValuePair>>> ITypeConverter<long>.Enumerate_List_List_BTTKeyValuePair(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_List_BTTClaim(List<BTTClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTClaim>' to 'long'.");
                
            }
            List<BTTClaim> ITypeConverter<long>.ConvertTo_List_BTTClaim(long value)
            {
                return TypeConverter<List<BTTClaim>>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_List_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTClaim>> ITypeConverter<long>.Enumerate_List_BTTClaim(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_BTTEncryptedClaims_nullable(BTTEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims?' to 'long'.");
                
            }
            BTTEncryptedClaims? ITypeConverter<long>.ConvertTo_BTTEncryptedClaims_nullable(long value)
            {
                return TypeConverter<BTTEncryptedClaims?>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_BTTEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims?> ITypeConverter<long>.Enumerate_BTTEncryptedClaims_nullable(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_BTTNFE_N4K_Claims_nullable(BTTNFE_N4K_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims?' to 'long'.");
                
            }
            BTTNFE_N4K_Claims? ITypeConverter<long>.ConvertTo_BTTNFE_N4K_Claims_nullable(long value)
            {
                return TypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_BTTNFE_N4K_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims?> ITypeConverter<long>.Enumerate_BTTNFE_N4K_Claims_nullable(long value)
            {
                
                yield break;
            }
            DateTime ITypeConverter<DateTime>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'DateTime'.");
                
            }
            bool ITypeConverter<DateTime>.ConvertTo_bool(DateTime value)
            {
                return TypeConverter<bool>.ConvertFrom_DateTime(value);
            }
            TypeConversionAction ITypeConverter<DateTime>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<DateTime>.Enumerate_bool(DateTime value)
            {
                
                yield break;
            }
            DateTime ITypeConverter<DateTime>.ConvertFrom_int(int value)
            {
                
                throw new InvalidCastException("Invalid cast from 'int' to 'DateTime'.");
                
            }
            int ITypeConverter<DateTime>.ConvertTo_int(DateTime value)
            {
                return TypeConverter<int>.ConvertFrom_DateTime(value);
            }
            TypeConversionAction ITypeConverter<DateTime>.GetConversionActionTo_int()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int> ITypeConverter<DateTime>.Enumerate_int(DateTime value)
            {
                
                yield break;
            }
            DateTime ITypeConverter<DateTime>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'DateTime'.");
                
            }
            long ITypeConverter<DateTime>.ConvertTo_long(DateTime value)
            {
                return TypeConverter<long>.ConvertFrom_DateTime(value);
            }
            TypeConversionAction ITypeConverter<DateTime>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<DateTime>.Enumerate_long(DateTime value)
            {
                
                yield break;
            }
            DateTime ITypeConverter<DateTime>.ConvertFrom_DateTime(DateTime value)
            {
                
                return (DateTime)value;
                
            }
            DateTime ITypeConverter<DateTime>.ConvertTo_DateTime(DateTime value)
            {
                return TypeConverter<DateTime>.ConvertFrom_DateTime(value);
            }
            TypeConversionAction ITypeConverter<DateTime>.GetConversionActionTo_DateTime()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<DateTime> ITypeConverter<DateTime>.Enumerate_DateTime(DateTime value)
            {
                
                yield break;
            }
            DateTime ITypeConverter<DateTime>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    DateTime intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = ExternalParser.TryParse_DateTime(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "DateTime");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<DateTime>.ConvertTo_string(DateTime value)
            {
                return TypeConverter<string>.ConvertFrom_DateTime(value);
            }
            TypeConversionAction ITypeConverter<DateTime>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<DateTime>.Enumerate_string(DateTime value)
            {
                
                yield break;
            }
            DateTime ITypeConverter<DateTime>.ConvertFrom_int_Array_150(int[] value)
            {
                
                throw new InvalidCastException("Invalid cast from 'int[]' to 'DateTime'.");
                
            }
            int[] ITypeConverter<DateTime>.ConvertTo_int_Array_150(DateTime value)
            {
                return TypeConverter<int[]>.ConvertFrom_DateTime(value);
            }
            TypeConversionAction ITypeConverter<DateTime>.GetConversionActionTo_int_Array_150()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int[]> ITypeConverter<DateTime>.Enumerate_int_Array_150(DateTime value)
            {
                
                yield break;
            }
            DateTime ITypeConverter<DateTime>.ConvertFrom_List_long(List<long> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<long>' to 'DateTime'.");
                
            }
            List<long> ITypeConverter<DateTime>.ConvertTo_List_long(DateTime value)
            {
                return TypeConverter<List<long>>.ConvertFrom_DateTime(value);
            }
            TypeConversionAction ITypeConverter<DateTime>.GetConversionActionTo_List_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<long>> ITypeConverter<DateTime>.Enumerate_List_long(DateTime value)
            {
                
                yield break;
            }
            DateTime ITypeConverter<DateTime>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'DateTime'.");
                
            }
            List<string> ITypeConverter<DateTime>.ConvertTo_List_string(DateTime value)
            {
                return TypeConverter<List<string>>.ConvertFrom_DateTime(value);
            }
            TypeConversionAction ITypeConverter<DateTime>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<DateTime>.Enumerate_List_string(DateTime value)
            {
                
                yield break;
            }
            DateTime ITypeConverter<DateTime>.ConvertFrom_List_BTTKeyValuePair(List<BTTKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTKeyValuePair>' to 'DateTime'.");
                
            }
            List<BTTKeyValuePair> ITypeConverter<DateTime>.ConvertTo_List_BTTKeyValuePair(DateTime value)
            {
                return TypeConverter<List<BTTKeyValuePair>>.ConvertFrom_DateTime(value);
            }
            TypeConversionAction ITypeConverter<DateTime>.GetConversionActionTo_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTKeyValuePair>> ITypeConverter<DateTime>.Enumerate_List_BTTKeyValuePair(DateTime value)
            {
                
                yield break;
            }
            DateTime ITypeConverter<DateTime>.ConvertFrom_BTTClaim(BTTClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTClaim' to 'DateTime'.");
                
            }
            BTTClaim ITypeConverter<DateTime>.ConvertTo_BTTClaim(DateTime value)
            {
                return TypeConverter<BTTClaim>.ConvertFrom_DateTime(value);
            }
            TypeConversionAction ITypeConverter<DateTime>.GetConversionActionTo_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTClaim> ITypeConverter<DateTime>.Enumerate_BTTClaim(DateTime value)
            {
                
                yield break;
            }
            DateTime ITypeConverter<DateTime>.ConvertFrom_BTTEncryptedClaims(BTTEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims' to 'DateTime'.");
                
            }
            BTTEncryptedClaims ITypeConverter<DateTime>.ConvertTo_BTTEncryptedClaims(DateTime value)
            {
                return TypeConverter<BTTEncryptedClaims>.ConvertFrom_DateTime(value);
            }
            TypeConversionAction ITypeConverter<DateTime>.GetConversionActionTo_BTTEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims> ITypeConverter<DateTime>.Enumerate_BTTEncryptedClaims(DateTime value)
            {
                
                yield break;
            }
            DateTime ITypeConverter<DateTime>.ConvertFrom_BTTGenericCredential_Envelope(BTTGenericCredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_Envelope' to 'DateTime'.");
                
            }
            BTTGenericCredential_Envelope ITypeConverter<DateTime>.ConvertTo_BTTGenericCredential_Envelope(DateTime value)
            {
                return TypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_DateTime(value);
            }
            TypeConversionAction ITypeConverter<DateTime>.GetConversionActionTo_BTTGenericCredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_Envelope> ITypeConverter<DateTime>.Enumerate_BTTGenericCredential_Envelope(DateTime value)
            {
                
                yield break;
            }
            DateTime ITypeConverter<DateTime>.ConvertFrom_BTTGenericCredential_EnvelopeContent(BTTGenericCredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeContent' to 'DateTime'.");
                
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<DateTime>.ConvertTo_BTTGenericCredential_EnvelopeContent(DateTime value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_DateTime(value);
            }
            TypeConversionAction ITypeConverter<DateTime>.GetConversionActionTo_BTTGenericCredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeContent> ITypeConverter<DateTime>.Enumerate_BTTGenericCredential_EnvelopeContent(DateTime value)
            {
                
                yield break;
            }
            DateTime ITypeConverter<DateTime>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(BTTGenericCredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeSeal' to 'DateTime'.");
                
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<DateTime>.ConvertTo_BTTGenericCredential_EnvelopeSeal(DateTime value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_DateTime(value);
            }
            TypeConversionAction ITypeConverter<DateTime>.GetConversionActionTo_BTTGenericCredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeSeal> ITypeConverter<DateTime>.Enumerate_BTTGenericCredential_EnvelopeSeal(DateTime value)
            {
                
                yield break;
            }
            DateTime ITypeConverter<DateTime>.ConvertFrom_BTTGenericCredential_PackingLabel(BTTGenericCredential_PackingLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_PackingLabel' to 'DateTime'.");
                
            }
            BTTGenericCredential_PackingLabel ITypeConverter<DateTime>.ConvertTo_BTTGenericCredential_PackingLabel(DateTime value)
            {
                return TypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_DateTime(value);
            }
            TypeConversionAction ITypeConverter<DateTime>.GetConversionActionTo_BTTGenericCredential_PackingLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_PackingLabel> ITypeConverter<DateTime>.Enumerate_BTTGenericCredential_PackingLabel(DateTime value)
            {
                
                yield break;
            }
            DateTime ITypeConverter<DateTime>.ConvertFrom_BTTKeyValuePair(BTTKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTKeyValuePair' to 'DateTime'.");
                
            }
            BTTKeyValuePair ITypeConverter<DateTime>.ConvertTo_BTTKeyValuePair(DateTime value)
            {
                return TypeConverter<BTTKeyValuePair>.ConvertFrom_DateTime(value);
            }
            TypeConversionAction ITypeConverter<DateTime>.GetConversionActionTo_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTKeyValuePair> ITypeConverter<DateTime>.Enumerate_BTTKeyValuePair(DateTime value)
            {
                
                yield break;
            }
            DateTime ITypeConverter<DateTime>.ConvertFrom_BTTNFE_N4K_Claims(BTTNFE_N4K_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims' to 'DateTime'.");
                
            }
            BTTNFE_N4K_Claims ITypeConverter<DateTime>.ConvertTo_BTTNFE_N4K_Claims(DateTime value)
            {
                return TypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_DateTime(value);
            }
            TypeConversionAction ITypeConverter<DateTime>.GetConversionActionTo_BTTNFE_N4K_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims> ITypeConverter<DateTime>.Enumerate_BTTNFE_N4K_Claims(DateTime value)
            {
                
                yield break;
            }
            DateTime ITypeConverter<DateTime>.ConvertFrom_BTTNFE_N4K_Envelope(BTTNFE_N4K_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Envelope' to 'DateTime'.");
                
            }
            BTTNFE_N4K_Envelope ITypeConverter<DateTime>.ConvertTo_BTTNFE_N4K_Envelope(DateTime value)
            {
                return TypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_DateTime(value);
            }
            TypeConversionAction ITypeConverter<DateTime>.GetConversionActionTo_BTTNFE_N4K_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Envelope> ITypeConverter<DateTime>.Enumerate_BTTNFE_N4K_Envelope(DateTime value)
            {
                
                yield break;
            }
            DateTime ITypeConverter<DateTime>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(BTTNFE_N4K_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_EnvelopeContent' to 'DateTime'.");
                
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<DateTime>.ConvertTo_BTTNFE_N4K_EnvelopeContent(DateTime value)
            {
                return TypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_DateTime(value);
            }
            TypeConversionAction ITypeConverter<DateTime>.GetConversionActionTo_BTTNFE_N4K_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_EnvelopeContent> ITypeConverter<DateTime>.Enumerate_BTTNFE_N4K_EnvelopeContent(DateTime value)
            {
                
                yield break;
            }
            DateTime ITypeConverter<DateTime>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(BTTNFE_N4K_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_SealedEnvelope' to 'DateTime'.");
                
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<DateTime>.ConvertTo_BTTNFE_N4K_SealedEnvelope(DateTime value)
            {
                return TypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_DateTime(value);
            }
            TypeConversionAction ITypeConverter<DateTime>.GetConversionActionTo_BTTNFE_N4K_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_SealedEnvelope> ITypeConverter<DateTime>.Enumerate_BTTNFE_N4K_SealedEnvelope(DateTime value)
            {
                
                yield break;
            }
            DateTime ITypeConverter<DateTime>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTVerifiableCredential_SealedEnvelope' to 'DateTime'.");
                
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<DateTime>.ConvertTo_BTTVerifiableCredential_SealedEnvelope(DateTime value)
            {
                return TypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_DateTime(value);
            }
            TypeConversionAction ITypeConverter<DateTime>.GetConversionActionTo_BTTVerifiableCredential_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTVerifiableCredential_SealedEnvelope> ITypeConverter<DateTime>.Enumerate_BTTVerifiableCredential_SealedEnvelope(DateTime value)
            {
                
                yield break;
            }
            DateTime ITypeConverter<DateTime>.ConvertFrom_BTTEncryptionFlag(BTTEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptionFlag' to 'DateTime'.");
                
            }
            BTTEncryptionFlag ITypeConverter<DateTime>.ConvertTo_BTTEncryptionFlag(DateTime value)
            {
                return TypeConverter<BTTEncryptionFlag>.ConvertFrom_DateTime(value);
            }
            TypeConversionAction ITypeConverter<DateTime>.GetConversionActionTo_BTTEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptionFlag> ITypeConverter<DateTime>.Enumerate_BTTEncryptionFlag(DateTime value)
            {
                
                yield break;
            }
            DateTime ITypeConverter<DateTime>.ConvertFrom_BTTGenericCredentialType(BTTGenericCredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredentialType' to 'DateTime'.");
                
            }
            BTTGenericCredentialType ITypeConverter<DateTime>.ConvertTo_BTTGenericCredentialType(DateTime value)
            {
                return TypeConverter<BTTGenericCredentialType>.ConvertFrom_DateTime(value);
            }
            TypeConversionAction ITypeConverter<DateTime>.GetConversionActionTo_BTTGenericCredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredentialType> ITypeConverter<DateTime>.Enumerate_BTTGenericCredentialType(DateTime value)
            {
                
                yield break;
            }
            DateTime ITypeConverter<DateTime>.ConvertFrom_BTTNFEBodyPart(BTTNFEBodyPart value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFEBodyPart' to 'DateTime'.");
                
            }
            BTTNFEBodyPart ITypeConverter<DateTime>.ConvertTo_BTTNFEBodyPart(DateTime value)
            {
                return TypeConverter<BTTNFEBodyPart>.ConvertFrom_DateTime(value);
            }
            TypeConversionAction ITypeConverter<DateTime>.GetConversionActionTo_BTTNFEBodyPart()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFEBodyPart> ITypeConverter<DateTime>.Enumerate_BTTNFEBodyPart(DateTime value)
            {
                
                yield break;
            }
            DateTime ITypeConverter<DateTime>.ConvertFrom_BTTTrustLevel(BTTTrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTTrustLevel' to 'DateTime'.");
                
            }
            BTTTrustLevel ITypeConverter<DateTime>.ConvertTo_BTTTrustLevel(DateTime value)
            {
                return TypeConverter<BTTTrustLevel>.ConvertFrom_DateTime(value);
            }
            TypeConversionAction ITypeConverter<DateTime>.GetConversionActionTo_BTTTrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTTrustLevel> ITypeConverter<DateTime>.Enumerate_BTTTrustLevel(DateTime value)
            {
                
                yield break;
            }
            DateTime ITypeConverter<DateTime>.ConvertFrom_List_List_BTTKeyValuePair(List<List<BTTKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<BTTKeyValuePair>>' to 'DateTime'.");
                
            }
            List<List<BTTKeyValuePair>> ITypeConverter<DateTime>.ConvertTo_List_List_BTTKeyValuePair(DateTime value)
            {
                return TypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_DateTime(value);
            }
            TypeConversionAction ITypeConverter<DateTime>.GetConversionActionTo_List_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<BTTKeyValuePair>>> ITypeConverter<DateTime>.Enumerate_List_List_BTTKeyValuePair(DateTime value)
            {
                
                yield break;
            }
            DateTime ITypeConverter<DateTime>.ConvertFrom_List_BTTClaim(List<BTTClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTClaim>' to 'DateTime'.");
                
            }
            List<BTTClaim> ITypeConverter<DateTime>.ConvertTo_List_BTTClaim(DateTime value)
            {
                return TypeConverter<List<BTTClaim>>.ConvertFrom_DateTime(value);
            }
            TypeConversionAction ITypeConverter<DateTime>.GetConversionActionTo_List_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTClaim>> ITypeConverter<DateTime>.Enumerate_List_BTTClaim(DateTime value)
            {
                
                yield break;
            }
            DateTime ITypeConverter<DateTime>.ConvertFrom_BTTEncryptedClaims_nullable(BTTEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims?' to 'DateTime'.");
                
            }
            BTTEncryptedClaims? ITypeConverter<DateTime>.ConvertTo_BTTEncryptedClaims_nullable(DateTime value)
            {
                return TypeConverter<BTTEncryptedClaims?>.ConvertFrom_DateTime(value);
            }
            TypeConversionAction ITypeConverter<DateTime>.GetConversionActionTo_BTTEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims?> ITypeConverter<DateTime>.Enumerate_BTTEncryptedClaims_nullable(DateTime value)
            {
                
                yield break;
            }
            DateTime ITypeConverter<DateTime>.ConvertFrom_BTTNFE_N4K_Claims_nullable(BTTNFE_N4K_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims?' to 'DateTime'.");
                
            }
            BTTNFE_N4K_Claims? ITypeConverter<DateTime>.ConvertTo_BTTNFE_N4K_Claims_nullable(DateTime value)
            {
                return TypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_DateTime(value);
            }
            TypeConversionAction ITypeConverter<DateTime>.GetConversionActionTo_BTTNFE_N4K_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims?> ITypeConverter<DateTime>.Enumerate_BTTNFE_N4K_Claims_nullable(DateTime value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_bool(bool value)
            {
                
                return Serializer.ToString(value);
                
            }
            bool ITypeConverter<string>.ConvertTo_bool(string value)
            {
                return TypeConverter<bool>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<string>.Enumerate_bool(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_int(int value)
            {
                
                return Serializer.ToString(value);
                
            }
            int ITypeConverter<string>.ConvertTo_int(string value)
            {
                return TypeConverter<int>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_int()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int> ITypeConverter<string>.Enumerate_int(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_long(long value)
            {
                
                return Serializer.ToString(value);
                
            }
            long ITypeConverter<string>.ConvertTo_long(string value)
            {
                return TypeConverter<long>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<string>.Enumerate_long(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_DateTime(DateTime value)
            {
                
                return Serializer.ToString(value);
                
            }
            DateTime ITypeConverter<string>.ConvertTo_DateTime(string value)
            {
                return TypeConverter<DateTime>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_DateTime()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<DateTime> ITypeConverter<string>.Enumerate_DateTime(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_string(string value)
            {
                
                return (string)value;
                
            }
            string ITypeConverter<string>.ConvertTo_string(string value)
            {
                return TypeConverter<string>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<string>.Enumerate_string(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_int_Array_150(int[] value)
            {
                
                return Serializer.ToString(value);
                
            }
            int[] ITypeConverter<string>.ConvertTo_int_Array_150(string value)
            {
                return TypeConverter<int[]>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_int_Array_150()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int[]> ITypeConverter<string>.Enumerate_int_Array_150(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_List_long(List<long> value)
            {
                
                return Serializer.ToString(value);
                
            }
            List<long> ITypeConverter<string>.ConvertTo_List_long(string value)
            {
                return TypeConverter<List<long>>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_List_long()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<long>> ITypeConverter<string>.Enumerate_List_long(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_List_string(List<string> value)
            {
                
                return Serializer.ToString(value);
                
            }
            List<string> ITypeConverter<string>.ConvertTo_List_string(string value)
            {
                return TypeConverter<List<string>>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<string>.Enumerate_List_string(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_List_BTTKeyValuePair(List<BTTKeyValuePair> value)
            {
                
                return Serializer.ToString(value);
                
            }
            List<BTTKeyValuePair> ITypeConverter<string>.ConvertTo_List_BTTKeyValuePair(string value)
            {
                return TypeConverter<List<BTTKeyValuePair>>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTKeyValuePair>> ITypeConverter<string>.Enumerate_List_BTTKeyValuePair(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_BTTClaim(BTTClaim value)
            {
                
                return Serializer.ToString(value);
                
            }
            BTTClaim ITypeConverter<string>.ConvertTo_BTTClaim(string value)
            {
                return TypeConverter<BTTClaim>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_BTTClaim()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTClaim> ITypeConverter<string>.Enumerate_BTTClaim(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_BTTEncryptedClaims(BTTEncryptedClaims value)
            {
                
                return Serializer.ToString(value);
                
            }
            BTTEncryptedClaims ITypeConverter<string>.ConvertTo_BTTEncryptedClaims(string value)
            {
                return TypeConverter<BTTEncryptedClaims>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_BTTEncryptedClaims()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims> ITypeConverter<string>.Enumerate_BTTEncryptedClaims(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_BTTGenericCredential_Envelope(BTTGenericCredential_Envelope value)
            {
                
                return Serializer.ToString(value);
                
            }
            BTTGenericCredential_Envelope ITypeConverter<string>.ConvertTo_BTTGenericCredential_Envelope(string value)
            {
                return TypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_BTTGenericCredential_Envelope()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_Envelope> ITypeConverter<string>.Enumerate_BTTGenericCredential_Envelope(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_BTTGenericCredential_EnvelopeContent(BTTGenericCredential_EnvelopeContent value)
            {
                
                return Serializer.ToString(value);
                
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<string>.ConvertTo_BTTGenericCredential_EnvelopeContent(string value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_BTTGenericCredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeContent> ITypeConverter<string>.Enumerate_BTTGenericCredential_EnvelopeContent(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(BTTGenericCredential_EnvelopeSeal value)
            {
                
                return Serializer.ToString(value);
                
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<string>.ConvertTo_BTTGenericCredential_EnvelopeSeal(string value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_BTTGenericCredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeSeal> ITypeConverter<string>.Enumerate_BTTGenericCredential_EnvelopeSeal(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_BTTGenericCredential_PackingLabel(BTTGenericCredential_PackingLabel value)
            {
                
                return Serializer.ToString(value);
                
            }
            BTTGenericCredential_PackingLabel ITypeConverter<string>.ConvertTo_BTTGenericCredential_PackingLabel(string value)
            {
                return TypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_BTTGenericCredential_PackingLabel()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_PackingLabel> ITypeConverter<string>.Enumerate_BTTGenericCredential_PackingLabel(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_BTTKeyValuePair(BTTKeyValuePair value)
            {
                
                return Serializer.ToString(value);
                
            }
            BTTKeyValuePair ITypeConverter<string>.ConvertTo_BTTKeyValuePair(string value)
            {
                return TypeConverter<BTTKeyValuePair>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTKeyValuePair> ITypeConverter<string>.Enumerate_BTTKeyValuePair(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_BTTNFE_N4K_Claims(BTTNFE_N4K_Claims value)
            {
                
                return Serializer.ToString(value);
                
            }
            BTTNFE_N4K_Claims ITypeConverter<string>.ConvertTo_BTTNFE_N4K_Claims(string value)
            {
                return TypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_BTTNFE_N4K_Claims()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims> ITypeConverter<string>.Enumerate_BTTNFE_N4K_Claims(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_BTTNFE_N4K_Envelope(BTTNFE_N4K_Envelope value)
            {
                
                return Serializer.ToString(value);
                
            }
            BTTNFE_N4K_Envelope ITypeConverter<string>.ConvertTo_BTTNFE_N4K_Envelope(string value)
            {
                return TypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_BTTNFE_N4K_Envelope()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Envelope> ITypeConverter<string>.Enumerate_BTTNFE_N4K_Envelope(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(BTTNFE_N4K_EnvelopeContent value)
            {
                
                return Serializer.ToString(value);
                
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<string>.ConvertTo_BTTNFE_N4K_EnvelopeContent(string value)
            {
                return TypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_BTTNFE_N4K_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_EnvelopeContent> ITypeConverter<string>.Enumerate_BTTNFE_N4K_EnvelopeContent(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(BTTNFE_N4K_SealedEnvelope value)
            {
                
                return Serializer.ToString(value);
                
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<string>.ConvertTo_BTTNFE_N4K_SealedEnvelope(string value)
            {
                return TypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_BTTNFE_N4K_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_SealedEnvelope> ITypeConverter<string>.Enumerate_BTTNFE_N4K_SealedEnvelope(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                return Serializer.ToString(value);
                
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<string>.ConvertTo_BTTVerifiableCredential_SealedEnvelope(string value)
            {
                return TypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_BTTVerifiableCredential_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTVerifiableCredential_SealedEnvelope> ITypeConverter<string>.Enumerate_BTTVerifiableCredential_SealedEnvelope(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_BTTEncryptionFlag(BTTEncryptionFlag value)
            {
                
                return Serializer.ToString(value);
                
            }
            BTTEncryptionFlag ITypeConverter<string>.ConvertTo_BTTEncryptionFlag(string value)
            {
                return TypeConverter<BTTEncryptionFlag>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_BTTEncryptionFlag()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptionFlag> ITypeConverter<string>.Enumerate_BTTEncryptionFlag(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_BTTGenericCredentialType(BTTGenericCredentialType value)
            {
                
                return Serializer.ToString(value);
                
            }
            BTTGenericCredentialType ITypeConverter<string>.ConvertTo_BTTGenericCredentialType(string value)
            {
                return TypeConverter<BTTGenericCredentialType>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_BTTGenericCredentialType()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredentialType> ITypeConverter<string>.Enumerate_BTTGenericCredentialType(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_BTTNFEBodyPart(BTTNFEBodyPart value)
            {
                
                return Serializer.ToString(value);
                
            }
            BTTNFEBodyPart ITypeConverter<string>.ConvertTo_BTTNFEBodyPart(string value)
            {
                return TypeConverter<BTTNFEBodyPart>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_BTTNFEBodyPart()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFEBodyPart> ITypeConverter<string>.Enumerate_BTTNFEBodyPart(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_BTTTrustLevel(BTTTrustLevel value)
            {
                
                return Serializer.ToString(value);
                
            }
            BTTTrustLevel ITypeConverter<string>.ConvertTo_BTTTrustLevel(string value)
            {
                return TypeConverter<BTTTrustLevel>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_BTTTrustLevel()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTTrustLevel> ITypeConverter<string>.Enumerate_BTTTrustLevel(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_List_List_BTTKeyValuePair(List<List<BTTKeyValuePair>> value)
            {
                
                return Serializer.ToString(value);
                
            }
            List<List<BTTKeyValuePair>> ITypeConverter<string>.ConvertTo_List_List_BTTKeyValuePair(string value)
            {
                return TypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_List_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<BTTKeyValuePair>>> ITypeConverter<string>.Enumerate_List_List_BTTKeyValuePair(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_List_BTTClaim(List<BTTClaim> value)
            {
                
                return Serializer.ToString(value);
                
            }
            List<BTTClaim> ITypeConverter<string>.ConvertTo_List_BTTClaim(string value)
            {
                return TypeConverter<List<BTTClaim>>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_List_BTTClaim()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTClaim>> ITypeConverter<string>.Enumerate_List_BTTClaim(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_BTTEncryptedClaims_nullable(BTTEncryptedClaims? value)
            {
                
                return Serializer.ToString(value);
                
            }
            BTTEncryptedClaims? ITypeConverter<string>.ConvertTo_BTTEncryptedClaims_nullable(string value)
            {
                return TypeConverter<BTTEncryptedClaims?>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_BTTEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims?> ITypeConverter<string>.Enumerate_BTTEncryptedClaims_nullable(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_BTTNFE_N4K_Claims_nullable(BTTNFE_N4K_Claims? value)
            {
                
                return Serializer.ToString(value);
                
            }
            BTTNFE_N4K_Claims? ITypeConverter<string>.ConvertTo_BTTNFE_N4K_Claims_nullable(string value)
            {
                return TypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_BTTNFE_N4K_Claims_nullable()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims?> ITypeConverter<string>.Enumerate_BTTNFE_N4K_Claims_nullable(string value)
            {
                
                yield break;
            }
            int[] ITypeConverter<int[]>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'int[]'.");
                
            }
            bool ITypeConverter<int[]>.ConvertTo_bool(int[] value)
            {
                return TypeConverter<bool>.ConvertFrom_int_Array_150(value);
            }
            TypeConversionAction ITypeConverter<int[]>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<int[]>.Enumerate_bool(int[] value)
            {
                
                {
                    
                    for (int int_0 = 0; int_0 < 150; ++int_0)
                    
                    {
                        
                        yield return (TypeConverter<bool>.ConvertFrom_int(value[int_0]));
                        
                    }
                }
                
                yield break;
            }
            int[] ITypeConverter<int[]>.ConvertFrom_int(int value)
            {
                
                throw new InvalidCastException("Invalid cast from 'int' to 'int[]'.");
                
            }
            int ITypeConverter<int[]>.ConvertTo_int(int[] value)
            {
                return TypeConverter<int>.ConvertFrom_int_Array_150(value);
            }
            TypeConversionAction ITypeConverter<int[]>.GetConversionActionTo_int()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int> ITypeConverter<int[]>.Enumerate_int(int[] value)
            {
                
                {
                    
                    for (int int_0 = 0; int_0 < 150; ++int_0)
                    
                    {
                        
                        yield return (value[int_0]);
                        
                    }
                }
                
                yield break;
            }
            int[] ITypeConverter<int[]>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'int[]'.");
                
            }
            long ITypeConverter<int[]>.ConvertTo_long(int[] value)
            {
                return TypeConverter<long>.ConvertFrom_int_Array_150(value);
            }
            TypeConversionAction ITypeConverter<int[]>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<int[]>.Enumerate_long(int[] value)
            {
                
                {
                    
                    for (int int_0 = 0; int_0 < 150; ++int_0)
                    
                    {
                        
                        yield return (value[int_0]);
                        
                    }
                }
                
                yield break;
            }
            int[] ITypeConverter<int[]>.ConvertFrom_DateTime(DateTime value)
            {
                
                throw new InvalidCastException("Invalid cast from 'DateTime' to 'int[]'.");
                
            }
            DateTime ITypeConverter<int[]>.ConvertTo_DateTime(int[] value)
            {
                return TypeConverter<DateTime>.ConvertFrom_int_Array_150(value);
            }
            TypeConversionAction ITypeConverter<int[]>.GetConversionActionTo_DateTime()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<DateTime> ITypeConverter<int[]>.Enumerate_DateTime(int[] value)
            {
                
                yield break;
            }
            int[] ITypeConverter<int[]>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    int[] intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = ExternalParser.TryParse_int_Array_150(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "int[]");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<int[]>.ConvertTo_string(int[] value)
            {
                return TypeConverter<string>.ConvertFrom_int_Array_150(value);
            }
            TypeConversionAction ITypeConverter<int[]>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<int[]>.Enumerate_string(int[] value)
            {
                
                {
                    
                    for (int int_0 = 0; int_0 < 150; ++int_0)
                    
                    {
                        
                        yield return (TypeConverter<string>.ConvertFrom_int(value[int_0]));
                        
                    }
                }
                
                yield break;
            }
            int[] ITypeConverter<int[]>.ConvertFrom_int_Array_150(int[] value)
            {
                
                return (int[])value;
                
            }
            int[] ITypeConverter<int[]>.ConvertTo_int_Array_150(int[] value)
            {
                return TypeConverter<int[]>.ConvertFrom_int_Array_150(value);
            }
            TypeConversionAction ITypeConverter<int[]>.GetConversionActionTo_int_Array_150()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int[]> ITypeConverter<int[]>.Enumerate_int_Array_150(int[] value)
            {
                
                yield break;
            }
            int[] ITypeConverter<int[]>.ConvertFrom_List_long(List<long> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<long>' to 'int[]'.");
                
            }
            List<long> ITypeConverter<int[]>.ConvertTo_List_long(int[] value)
            {
                return TypeConverter<List<long>>.ConvertFrom_int_Array_150(value);
            }
            TypeConversionAction ITypeConverter<int[]>.GetConversionActionTo_List_long()
            {
                
                return TypeConversionAction.TC_ARRAYTOLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<long>> ITypeConverter<int[]>.Enumerate_List_long(int[] value)
            {
                
                {
                    
                    for (int int_0 = 0; int_0 < 150; ++int_0)
                    
                    {
                        
                        yield return (TypeConverter<List<long>>.ConvertFrom_int(value[int_0]));
                        
                    }
                }
                
                yield break;
            }
            int[] ITypeConverter<int[]>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'int[]'.");
                
            }
            List<string> ITypeConverter<int[]>.ConvertTo_List_string(int[] value)
            {
                return TypeConverter<List<string>>.ConvertFrom_int_Array_150(value);
            }
            TypeConversionAction ITypeConverter<int[]>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<int[]>.Enumerate_List_string(int[] value)
            {
                
                {
                    
                    for (int int_0 = 0; int_0 < 150; ++int_0)
                    
                    {
                        
                        yield return (TypeConverter<List<string>>.ConvertFrom_int(value[int_0]));
                        
                    }
                }
                
                yield break;
            }
            int[] ITypeConverter<int[]>.ConvertFrom_List_BTTKeyValuePair(List<BTTKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTKeyValuePair>' to 'int[]'.");
                
            }
            List<BTTKeyValuePair> ITypeConverter<int[]>.ConvertTo_List_BTTKeyValuePair(int[] value)
            {
                return TypeConverter<List<BTTKeyValuePair>>.ConvertFrom_int_Array_150(value);
            }
            TypeConversionAction ITypeConverter<int[]>.GetConversionActionTo_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTKeyValuePair>> ITypeConverter<int[]>.Enumerate_List_BTTKeyValuePair(int[] value)
            {
                
                yield break;
            }
            int[] ITypeConverter<int[]>.ConvertFrom_BTTClaim(BTTClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTClaim' to 'int[]'.");
                
            }
            BTTClaim ITypeConverter<int[]>.ConvertTo_BTTClaim(int[] value)
            {
                return TypeConverter<BTTClaim>.ConvertFrom_int_Array_150(value);
            }
            TypeConversionAction ITypeConverter<int[]>.GetConversionActionTo_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTClaim> ITypeConverter<int[]>.Enumerate_BTTClaim(int[] value)
            {
                
                yield break;
            }
            int[] ITypeConverter<int[]>.ConvertFrom_BTTEncryptedClaims(BTTEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims' to 'int[]'.");
                
            }
            BTTEncryptedClaims ITypeConverter<int[]>.ConvertTo_BTTEncryptedClaims(int[] value)
            {
                return TypeConverter<BTTEncryptedClaims>.ConvertFrom_int_Array_150(value);
            }
            TypeConversionAction ITypeConverter<int[]>.GetConversionActionTo_BTTEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims> ITypeConverter<int[]>.Enumerate_BTTEncryptedClaims(int[] value)
            {
                
                yield break;
            }
            int[] ITypeConverter<int[]>.ConvertFrom_BTTGenericCredential_Envelope(BTTGenericCredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_Envelope' to 'int[]'.");
                
            }
            BTTGenericCredential_Envelope ITypeConverter<int[]>.ConvertTo_BTTGenericCredential_Envelope(int[] value)
            {
                return TypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_int_Array_150(value);
            }
            TypeConversionAction ITypeConverter<int[]>.GetConversionActionTo_BTTGenericCredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_Envelope> ITypeConverter<int[]>.Enumerate_BTTGenericCredential_Envelope(int[] value)
            {
                
                yield break;
            }
            int[] ITypeConverter<int[]>.ConvertFrom_BTTGenericCredential_EnvelopeContent(BTTGenericCredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeContent' to 'int[]'.");
                
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<int[]>.ConvertTo_BTTGenericCredential_EnvelopeContent(int[] value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_int_Array_150(value);
            }
            TypeConversionAction ITypeConverter<int[]>.GetConversionActionTo_BTTGenericCredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeContent> ITypeConverter<int[]>.Enumerate_BTTGenericCredential_EnvelopeContent(int[] value)
            {
                
                yield break;
            }
            int[] ITypeConverter<int[]>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(BTTGenericCredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeSeal' to 'int[]'.");
                
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<int[]>.ConvertTo_BTTGenericCredential_EnvelopeSeal(int[] value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_int_Array_150(value);
            }
            TypeConversionAction ITypeConverter<int[]>.GetConversionActionTo_BTTGenericCredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeSeal> ITypeConverter<int[]>.Enumerate_BTTGenericCredential_EnvelopeSeal(int[] value)
            {
                
                yield break;
            }
            int[] ITypeConverter<int[]>.ConvertFrom_BTTGenericCredential_PackingLabel(BTTGenericCredential_PackingLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_PackingLabel' to 'int[]'.");
                
            }
            BTTGenericCredential_PackingLabel ITypeConverter<int[]>.ConvertTo_BTTGenericCredential_PackingLabel(int[] value)
            {
                return TypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_int_Array_150(value);
            }
            TypeConversionAction ITypeConverter<int[]>.GetConversionActionTo_BTTGenericCredential_PackingLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_PackingLabel> ITypeConverter<int[]>.Enumerate_BTTGenericCredential_PackingLabel(int[] value)
            {
                
                yield break;
            }
            int[] ITypeConverter<int[]>.ConvertFrom_BTTKeyValuePair(BTTKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTKeyValuePair' to 'int[]'.");
                
            }
            BTTKeyValuePair ITypeConverter<int[]>.ConvertTo_BTTKeyValuePair(int[] value)
            {
                return TypeConverter<BTTKeyValuePair>.ConvertFrom_int_Array_150(value);
            }
            TypeConversionAction ITypeConverter<int[]>.GetConversionActionTo_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTKeyValuePair> ITypeConverter<int[]>.Enumerate_BTTKeyValuePair(int[] value)
            {
                
                yield break;
            }
            int[] ITypeConverter<int[]>.ConvertFrom_BTTNFE_N4K_Claims(BTTNFE_N4K_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims' to 'int[]'.");
                
            }
            BTTNFE_N4K_Claims ITypeConverter<int[]>.ConvertTo_BTTNFE_N4K_Claims(int[] value)
            {
                return TypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_int_Array_150(value);
            }
            TypeConversionAction ITypeConverter<int[]>.GetConversionActionTo_BTTNFE_N4K_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims> ITypeConverter<int[]>.Enumerate_BTTNFE_N4K_Claims(int[] value)
            {
                
                yield break;
            }
            int[] ITypeConverter<int[]>.ConvertFrom_BTTNFE_N4K_Envelope(BTTNFE_N4K_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Envelope' to 'int[]'.");
                
            }
            BTTNFE_N4K_Envelope ITypeConverter<int[]>.ConvertTo_BTTNFE_N4K_Envelope(int[] value)
            {
                return TypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_int_Array_150(value);
            }
            TypeConversionAction ITypeConverter<int[]>.GetConversionActionTo_BTTNFE_N4K_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Envelope> ITypeConverter<int[]>.Enumerate_BTTNFE_N4K_Envelope(int[] value)
            {
                
                yield break;
            }
            int[] ITypeConverter<int[]>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(BTTNFE_N4K_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_EnvelopeContent' to 'int[]'.");
                
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<int[]>.ConvertTo_BTTNFE_N4K_EnvelopeContent(int[] value)
            {
                return TypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_int_Array_150(value);
            }
            TypeConversionAction ITypeConverter<int[]>.GetConversionActionTo_BTTNFE_N4K_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_EnvelopeContent> ITypeConverter<int[]>.Enumerate_BTTNFE_N4K_EnvelopeContent(int[] value)
            {
                
                yield break;
            }
            int[] ITypeConverter<int[]>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(BTTNFE_N4K_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_SealedEnvelope' to 'int[]'.");
                
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<int[]>.ConvertTo_BTTNFE_N4K_SealedEnvelope(int[] value)
            {
                return TypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_int_Array_150(value);
            }
            TypeConversionAction ITypeConverter<int[]>.GetConversionActionTo_BTTNFE_N4K_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_SealedEnvelope> ITypeConverter<int[]>.Enumerate_BTTNFE_N4K_SealedEnvelope(int[] value)
            {
                
                yield break;
            }
            int[] ITypeConverter<int[]>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTVerifiableCredential_SealedEnvelope' to 'int[]'.");
                
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<int[]>.ConvertTo_BTTVerifiableCredential_SealedEnvelope(int[] value)
            {
                return TypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_int_Array_150(value);
            }
            TypeConversionAction ITypeConverter<int[]>.GetConversionActionTo_BTTVerifiableCredential_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTVerifiableCredential_SealedEnvelope> ITypeConverter<int[]>.Enumerate_BTTVerifiableCredential_SealedEnvelope(int[] value)
            {
                
                yield break;
            }
            int[] ITypeConverter<int[]>.ConvertFrom_BTTEncryptionFlag(BTTEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptionFlag' to 'int[]'.");
                
            }
            BTTEncryptionFlag ITypeConverter<int[]>.ConvertTo_BTTEncryptionFlag(int[] value)
            {
                return TypeConverter<BTTEncryptionFlag>.ConvertFrom_int_Array_150(value);
            }
            TypeConversionAction ITypeConverter<int[]>.GetConversionActionTo_BTTEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptionFlag> ITypeConverter<int[]>.Enumerate_BTTEncryptionFlag(int[] value)
            {
                
                yield break;
            }
            int[] ITypeConverter<int[]>.ConvertFrom_BTTGenericCredentialType(BTTGenericCredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredentialType' to 'int[]'.");
                
            }
            BTTGenericCredentialType ITypeConverter<int[]>.ConvertTo_BTTGenericCredentialType(int[] value)
            {
                return TypeConverter<BTTGenericCredentialType>.ConvertFrom_int_Array_150(value);
            }
            TypeConversionAction ITypeConverter<int[]>.GetConversionActionTo_BTTGenericCredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredentialType> ITypeConverter<int[]>.Enumerate_BTTGenericCredentialType(int[] value)
            {
                
                yield break;
            }
            int[] ITypeConverter<int[]>.ConvertFrom_BTTNFEBodyPart(BTTNFEBodyPart value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFEBodyPart' to 'int[]'.");
                
            }
            BTTNFEBodyPart ITypeConverter<int[]>.ConvertTo_BTTNFEBodyPart(int[] value)
            {
                return TypeConverter<BTTNFEBodyPart>.ConvertFrom_int_Array_150(value);
            }
            TypeConversionAction ITypeConverter<int[]>.GetConversionActionTo_BTTNFEBodyPart()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFEBodyPart> ITypeConverter<int[]>.Enumerate_BTTNFEBodyPart(int[] value)
            {
                
                yield break;
            }
            int[] ITypeConverter<int[]>.ConvertFrom_BTTTrustLevel(BTTTrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTTrustLevel' to 'int[]'.");
                
            }
            BTTTrustLevel ITypeConverter<int[]>.ConvertTo_BTTTrustLevel(int[] value)
            {
                return TypeConverter<BTTTrustLevel>.ConvertFrom_int_Array_150(value);
            }
            TypeConversionAction ITypeConverter<int[]>.GetConversionActionTo_BTTTrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTTrustLevel> ITypeConverter<int[]>.Enumerate_BTTTrustLevel(int[] value)
            {
                
                yield break;
            }
            int[] ITypeConverter<int[]>.ConvertFrom_List_List_BTTKeyValuePair(List<List<BTTKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<BTTKeyValuePair>>' to 'int[]'.");
                
            }
            List<List<BTTKeyValuePair>> ITypeConverter<int[]>.ConvertTo_List_List_BTTKeyValuePair(int[] value)
            {
                return TypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_int_Array_150(value);
            }
            TypeConversionAction ITypeConverter<int[]>.GetConversionActionTo_List_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<BTTKeyValuePair>>> ITypeConverter<int[]>.Enumerate_List_List_BTTKeyValuePair(int[] value)
            {
                
                yield break;
            }
            int[] ITypeConverter<int[]>.ConvertFrom_List_BTTClaim(List<BTTClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTClaim>' to 'int[]'.");
                
            }
            List<BTTClaim> ITypeConverter<int[]>.ConvertTo_List_BTTClaim(int[] value)
            {
                return TypeConverter<List<BTTClaim>>.ConvertFrom_int_Array_150(value);
            }
            TypeConversionAction ITypeConverter<int[]>.GetConversionActionTo_List_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTClaim>> ITypeConverter<int[]>.Enumerate_List_BTTClaim(int[] value)
            {
                
                yield break;
            }
            int[] ITypeConverter<int[]>.ConvertFrom_BTTEncryptedClaims_nullable(BTTEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims?' to 'int[]'.");
                
            }
            BTTEncryptedClaims? ITypeConverter<int[]>.ConvertTo_BTTEncryptedClaims_nullable(int[] value)
            {
                return TypeConverter<BTTEncryptedClaims?>.ConvertFrom_int_Array_150(value);
            }
            TypeConversionAction ITypeConverter<int[]>.GetConversionActionTo_BTTEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims?> ITypeConverter<int[]>.Enumerate_BTTEncryptedClaims_nullable(int[] value)
            {
                
                yield break;
            }
            int[] ITypeConverter<int[]>.ConvertFrom_BTTNFE_N4K_Claims_nullable(BTTNFE_N4K_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims?' to 'int[]'.");
                
            }
            BTTNFE_N4K_Claims? ITypeConverter<int[]>.ConvertTo_BTTNFE_N4K_Claims_nullable(int[] value)
            {
                return TypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_int_Array_150(value);
            }
            TypeConversionAction ITypeConverter<int[]>.GetConversionActionTo_BTTNFE_N4K_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims?> ITypeConverter<int[]>.Enumerate_BTTNFE_N4K_Claims_nullable(int[] value)
            {
                
                yield break;
            }
            List<long> ITypeConverter<List<long>>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'List<long>'.");
                
            }
            bool ITypeConverter<List<long>>.ConvertTo_bool(List<long> value)
            {
                return TypeConverter<bool>.ConvertFrom_List_long(value);
            }
            TypeConversionAction ITypeConverter<List<long>>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<List<long>>.Enumerate_bool(List<long> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<bool>.ConvertFrom_long(element);
                
                yield break;
            }
            List<long> ITypeConverter<List<long>>.ConvertFrom_int(int value)
            {
                
                {
                    List<long> intermediate_result = new List<long>();
                    intermediate_result.Add(TypeConverter<long>.ConvertFrom_int(value));
                    return intermediate_result;
                }
                
            }
            int ITypeConverter<List<long>>.ConvertTo_int(List<long> value)
            {
                return TypeConverter<int>.ConvertFrom_List_long(value);
            }
            TypeConversionAction ITypeConverter<List<long>>.GetConversionActionTo_int()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int> ITypeConverter<List<long>>.Enumerate_int(List<long> value)
            {
                
                yield break;
            }
            List<long> ITypeConverter<List<long>>.ConvertFrom_long(long value)
            {
                
                {
                    List<long> intermediate_result = new List<long>();
                    intermediate_result.Add(TypeConverter<long>.ConvertFrom_long(value));
                    return intermediate_result;
                }
                
            }
            long ITypeConverter<List<long>>.ConvertTo_long(List<long> value)
            {
                return TypeConverter<long>.ConvertFrom_List_long(value);
            }
            TypeConversionAction ITypeConverter<List<long>>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<List<long>>.Enumerate_long(List<long> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<long>.ConvertFrom_long(element);
                
                yield break;
            }
            List<long> ITypeConverter<List<long>>.ConvertFrom_DateTime(DateTime value)
            {
                
                throw new InvalidCastException("Invalid cast from 'DateTime' to 'List<long>'.");
                
            }
            DateTime ITypeConverter<List<long>>.ConvertTo_DateTime(List<long> value)
            {
                return TypeConverter<DateTime>.ConvertFrom_List_long(value);
            }
            TypeConversionAction ITypeConverter<List<long>>.GetConversionActionTo_DateTime()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<DateTime> ITypeConverter<List<long>>.Enumerate_DateTime(List<long> value)
            {
                
                yield break;
            }
            List<long> ITypeConverter<List<long>>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    List<long> intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = ExternalParser.TryParse_List_long(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        try
                        {
                            long element = TypeConverter<long>.ConvertFrom_string(value);
                            intermediate_result = new List<long>();
                            intermediate_result.Add(element);
                        }
                        catch
                        {
                            throw new ArgumentException("Cannot parse \"" + value + "\" into either 'List<long>' or 'long'.");
                        }
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<List<long>>.ConvertTo_string(List<long> value)
            {
                return TypeConverter<string>.ConvertFrom_List_long(value);
            }
            TypeConversionAction ITypeConverter<List<long>>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<List<long>>.Enumerate_string(List<long> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<string>.ConvertFrom_long(element);
                
                yield break;
            }
            List<long> ITypeConverter<List<long>>.ConvertFrom_int_Array_150(int[] value)
            {
                
                return TypeConverter<int[]>.Enumerate_long(value).ToList();
                
            }
            int[] ITypeConverter<List<long>>.ConvertTo_int_Array_150(List<long> value)
            {
                return TypeConverter<int[]>.ConvertFrom_List_long(value);
            }
            TypeConversionAction ITypeConverter<List<long>>.GetConversionActionTo_int_Array_150()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int[]> ITypeConverter<List<long>>.Enumerate_int_Array_150(List<long> value)
            {
                
                yield break;
            }
            List<long> ITypeConverter<List<long>>.ConvertFrom_List_long(List<long> value)
            {
                
                return (List<long>)value;
                
            }
            List<long> ITypeConverter<List<long>>.ConvertTo_List_long(List<long> value)
            {
                return TypeConverter<List<long>>.ConvertFrom_List_long(value);
            }
            TypeConversionAction ITypeConverter<List<long>>.GetConversionActionTo_List_long()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<long>> ITypeConverter<List<long>>.Enumerate_List_long(List<long> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<long>>.ConvertFrom_long(element);
                
                yield break;
            }
            List<long> ITypeConverter<List<long>>.ConvertFrom_List_string(List<string> value)
            {
                
                {
                    List<long> intermediate_result = new List<long>();
                    foreach (var element in value)
                    {
                        intermediate_result.Add(TypeConverter<long>.ConvertFrom_string(element));
                    }
                    return intermediate_result;
                }
                
            }
            List<string> ITypeConverter<List<long>>.ConvertTo_List_string(List<long> value)
            {
                return TypeConverter<List<string>>.ConvertFrom_List_long(value);
            }
            TypeConversionAction ITypeConverter<List<long>>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_CONVERTLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<List<long>>.Enumerate_List_string(List<long> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<string>>.ConvertFrom_long(element);
                
                yield break;
            }
            List<long> ITypeConverter<List<long>>.ConvertFrom_List_BTTKeyValuePair(List<BTTKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTKeyValuePair>' to 'List<long>'.");
                
            }
            List<BTTKeyValuePair> ITypeConverter<List<long>>.ConvertTo_List_BTTKeyValuePair(List<long> value)
            {
                return TypeConverter<List<BTTKeyValuePair>>.ConvertFrom_List_long(value);
            }
            TypeConversionAction ITypeConverter<List<long>>.GetConversionActionTo_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTKeyValuePair>> ITypeConverter<List<long>>.Enumerate_List_BTTKeyValuePair(List<long> value)
            {
                
                yield break;
            }
            List<long> ITypeConverter<List<long>>.ConvertFrom_BTTClaim(BTTClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTClaim' to 'List<long>'.");
                
            }
            BTTClaim ITypeConverter<List<long>>.ConvertTo_BTTClaim(List<long> value)
            {
                return TypeConverter<BTTClaim>.ConvertFrom_List_long(value);
            }
            TypeConversionAction ITypeConverter<List<long>>.GetConversionActionTo_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTClaim> ITypeConverter<List<long>>.Enumerate_BTTClaim(List<long> value)
            {
                
                yield break;
            }
            List<long> ITypeConverter<List<long>>.ConvertFrom_BTTEncryptedClaims(BTTEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims' to 'List<long>'.");
                
            }
            BTTEncryptedClaims ITypeConverter<List<long>>.ConvertTo_BTTEncryptedClaims(List<long> value)
            {
                return TypeConverter<BTTEncryptedClaims>.ConvertFrom_List_long(value);
            }
            TypeConversionAction ITypeConverter<List<long>>.GetConversionActionTo_BTTEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims> ITypeConverter<List<long>>.Enumerate_BTTEncryptedClaims(List<long> value)
            {
                
                yield break;
            }
            List<long> ITypeConverter<List<long>>.ConvertFrom_BTTGenericCredential_Envelope(BTTGenericCredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_Envelope' to 'List<long>'.");
                
            }
            BTTGenericCredential_Envelope ITypeConverter<List<long>>.ConvertTo_BTTGenericCredential_Envelope(List<long> value)
            {
                return TypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_List_long(value);
            }
            TypeConversionAction ITypeConverter<List<long>>.GetConversionActionTo_BTTGenericCredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_Envelope> ITypeConverter<List<long>>.Enumerate_BTTGenericCredential_Envelope(List<long> value)
            {
                
                yield break;
            }
            List<long> ITypeConverter<List<long>>.ConvertFrom_BTTGenericCredential_EnvelopeContent(BTTGenericCredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeContent' to 'List<long>'.");
                
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<List<long>>.ConvertTo_BTTGenericCredential_EnvelopeContent(List<long> value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_List_long(value);
            }
            TypeConversionAction ITypeConverter<List<long>>.GetConversionActionTo_BTTGenericCredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeContent> ITypeConverter<List<long>>.Enumerate_BTTGenericCredential_EnvelopeContent(List<long> value)
            {
                
                yield break;
            }
            List<long> ITypeConverter<List<long>>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(BTTGenericCredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeSeal' to 'List<long>'.");
                
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<List<long>>.ConvertTo_BTTGenericCredential_EnvelopeSeal(List<long> value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_List_long(value);
            }
            TypeConversionAction ITypeConverter<List<long>>.GetConversionActionTo_BTTGenericCredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeSeal> ITypeConverter<List<long>>.Enumerate_BTTGenericCredential_EnvelopeSeal(List<long> value)
            {
                
                yield break;
            }
            List<long> ITypeConverter<List<long>>.ConvertFrom_BTTGenericCredential_PackingLabel(BTTGenericCredential_PackingLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_PackingLabel' to 'List<long>'.");
                
            }
            BTTGenericCredential_PackingLabel ITypeConverter<List<long>>.ConvertTo_BTTGenericCredential_PackingLabel(List<long> value)
            {
                return TypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_List_long(value);
            }
            TypeConversionAction ITypeConverter<List<long>>.GetConversionActionTo_BTTGenericCredential_PackingLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_PackingLabel> ITypeConverter<List<long>>.Enumerate_BTTGenericCredential_PackingLabel(List<long> value)
            {
                
                yield break;
            }
            List<long> ITypeConverter<List<long>>.ConvertFrom_BTTKeyValuePair(BTTKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTKeyValuePair' to 'List<long>'.");
                
            }
            BTTKeyValuePair ITypeConverter<List<long>>.ConvertTo_BTTKeyValuePair(List<long> value)
            {
                return TypeConverter<BTTKeyValuePair>.ConvertFrom_List_long(value);
            }
            TypeConversionAction ITypeConverter<List<long>>.GetConversionActionTo_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTKeyValuePair> ITypeConverter<List<long>>.Enumerate_BTTKeyValuePair(List<long> value)
            {
                
                yield break;
            }
            List<long> ITypeConverter<List<long>>.ConvertFrom_BTTNFE_N4K_Claims(BTTNFE_N4K_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims' to 'List<long>'.");
                
            }
            BTTNFE_N4K_Claims ITypeConverter<List<long>>.ConvertTo_BTTNFE_N4K_Claims(List<long> value)
            {
                return TypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_List_long(value);
            }
            TypeConversionAction ITypeConverter<List<long>>.GetConversionActionTo_BTTNFE_N4K_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims> ITypeConverter<List<long>>.Enumerate_BTTNFE_N4K_Claims(List<long> value)
            {
                
                yield break;
            }
            List<long> ITypeConverter<List<long>>.ConvertFrom_BTTNFE_N4K_Envelope(BTTNFE_N4K_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Envelope' to 'List<long>'.");
                
            }
            BTTNFE_N4K_Envelope ITypeConverter<List<long>>.ConvertTo_BTTNFE_N4K_Envelope(List<long> value)
            {
                return TypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_List_long(value);
            }
            TypeConversionAction ITypeConverter<List<long>>.GetConversionActionTo_BTTNFE_N4K_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Envelope> ITypeConverter<List<long>>.Enumerate_BTTNFE_N4K_Envelope(List<long> value)
            {
                
                yield break;
            }
            List<long> ITypeConverter<List<long>>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(BTTNFE_N4K_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_EnvelopeContent' to 'List<long>'.");
                
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<List<long>>.ConvertTo_BTTNFE_N4K_EnvelopeContent(List<long> value)
            {
                return TypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_List_long(value);
            }
            TypeConversionAction ITypeConverter<List<long>>.GetConversionActionTo_BTTNFE_N4K_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_EnvelopeContent> ITypeConverter<List<long>>.Enumerate_BTTNFE_N4K_EnvelopeContent(List<long> value)
            {
                
                yield break;
            }
            List<long> ITypeConverter<List<long>>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(BTTNFE_N4K_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_SealedEnvelope' to 'List<long>'.");
                
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<List<long>>.ConvertTo_BTTNFE_N4K_SealedEnvelope(List<long> value)
            {
                return TypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_List_long(value);
            }
            TypeConversionAction ITypeConverter<List<long>>.GetConversionActionTo_BTTNFE_N4K_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_SealedEnvelope> ITypeConverter<List<long>>.Enumerate_BTTNFE_N4K_SealedEnvelope(List<long> value)
            {
                
                yield break;
            }
            List<long> ITypeConverter<List<long>>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTVerifiableCredential_SealedEnvelope' to 'List<long>'.");
                
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<List<long>>.ConvertTo_BTTVerifiableCredential_SealedEnvelope(List<long> value)
            {
                return TypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_List_long(value);
            }
            TypeConversionAction ITypeConverter<List<long>>.GetConversionActionTo_BTTVerifiableCredential_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTVerifiableCredential_SealedEnvelope> ITypeConverter<List<long>>.Enumerate_BTTVerifiableCredential_SealedEnvelope(List<long> value)
            {
                
                yield break;
            }
            List<long> ITypeConverter<List<long>>.ConvertFrom_BTTEncryptionFlag(BTTEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptionFlag' to 'List<long>'.");
                
            }
            BTTEncryptionFlag ITypeConverter<List<long>>.ConvertTo_BTTEncryptionFlag(List<long> value)
            {
                return TypeConverter<BTTEncryptionFlag>.ConvertFrom_List_long(value);
            }
            TypeConversionAction ITypeConverter<List<long>>.GetConversionActionTo_BTTEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptionFlag> ITypeConverter<List<long>>.Enumerate_BTTEncryptionFlag(List<long> value)
            {
                
                yield break;
            }
            List<long> ITypeConverter<List<long>>.ConvertFrom_BTTGenericCredentialType(BTTGenericCredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredentialType' to 'List<long>'.");
                
            }
            BTTGenericCredentialType ITypeConverter<List<long>>.ConvertTo_BTTGenericCredentialType(List<long> value)
            {
                return TypeConverter<BTTGenericCredentialType>.ConvertFrom_List_long(value);
            }
            TypeConversionAction ITypeConverter<List<long>>.GetConversionActionTo_BTTGenericCredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredentialType> ITypeConverter<List<long>>.Enumerate_BTTGenericCredentialType(List<long> value)
            {
                
                yield break;
            }
            List<long> ITypeConverter<List<long>>.ConvertFrom_BTTNFEBodyPart(BTTNFEBodyPart value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFEBodyPart' to 'List<long>'.");
                
            }
            BTTNFEBodyPart ITypeConverter<List<long>>.ConvertTo_BTTNFEBodyPart(List<long> value)
            {
                return TypeConverter<BTTNFEBodyPart>.ConvertFrom_List_long(value);
            }
            TypeConversionAction ITypeConverter<List<long>>.GetConversionActionTo_BTTNFEBodyPart()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFEBodyPart> ITypeConverter<List<long>>.Enumerate_BTTNFEBodyPart(List<long> value)
            {
                
                yield break;
            }
            List<long> ITypeConverter<List<long>>.ConvertFrom_BTTTrustLevel(BTTTrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTTrustLevel' to 'List<long>'.");
                
            }
            BTTTrustLevel ITypeConverter<List<long>>.ConvertTo_BTTTrustLevel(List<long> value)
            {
                return TypeConverter<BTTTrustLevel>.ConvertFrom_List_long(value);
            }
            TypeConversionAction ITypeConverter<List<long>>.GetConversionActionTo_BTTTrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTTrustLevel> ITypeConverter<List<long>>.Enumerate_BTTTrustLevel(List<long> value)
            {
                
                yield break;
            }
            List<long> ITypeConverter<List<long>>.ConvertFrom_List_List_BTTKeyValuePair(List<List<BTTKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<BTTKeyValuePair>>' to 'List<long>'.");
                
            }
            List<List<BTTKeyValuePair>> ITypeConverter<List<long>>.ConvertTo_List_List_BTTKeyValuePair(List<long> value)
            {
                return TypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_List_long(value);
            }
            TypeConversionAction ITypeConverter<List<long>>.GetConversionActionTo_List_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<BTTKeyValuePair>>> ITypeConverter<List<long>>.Enumerate_List_List_BTTKeyValuePair(List<long> value)
            {
                
                yield break;
            }
            List<long> ITypeConverter<List<long>>.ConvertFrom_List_BTTClaim(List<BTTClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTClaim>' to 'List<long>'.");
                
            }
            List<BTTClaim> ITypeConverter<List<long>>.ConvertTo_List_BTTClaim(List<long> value)
            {
                return TypeConverter<List<BTTClaim>>.ConvertFrom_List_long(value);
            }
            TypeConversionAction ITypeConverter<List<long>>.GetConversionActionTo_List_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTClaim>> ITypeConverter<List<long>>.Enumerate_List_BTTClaim(List<long> value)
            {
                
                yield break;
            }
            List<long> ITypeConverter<List<long>>.ConvertFrom_BTTEncryptedClaims_nullable(BTTEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims?' to 'List<long>'.");
                
            }
            BTTEncryptedClaims? ITypeConverter<List<long>>.ConvertTo_BTTEncryptedClaims_nullable(List<long> value)
            {
                return TypeConverter<BTTEncryptedClaims?>.ConvertFrom_List_long(value);
            }
            TypeConversionAction ITypeConverter<List<long>>.GetConversionActionTo_BTTEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims?> ITypeConverter<List<long>>.Enumerate_BTTEncryptedClaims_nullable(List<long> value)
            {
                
                yield break;
            }
            List<long> ITypeConverter<List<long>>.ConvertFrom_BTTNFE_N4K_Claims_nullable(BTTNFE_N4K_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims?' to 'List<long>'.");
                
            }
            BTTNFE_N4K_Claims? ITypeConverter<List<long>>.ConvertTo_BTTNFE_N4K_Claims_nullable(List<long> value)
            {
                return TypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_List_long(value);
            }
            TypeConversionAction ITypeConverter<List<long>>.GetConversionActionTo_BTTNFE_N4K_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims?> ITypeConverter<List<long>>.Enumerate_BTTNFE_N4K_Claims_nullable(List<long> value)
            {
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_bool(bool value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_bool(value));
                    return intermediate_result;
                }
                
            }
            bool ITypeConverter<List<string>>.ConvertTo_bool(List<string> value)
            {
                return TypeConverter<bool>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<List<string>>.Enumerate_bool(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<bool>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_int(int value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_int(value));
                    return intermediate_result;
                }
                
            }
            int ITypeConverter<List<string>>.ConvertTo_int(List<string> value)
            {
                return TypeConverter<int>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_int()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int> ITypeConverter<List<string>>.Enumerate_int(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<int>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_long(long value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_long(value));
                    return intermediate_result;
                }
                
            }
            long ITypeConverter<List<string>>.ConvertTo_long(List<string> value)
            {
                return TypeConverter<long>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<List<string>>.Enumerate_long(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<long>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_DateTime(DateTime value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_DateTime(value));
                    return intermediate_result;
                }
                
            }
            DateTime ITypeConverter<List<string>>.ConvertTo_DateTime(List<string> value)
            {
                return TypeConverter<DateTime>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_DateTime()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<DateTime> ITypeConverter<List<string>>.Enumerate_DateTime(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<DateTime>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    List<string> intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = ExternalParser.TryParse_List_string(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        try
                        {
                            string element = TypeConverter<string>.ConvertFrom_string(value);
                            intermediate_result = new List<string>();
                            intermediate_result.Add(element);
                        }
                        catch
                        {
                            throw new ArgumentException("Cannot parse \"" + value + "\" into either 'List<string>' or 'string'.");
                        }
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<List<string>>.ConvertTo_string(List<string> value)
            {
                return TypeConverter<string>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<List<string>>.Enumerate_string(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<string>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_int_Array_150(int[] value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_int_Array_150(value));
                    return intermediate_result;
                }
                
            }
            int[] ITypeConverter<List<string>>.ConvertTo_int_Array_150(List<string> value)
            {
                return TypeConverter<int[]>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_int_Array_150()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int[]> ITypeConverter<List<string>>.Enumerate_int_Array_150(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<int[]>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_List_long(List<long> value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    foreach (var element in value)
                    {
                        intermediate_result.Add(TypeConverter<string>.ConvertFrom_long(element));
                    }
                    return intermediate_result;
                }
                
            }
            List<long> ITypeConverter<List<string>>.ConvertTo_List_long(List<string> value)
            {
                return TypeConverter<List<long>>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_List_long()
            {
                
                return TypeConversionAction.TC_CONVERTLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<long>> ITypeConverter<List<string>>.Enumerate_List_long(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<long>>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_List_string(List<string> value)
            {
                
                return (List<string>)value;
                
            }
            List<string> ITypeConverter<List<string>>.ConvertTo_List_string(List<string> value)
            {
                return TypeConverter<List<string>>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<List<string>>.Enumerate_List_string(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<string>>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_List_BTTKeyValuePair(List<BTTKeyValuePair> value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    foreach (var element in value)
                    {
                        intermediate_result.Add(TypeConverter<string>.ConvertFrom_BTTKeyValuePair(element));
                    }
                    return intermediate_result;
                }
                
            }
            List<BTTKeyValuePair> ITypeConverter<List<string>>.ConvertTo_List_BTTKeyValuePair(List<string> value)
            {
                return TypeConverter<List<BTTKeyValuePair>>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_CONVERTLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTKeyValuePair>> ITypeConverter<List<string>>.Enumerate_List_BTTKeyValuePair(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<BTTKeyValuePair>>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_BTTClaim(BTTClaim value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_BTTClaim(value));
                    return intermediate_result;
                }
                
            }
            BTTClaim ITypeConverter<List<string>>.ConvertTo_BTTClaim(List<string> value)
            {
                return TypeConverter<BTTClaim>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTClaim> ITypeConverter<List<string>>.Enumerate_BTTClaim(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<BTTClaim>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_BTTEncryptedClaims(BTTEncryptedClaims value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_BTTEncryptedClaims(value));
                    return intermediate_result;
                }
                
            }
            BTTEncryptedClaims ITypeConverter<List<string>>.ConvertTo_BTTEncryptedClaims(List<string> value)
            {
                return TypeConverter<BTTEncryptedClaims>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_BTTEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims> ITypeConverter<List<string>>.Enumerate_BTTEncryptedClaims(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<BTTEncryptedClaims>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_BTTGenericCredential_Envelope(BTTGenericCredential_Envelope value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_BTTGenericCredential_Envelope(value));
                    return intermediate_result;
                }
                
            }
            BTTGenericCredential_Envelope ITypeConverter<List<string>>.ConvertTo_BTTGenericCredential_Envelope(List<string> value)
            {
                return TypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_BTTGenericCredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_Envelope> ITypeConverter<List<string>>.Enumerate_BTTGenericCredential_Envelope(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_BTTGenericCredential_EnvelopeContent(BTTGenericCredential_EnvelopeContent value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_BTTGenericCredential_EnvelopeContent(value));
                    return intermediate_result;
                }
                
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<List<string>>.ConvertTo_BTTGenericCredential_EnvelopeContent(List<string> value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_BTTGenericCredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeContent> ITypeConverter<List<string>>.Enumerate_BTTGenericCredential_EnvelopeContent(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(BTTGenericCredential_EnvelopeSeal value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(value));
                    return intermediate_result;
                }
                
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<List<string>>.ConvertTo_BTTGenericCredential_EnvelopeSeal(List<string> value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_BTTGenericCredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeSeal> ITypeConverter<List<string>>.Enumerate_BTTGenericCredential_EnvelopeSeal(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_BTTGenericCredential_PackingLabel(BTTGenericCredential_PackingLabel value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_BTTGenericCredential_PackingLabel(value));
                    return intermediate_result;
                }
                
            }
            BTTGenericCredential_PackingLabel ITypeConverter<List<string>>.ConvertTo_BTTGenericCredential_PackingLabel(List<string> value)
            {
                return TypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_BTTGenericCredential_PackingLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_PackingLabel> ITypeConverter<List<string>>.Enumerate_BTTGenericCredential_PackingLabel(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_BTTKeyValuePair(BTTKeyValuePair value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_BTTKeyValuePair(value));
                    return intermediate_result;
                }
                
            }
            BTTKeyValuePair ITypeConverter<List<string>>.ConvertTo_BTTKeyValuePair(List<string> value)
            {
                return TypeConverter<BTTKeyValuePair>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTKeyValuePair> ITypeConverter<List<string>>.Enumerate_BTTKeyValuePair(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<BTTKeyValuePair>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_BTTNFE_N4K_Claims(BTTNFE_N4K_Claims value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_BTTNFE_N4K_Claims(value));
                    return intermediate_result;
                }
                
            }
            BTTNFE_N4K_Claims ITypeConverter<List<string>>.ConvertTo_BTTNFE_N4K_Claims(List<string> value)
            {
                return TypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_BTTNFE_N4K_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims> ITypeConverter<List<string>>.Enumerate_BTTNFE_N4K_Claims(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_BTTNFE_N4K_Envelope(BTTNFE_N4K_Envelope value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_BTTNFE_N4K_Envelope(value));
                    return intermediate_result;
                }
                
            }
            BTTNFE_N4K_Envelope ITypeConverter<List<string>>.ConvertTo_BTTNFE_N4K_Envelope(List<string> value)
            {
                return TypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_BTTNFE_N4K_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Envelope> ITypeConverter<List<string>>.Enumerate_BTTNFE_N4K_Envelope(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(BTTNFE_N4K_EnvelopeContent value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(value));
                    return intermediate_result;
                }
                
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<List<string>>.ConvertTo_BTTNFE_N4K_EnvelopeContent(List<string> value)
            {
                return TypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_BTTNFE_N4K_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_EnvelopeContent> ITypeConverter<List<string>>.Enumerate_BTTNFE_N4K_EnvelopeContent(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(BTTNFE_N4K_SealedEnvelope value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(value));
                    return intermediate_result;
                }
                
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<List<string>>.ConvertTo_BTTNFE_N4K_SealedEnvelope(List<string> value)
            {
                return TypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_BTTNFE_N4K_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_SealedEnvelope> ITypeConverter<List<string>>.Enumerate_BTTNFE_N4K_SealedEnvelope(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(value));
                    return intermediate_result;
                }
                
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<List<string>>.ConvertTo_BTTVerifiableCredential_SealedEnvelope(List<string> value)
            {
                return TypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_BTTVerifiableCredential_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTVerifiableCredential_SealedEnvelope> ITypeConverter<List<string>>.Enumerate_BTTVerifiableCredential_SealedEnvelope(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_BTTEncryptionFlag(BTTEncryptionFlag value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_BTTEncryptionFlag(value));
                    return intermediate_result;
                }
                
            }
            BTTEncryptionFlag ITypeConverter<List<string>>.ConvertTo_BTTEncryptionFlag(List<string> value)
            {
                return TypeConverter<BTTEncryptionFlag>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_BTTEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptionFlag> ITypeConverter<List<string>>.Enumerate_BTTEncryptionFlag(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<BTTEncryptionFlag>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_BTTGenericCredentialType(BTTGenericCredentialType value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_BTTGenericCredentialType(value));
                    return intermediate_result;
                }
                
            }
            BTTGenericCredentialType ITypeConverter<List<string>>.ConvertTo_BTTGenericCredentialType(List<string> value)
            {
                return TypeConverter<BTTGenericCredentialType>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_BTTGenericCredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredentialType> ITypeConverter<List<string>>.Enumerate_BTTGenericCredentialType(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<BTTGenericCredentialType>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_BTTNFEBodyPart(BTTNFEBodyPart value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_BTTNFEBodyPart(value));
                    return intermediate_result;
                }
                
            }
            BTTNFEBodyPart ITypeConverter<List<string>>.ConvertTo_BTTNFEBodyPart(List<string> value)
            {
                return TypeConverter<BTTNFEBodyPart>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_BTTNFEBodyPart()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFEBodyPart> ITypeConverter<List<string>>.Enumerate_BTTNFEBodyPart(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<BTTNFEBodyPart>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_BTTTrustLevel(BTTTrustLevel value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_BTTTrustLevel(value));
                    return intermediate_result;
                }
                
            }
            BTTTrustLevel ITypeConverter<List<string>>.ConvertTo_BTTTrustLevel(List<string> value)
            {
                return TypeConverter<BTTTrustLevel>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_BTTTrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTTrustLevel> ITypeConverter<List<string>>.Enumerate_BTTTrustLevel(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<BTTTrustLevel>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_List_List_BTTKeyValuePair(List<List<BTTKeyValuePair>> value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    foreach (var element in value)
                    {
                        intermediate_result.Add(TypeConverter<string>.ConvertFrom_List_BTTKeyValuePair(element));
                    }
                    return intermediate_result;
                }
                
            }
            List<List<BTTKeyValuePair>> ITypeConverter<List<string>>.ConvertTo_List_List_BTTKeyValuePair(List<string> value)
            {
                return TypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_List_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_CONVERTLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<BTTKeyValuePair>>> ITypeConverter<List<string>>.Enumerate_List_List_BTTKeyValuePair(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_List_BTTClaim(List<BTTClaim> value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    foreach (var element in value)
                    {
                        intermediate_result.Add(TypeConverter<string>.ConvertFrom_BTTClaim(element));
                    }
                    return intermediate_result;
                }
                
            }
            List<BTTClaim> ITypeConverter<List<string>>.ConvertTo_List_BTTClaim(List<string> value)
            {
                return TypeConverter<List<BTTClaim>>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_List_BTTClaim()
            {
                
                return TypeConversionAction.TC_CONVERTLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTClaim>> ITypeConverter<List<string>>.Enumerate_List_BTTClaim(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<BTTClaim>>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_BTTEncryptedClaims_nullable(BTTEncryptedClaims? value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_BTTEncryptedClaims_nullable(value));
                    return intermediate_result;
                }
                
            }
            BTTEncryptedClaims? ITypeConverter<List<string>>.ConvertTo_BTTEncryptedClaims_nullable(List<string> value)
            {
                return TypeConverter<BTTEncryptedClaims?>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_BTTEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims?> ITypeConverter<List<string>>.Enumerate_BTTEncryptedClaims_nullable(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<BTTEncryptedClaims?>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_BTTNFE_N4K_Claims_nullable(BTTNFE_N4K_Claims? value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_BTTNFE_N4K_Claims_nullable(value));
                    return intermediate_result;
                }
                
            }
            BTTNFE_N4K_Claims? ITypeConverter<List<string>>.ConvertTo_BTTNFE_N4K_Claims_nullable(List<string> value)
            {
                return TypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_BTTNFE_N4K_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims?> ITypeConverter<List<string>>.Enumerate_BTTNFE_N4K_Claims_nullable(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_string(element);
                
                yield break;
            }
            List<BTTKeyValuePair> ITypeConverter<List<BTTKeyValuePair>>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'List<BTTKeyValuePair>'.");
                
            }
            bool ITypeConverter<List<BTTKeyValuePair>>.ConvertTo_bool(List<BTTKeyValuePair> value)
            {
                return TypeConverter<bool>.ConvertFrom_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<BTTKeyValuePair>>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<List<BTTKeyValuePair>>.Enumerate_bool(List<BTTKeyValuePair> value)
            {
                
                yield break;
            }
            List<BTTKeyValuePair> ITypeConverter<List<BTTKeyValuePair>>.ConvertFrom_int(int value)
            {
                
                throw new InvalidCastException("Invalid cast from 'int' to 'List<BTTKeyValuePair>'.");
                
            }
            int ITypeConverter<List<BTTKeyValuePair>>.ConvertTo_int(List<BTTKeyValuePair> value)
            {
                return TypeConverter<int>.ConvertFrom_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<BTTKeyValuePair>>.GetConversionActionTo_int()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int> ITypeConverter<List<BTTKeyValuePair>>.Enumerate_int(List<BTTKeyValuePair> value)
            {
                
                yield break;
            }
            List<BTTKeyValuePair> ITypeConverter<List<BTTKeyValuePair>>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'List<BTTKeyValuePair>'.");
                
            }
            long ITypeConverter<List<BTTKeyValuePair>>.ConvertTo_long(List<BTTKeyValuePair> value)
            {
                return TypeConverter<long>.ConvertFrom_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<BTTKeyValuePair>>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<List<BTTKeyValuePair>>.Enumerate_long(List<BTTKeyValuePair> value)
            {
                
                yield break;
            }
            List<BTTKeyValuePair> ITypeConverter<List<BTTKeyValuePair>>.ConvertFrom_DateTime(DateTime value)
            {
                
                throw new InvalidCastException("Invalid cast from 'DateTime' to 'List<BTTKeyValuePair>'.");
                
            }
            DateTime ITypeConverter<List<BTTKeyValuePair>>.ConvertTo_DateTime(List<BTTKeyValuePair> value)
            {
                return TypeConverter<DateTime>.ConvertFrom_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<BTTKeyValuePair>>.GetConversionActionTo_DateTime()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<DateTime> ITypeConverter<List<BTTKeyValuePair>>.Enumerate_DateTime(List<BTTKeyValuePair> value)
            {
                
                yield break;
            }
            List<BTTKeyValuePair> ITypeConverter<List<BTTKeyValuePair>>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    List<BTTKeyValuePair> intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = ExternalParser.TryParse_List_BTTKeyValuePair(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        try
                        {
                            BTTKeyValuePair element = TypeConverter<BTTKeyValuePair>.ConvertFrom_string(value);
                            intermediate_result = new List<BTTKeyValuePair>();
                            intermediate_result.Add(element);
                        }
                        catch
                        {
                            throw new ArgumentException("Cannot parse \"" + value + "\" into either 'List<BTTKeyValuePair>' or 'BTTKeyValuePair'.");
                        }
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<List<BTTKeyValuePair>>.ConvertTo_string(List<BTTKeyValuePair> value)
            {
                return TypeConverter<string>.ConvertFrom_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<BTTKeyValuePair>>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<List<BTTKeyValuePair>>.Enumerate_string(List<BTTKeyValuePair> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<string>.ConvertFrom_BTTKeyValuePair(element);
                
                yield break;
            }
            List<BTTKeyValuePair> ITypeConverter<List<BTTKeyValuePair>>.ConvertFrom_int_Array_150(int[] value)
            {
                
                throw new InvalidCastException("Invalid cast from 'int[]' to 'List<BTTKeyValuePair>'.");
                
            }
            int[] ITypeConverter<List<BTTKeyValuePair>>.ConvertTo_int_Array_150(List<BTTKeyValuePair> value)
            {
                return TypeConverter<int[]>.ConvertFrom_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<BTTKeyValuePair>>.GetConversionActionTo_int_Array_150()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int[]> ITypeConverter<List<BTTKeyValuePair>>.Enumerate_int_Array_150(List<BTTKeyValuePair> value)
            {
                
                yield break;
            }
            List<BTTKeyValuePair> ITypeConverter<List<BTTKeyValuePair>>.ConvertFrom_List_long(List<long> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<long>' to 'List<BTTKeyValuePair>'.");
                
            }
            List<long> ITypeConverter<List<BTTKeyValuePair>>.ConvertTo_List_long(List<BTTKeyValuePair> value)
            {
                return TypeConverter<List<long>>.ConvertFrom_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<BTTKeyValuePair>>.GetConversionActionTo_List_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<long>> ITypeConverter<List<BTTKeyValuePair>>.Enumerate_List_long(List<BTTKeyValuePair> value)
            {
                
                yield break;
            }
            List<BTTKeyValuePair> ITypeConverter<List<BTTKeyValuePair>>.ConvertFrom_List_string(List<string> value)
            {
                
                {
                    List<BTTKeyValuePair> intermediate_result = new List<BTTKeyValuePair>();
                    foreach (var element in value)
                    {
                        intermediate_result.Add(TypeConverter<BTTKeyValuePair>.ConvertFrom_string(element));
                    }
                    return intermediate_result;
                }
                
            }
            List<string> ITypeConverter<List<BTTKeyValuePair>>.ConvertTo_List_string(List<BTTKeyValuePair> value)
            {
                return TypeConverter<List<string>>.ConvertFrom_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<BTTKeyValuePair>>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_CONVERTLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<List<BTTKeyValuePair>>.Enumerate_List_string(List<BTTKeyValuePair> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<string>>.ConvertFrom_BTTKeyValuePair(element);
                
                yield break;
            }
            List<BTTKeyValuePair> ITypeConverter<List<BTTKeyValuePair>>.ConvertFrom_List_BTTKeyValuePair(List<BTTKeyValuePair> value)
            {
                
                return (List<BTTKeyValuePair>)value;
                
            }
            List<BTTKeyValuePair> ITypeConverter<List<BTTKeyValuePair>>.ConvertTo_List_BTTKeyValuePair(List<BTTKeyValuePair> value)
            {
                return TypeConverter<List<BTTKeyValuePair>>.ConvertFrom_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<BTTKeyValuePair>>.GetConversionActionTo_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTKeyValuePair>> ITypeConverter<List<BTTKeyValuePair>>.Enumerate_List_BTTKeyValuePair(List<BTTKeyValuePair> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<BTTKeyValuePair>>.ConvertFrom_BTTKeyValuePair(element);
                
                yield break;
            }
            List<BTTKeyValuePair> ITypeConverter<List<BTTKeyValuePair>>.ConvertFrom_BTTClaim(BTTClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTClaim' to 'List<BTTKeyValuePair>'.");
                
            }
            BTTClaim ITypeConverter<List<BTTKeyValuePair>>.ConvertTo_BTTClaim(List<BTTKeyValuePair> value)
            {
                return TypeConverter<BTTClaim>.ConvertFrom_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<BTTKeyValuePair>>.GetConversionActionTo_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTClaim> ITypeConverter<List<BTTKeyValuePair>>.Enumerate_BTTClaim(List<BTTKeyValuePair> value)
            {
                
                yield break;
            }
            List<BTTKeyValuePair> ITypeConverter<List<BTTKeyValuePair>>.ConvertFrom_BTTEncryptedClaims(BTTEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims' to 'List<BTTKeyValuePair>'.");
                
            }
            BTTEncryptedClaims ITypeConverter<List<BTTKeyValuePair>>.ConvertTo_BTTEncryptedClaims(List<BTTKeyValuePair> value)
            {
                return TypeConverter<BTTEncryptedClaims>.ConvertFrom_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<BTTKeyValuePair>>.GetConversionActionTo_BTTEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims> ITypeConverter<List<BTTKeyValuePair>>.Enumerate_BTTEncryptedClaims(List<BTTKeyValuePair> value)
            {
                
                yield break;
            }
            List<BTTKeyValuePair> ITypeConverter<List<BTTKeyValuePair>>.ConvertFrom_BTTGenericCredential_Envelope(BTTGenericCredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_Envelope' to 'List<BTTKeyValuePair>'.");
                
            }
            BTTGenericCredential_Envelope ITypeConverter<List<BTTKeyValuePair>>.ConvertTo_BTTGenericCredential_Envelope(List<BTTKeyValuePair> value)
            {
                return TypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<BTTKeyValuePair>>.GetConversionActionTo_BTTGenericCredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_Envelope> ITypeConverter<List<BTTKeyValuePair>>.Enumerate_BTTGenericCredential_Envelope(List<BTTKeyValuePair> value)
            {
                
                yield break;
            }
            List<BTTKeyValuePair> ITypeConverter<List<BTTKeyValuePair>>.ConvertFrom_BTTGenericCredential_EnvelopeContent(BTTGenericCredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeContent' to 'List<BTTKeyValuePair>'.");
                
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<List<BTTKeyValuePair>>.ConvertTo_BTTGenericCredential_EnvelopeContent(List<BTTKeyValuePair> value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<BTTKeyValuePair>>.GetConversionActionTo_BTTGenericCredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeContent> ITypeConverter<List<BTTKeyValuePair>>.Enumerate_BTTGenericCredential_EnvelopeContent(List<BTTKeyValuePair> value)
            {
                
                yield break;
            }
            List<BTTKeyValuePair> ITypeConverter<List<BTTKeyValuePair>>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(BTTGenericCredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeSeal' to 'List<BTTKeyValuePair>'.");
                
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<List<BTTKeyValuePair>>.ConvertTo_BTTGenericCredential_EnvelopeSeal(List<BTTKeyValuePair> value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<BTTKeyValuePair>>.GetConversionActionTo_BTTGenericCredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeSeal> ITypeConverter<List<BTTKeyValuePair>>.Enumerate_BTTGenericCredential_EnvelopeSeal(List<BTTKeyValuePair> value)
            {
                
                yield break;
            }
            List<BTTKeyValuePair> ITypeConverter<List<BTTKeyValuePair>>.ConvertFrom_BTTGenericCredential_PackingLabel(BTTGenericCredential_PackingLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_PackingLabel' to 'List<BTTKeyValuePair>'.");
                
            }
            BTTGenericCredential_PackingLabel ITypeConverter<List<BTTKeyValuePair>>.ConvertTo_BTTGenericCredential_PackingLabel(List<BTTKeyValuePair> value)
            {
                return TypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<BTTKeyValuePair>>.GetConversionActionTo_BTTGenericCredential_PackingLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_PackingLabel> ITypeConverter<List<BTTKeyValuePair>>.Enumerate_BTTGenericCredential_PackingLabel(List<BTTKeyValuePair> value)
            {
                
                yield break;
            }
            List<BTTKeyValuePair> ITypeConverter<List<BTTKeyValuePair>>.ConvertFrom_BTTKeyValuePair(BTTKeyValuePair value)
            {
                
                {
                    List<BTTKeyValuePair> intermediate_result = new List<BTTKeyValuePair>();
                    intermediate_result.Add(TypeConverter<BTTKeyValuePair>.ConvertFrom_BTTKeyValuePair(value));
                    return intermediate_result;
                }
                
            }
            BTTKeyValuePair ITypeConverter<List<BTTKeyValuePair>>.ConvertTo_BTTKeyValuePair(List<BTTKeyValuePair> value)
            {
                return TypeConverter<BTTKeyValuePair>.ConvertFrom_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<BTTKeyValuePair>>.GetConversionActionTo_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTKeyValuePair> ITypeConverter<List<BTTKeyValuePair>>.Enumerate_BTTKeyValuePair(List<BTTKeyValuePair> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<BTTKeyValuePair>.ConvertFrom_BTTKeyValuePair(element);
                
                yield break;
            }
            List<BTTKeyValuePair> ITypeConverter<List<BTTKeyValuePair>>.ConvertFrom_BTTNFE_N4K_Claims(BTTNFE_N4K_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims' to 'List<BTTKeyValuePair>'.");
                
            }
            BTTNFE_N4K_Claims ITypeConverter<List<BTTKeyValuePair>>.ConvertTo_BTTNFE_N4K_Claims(List<BTTKeyValuePair> value)
            {
                return TypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<BTTKeyValuePair>>.GetConversionActionTo_BTTNFE_N4K_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims> ITypeConverter<List<BTTKeyValuePair>>.Enumerate_BTTNFE_N4K_Claims(List<BTTKeyValuePair> value)
            {
                
                yield break;
            }
            List<BTTKeyValuePair> ITypeConverter<List<BTTKeyValuePair>>.ConvertFrom_BTTNFE_N4K_Envelope(BTTNFE_N4K_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Envelope' to 'List<BTTKeyValuePair>'.");
                
            }
            BTTNFE_N4K_Envelope ITypeConverter<List<BTTKeyValuePair>>.ConvertTo_BTTNFE_N4K_Envelope(List<BTTKeyValuePair> value)
            {
                return TypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<BTTKeyValuePair>>.GetConversionActionTo_BTTNFE_N4K_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Envelope> ITypeConverter<List<BTTKeyValuePair>>.Enumerate_BTTNFE_N4K_Envelope(List<BTTKeyValuePair> value)
            {
                
                yield break;
            }
            List<BTTKeyValuePair> ITypeConverter<List<BTTKeyValuePair>>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(BTTNFE_N4K_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_EnvelopeContent' to 'List<BTTKeyValuePair>'.");
                
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<List<BTTKeyValuePair>>.ConvertTo_BTTNFE_N4K_EnvelopeContent(List<BTTKeyValuePair> value)
            {
                return TypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<BTTKeyValuePair>>.GetConversionActionTo_BTTNFE_N4K_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_EnvelopeContent> ITypeConverter<List<BTTKeyValuePair>>.Enumerate_BTTNFE_N4K_EnvelopeContent(List<BTTKeyValuePair> value)
            {
                
                yield break;
            }
            List<BTTKeyValuePair> ITypeConverter<List<BTTKeyValuePair>>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(BTTNFE_N4K_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_SealedEnvelope' to 'List<BTTKeyValuePair>'.");
                
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<List<BTTKeyValuePair>>.ConvertTo_BTTNFE_N4K_SealedEnvelope(List<BTTKeyValuePair> value)
            {
                return TypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<BTTKeyValuePair>>.GetConversionActionTo_BTTNFE_N4K_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_SealedEnvelope> ITypeConverter<List<BTTKeyValuePair>>.Enumerate_BTTNFE_N4K_SealedEnvelope(List<BTTKeyValuePair> value)
            {
                
                yield break;
            }
            List<BTTKeyValuePair> ITypeConverter<List<BTTKeyValuePair>>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTVerifiableCredential_SealedEnvelope' to 'List<BTTKeyValuePair>'.");
                
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<List<BTTKeyValuePair>>.ConvertTo_BTTVerifiableCredential_SealedEnvelope(List<BTTKeyValuePair> value)
            {
                return TypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<BTTKeyValuePair>>.GetConversionActionTo_BTTVerifiableCredential_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTVerifiableCredential_SealedEnvelope> ITypeConverter<List<BTTKeyValuePair>>.Enumerate_BTTVerifiableCredential_SealedEnvelope(List<BTTKeyValuePair> value)
            {
                
                yield break;
            }
            List<BTTKeyValuePair> ITypeConverter<List<BTTKeyValuePair>>.ConvertFrom_BTTEncryptionFlag(BTTEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptionFlag' to 'List<BTTKeyValuePair>'.");
                
            }
            BTTEncryptionFlag ITypeConverter<List<BTTKeyValuePair>>.ConvertTo_BTTEncryptionFlag(List<BTTKeyValuePair> value)
            {
                return TypeConverter<BTTEncryptionFlag>.ConvertFrom_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<BTTKeyValuePair>>.GetConversionActionTo_BTTEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptionFlag> ITypeConverter<List<BTTKeyValuePair>>.Enumerate_BTTEncryptionFlag(List<BTTKeyValuePair> value)
            {
                
                yield break;
            }
            List<BTTKeyValuePair> ITypeConverter<List<BTTKeyValuePair>>.ConvertFrom_BTTGenericCredentialType(BTTGenericCredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredentialType' to 'List<BTTKeyValuePair>'.");
                
            }
            BTTGenericCredentialType ITypeConverter<List<BTTKeyValuePair>>.ConvertTo_BTTGenericCredentialType(List<BTTKeyValuePair> value)
            {
                return TypeConverter<BTTGenericCredentialType>.ConvertFrom_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<BTTKeyValuePair>>.GetConversionActionTo_BTTGenericCredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredentialType> ITypeConverter<List<BTTKeyValuePair>>.Enumerate_BTTGenericCredentialType(List<BTTKeyValuePair> value)
            {
                
                yield break;
            }
            List<BTTKeyValuePair> ITypeConverter<List<BTTKeyValuePair>>.ConvertFrom_BTTNFEBodyPart(BTTNFEBodyPart value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFEBodyPart' to 'List<BTTKeyValuePair>'.");
                
            }
            BTTNFEBodyPart ITypeConverter<List<BTTKeyValuePair>>.ConvertTo_BTTNFEBodyPart(List<BTTKeyValuePair> value)
            {
                return TypeConverter<BTTNFEBodyPart>.ConvertFrom_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<BTTKeyValuePair>>.GetConversionActionTo_BTTNFEBodyPart()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFEBodyPart> ITypeConverter<List<BTTKeyValuePair>>.Enumerate_BTTNFEBodyPart(List<BTTKeyValuePair> value)
            {
                
                yield break;
            }
            List<BTTKeyValuePair> ITypeConverter<List<BTTKeyValuePair>>.ConvertFrom_BTTTrustLevel(BTTTrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTTrustLevel' to 'List<BTTKeyValuePair>'.");
                
            }
            BTTTrustLevel ITypeConverter<List<BTTKeyValuePair>>.ConvertTo_BTTTrustLevel(List<BTTKeyValuePair> value)
            {
                return TypeConverter<BTTTrustLevel>.ConvertFrom_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<BTTKeyValuePair>>.GetConversionActionTo_BTTTrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTTrustLevel> ITypeConverter<List<BTTKeyValuePair>>.Enumerate_BTTTrustLevel(List<BTTKeyValuePair> value)
            {
                
                yield break;
            }
            List<BTTKeyValuePair> ITypeConverter<List<BTTKeyValuePair>>.ConvertFrom_List_List_BTTKeyValuePair(List<List<BTTKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<BTTKeyValuePair>>' to 'List<BTTKeyValuePair>'.");
                
            }
            List<List<BTTKeyValuePair>> ITypeConverter<List<BTTKeyValuePair>>.ConvertTo_List_List_BTTKeyValuePair(List<BTTKeyValuePair> value)
            {
                return TypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<BTTKeyValuePair>>.GetConversionActionTo_List_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_CONVERTLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<BTTKeyValuePair>>> ITypeConverter<List<BTTKeyValuePair>>.Enumerate_List_List_BTTKeyValuePair(List<BTTKeyValuePair> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_BTTKeyValuePair(element);
                
                yield break;
            }
            List<BTTKeyValuePair> ITypeConverter<List<BTTKeyValuePair>>.ConvertFrom_List_BTTClaim(List<BTTClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTClaim>' to 'List<BTTKeyValuePair>'.");
                
            }
            List<BTTClaim> ITypeConverter<List<BTTKeyValuePair>>.ConvertTo_List_BTTClaim(List<BTTKeyValuePair> value)
            {
                return TypeConverter<List<BTTClaim>>.ConvertFrom_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<BTTKeyValuePair>>.GetConversionActionTo_List_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTClaim>> ITypeConverter<List<BTTKeyValuePair>>.Enumerate_List_BTTClaim(List<BTTKeyValuePair> value)
            {
                
                yield break;
            }
            List<BTTKeyValuePair> ITypeConverter<List<BTTKeyValuePair>>.ConvertFrom_BTTEncryptedClaims_nullable(BTTEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims?' to 'List<BTTKeyValuePair>'.");
                
            }
            BTTEncryptedClaims? ITypeConverter<List<BTTKeyValuePair>>.ConvertTo_BTTEncryptedClaims_nullable(List<BTTKeyValuePair> value)
            {
                return TypeConverter<BTTEncryptedClaims?>.ConvertFrom_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<BTTKeyValuePair>>.GetConversionActionTo_BTTEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims?> ITypeConverter<List<BTTKeyValuePair>>.Enumerate_BTTEncryptedClaims_nullable(List<BTTKeyValuePair> value)
            {
                
                yield break;
            }
            List<BTTKeyValuePair> ITypeConverter<List<BTTKeyValuePair>>.ConvertFrom_BTTNFE_N4K_Claims_nullable(BTTNFE_N4K_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims?' to 'List<BTTKeyValuePair>'.");
                
            }
            BTTNFE_N4K_Claims? ITypeConverter<List<BTTKeyValuePair>>.ConvertTo_BTTNFE_N4K_Claims_nullable(List<BTTKeyValuePair> value)
            {
                return TypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<BTTKeyValuePair>>.GetConversionActionTo_BTTNFE_N4K_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims?> ITypeConverter<List<BTTKeyValuePair>>.Enumerate_BTTNFE_N4K_Claims_nullable(List<BTTKeyValuePair> value)
            {
                
                yield break;
            }
            BTTClaim ITypeConverter<BTTClaim>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'BTTClaim'.");
                
            }
            bool ITypeConverter<BTTClaim>.ConvertTo_bool(BTTClaim value)
            {
                return TypeConverter<bool>.ConvertFrom_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<BTTClaim>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<BTTClaim>.Enumerate_bool(BTTClaim value)
            {
                
                yield break;
            }
            BTTClaim ITypeConverter<BTTClaim>.ConvertFrom_int(int value)
            {
                
                throw new InvalidCastException("Invalid cast from 'int' to 'BTTClaim'.");
                
            }
            int ITypeConverter<BTTClaim>.ConvertTo_int(BTTClaim value)
            {
                return TypeConverter<int>.ConvertFrom_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<BTTClaim>.GetConversionActionTo_int()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int> ITypeConverter<BTTClaim>.Enumerate_int(BTTClaim value)
            {
                
                yield break;
            }
            BTTClaim ITypeConverter<BTTClaim>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'BTTClaim'.");
                
            }
            long ITypeConverter<BTTClaim>.ConvertTo_long(BTTClaim value)
            {
                return TypeConverter<long>.ConvertFrom_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<BTTClaim>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<BTTClaim>.Enumerate_long(BTTClaim value)
            {
                
                yield break;
            }
            BTTClaim ITypeConverter<BTTClaim>.ConvertFrom_DateTime(DateTime value)
            {
                
                throw new InvalidCastException("Invalid cast from 'DateTime' to 'BTTClaim'.");
                
            }
            DateTime ITypeConverter<BTTClaim>.ConvertTo_DateTime(BTTClaim value)
            {
                return TypeConverter<DateTime>.ConvertFrom_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<BTTClaim>.GetConversionActionTo_DateTime()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<DateTime> ITypeConverter<BTTClaim>.Enumerate_DateTime(BTTClaim value)
            {
                
                yield break;
            }
            BTTClaim ITypeConverter<BTTClaim>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    BTTClaim intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = BTTClaim.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "BTTClaim");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<BTTClaim>.ConvertTo_string(BTTClaim value)
            {
                return TypeConverter<string>.ConvertFrom_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<BTTClaim>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<BTTClaim>.Enumerate_string(BTTClaim value)
            {
                
                yield break;
            }
            BTTClaim ITypeConverter<BTTClaim>.ConvertFrom_int_Array_150(int[] value)
            {
                
                throw new InvalidCastException("Invalid cast from 'int[]' to 'BTTClaim'.");
                
            }
            int[] ITypeConverter<BTTClaim>.ConvertTo_int_Array_150(BTTClaim value)
            {
                return TypeConverter<int[]>.ConvertFrom_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<BTTClaim>.GetConversionActionTo_int_Array_150()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int[]> ITypeConverter<BTTClaim>.Enumerate_int_Array_150(BTTClaim value)
            {
                
                yield break;
            }
            BTTClaim ITypeConverter<BTTClaim>.ConvertFrom_List_long(List<long> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<long>' to 'BTTClaim'.");
                
            }
            List<long> ITypeConverter<BTTClaim>.ConvertTo_List_long(BTTClaim value)
            {
                return TypeConverter<List<long>>.ConvertFrom_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<BTTClaim>.GetConversionActionTo_List_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<long>> ITypeConverter<BTTClaim>.Enumerate_List_long(BTTClaim value)
            {
                
                yield break;
            }
            BTTClaim ITypeConverter<BTTClaim>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'BTTClaim'.");
                
            }
            List<string> ITypeConverter<BTTClaim>.ConvertTo_List_string(BTTClaim value)
            {
                return TypeConverter<List<string>>.ConvertFrom_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<BTTClaim>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<BTTClaim>.Enumerate_List_string(BTTClaim value)
            {
                
                yield break;
            }
            BTTClaim ITypeConverter<BTTClaim>.ConvertFrom_List_BTTKeyValuePair(List<BTTKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTKeyValuePair>' to 'BTTClaim'.");
                
            }
            List<BTTKeyValuePair> ITypeConverter<BTTClaim>.ConvertTo_List_BTTKeyValuePair(BTTClaim value)
            {
                return TypeConverter<List<BTTKeyValuePair>>.ConvertFrom_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<BTTClaim>.GetConversionActionTo_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTKeyValuePair>> ITypeConverter<BTTClaim>.Enumerate_List_BTTKeyValuePair(BTTClaim value)
            {
                
                yield break;
            }
            BTTClaim ITypeConverter<BTTClaim>.ConvertFrom_BTTClaim(BTTClaim value)
            {
                
                return (BTTClaim)value;
                
            }
            BTTClaim ITypeConverter<BTTClaim>.ConvertTo_BTTClaim(BTTClaim value)
            {
                return TypeConverter<BTTClaim>.ConvertFrom_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<BTTClaim>.GetConversionActionTo_BTTClaim()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTClaim> ITypeConverter<BTTClaim>.Enumerate_BTTClaim(BTTClaim value)
            {
                
                yield break;
            }
            BTTClaim ITypeConverter<BTTClaim>.ConvertFrom_BTTEncryptedClaims(BTTEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims' to 'BTTClaim'.");
                
            }
            BTTEncryptedClaims ITypeConverter<BTTClaim>.ConvertTo_BTTEncryptedClaims(BTTClaim value)
            {
                return TypeConverter<BTTEncryptedClaims>.ConvertFrom_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<BTTClaim>.GetConversionActionTo_BTTEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims> ITypeConverter<BTTClaim>.Enumerate_BTTEncryptedClaims(BTTClaim value)
            {
                
                yield break;
            }
            BTTClaim ITypeConverter<BTTClaim>.ConvertFrom_BTTGenericCredential_Envelope(BTTGenericCredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_Envelope' to 'BTTClaim'.");
                
            }
            BTTGenericCredential_Envelope ITypeConverter<BTTClaim>.ConvertTo_BTTGenericCredential_Envelope(BTTClaim value)
            {
                return TypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<BTTClaim>.GetConversionActionTo_BTTGenericCredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_Envelope> ITypeConverter<BTTClaim>.Enumerate_BTTGenericCredential_Envelope(BTTClaim value)
            {
                
                yield break;
            }
            BTTClaim ITypeConverter<BTTClaim>.ConvertFrom_BTTGenericCredential_EnvelopeContent(BTTGenericCredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeContent' to 'BTTClaim'.");
                
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<BTTClaim>.ConvertTo_BTTGenericCredential_EnvelopeContent(BTTClaim value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<BTTClaim>.GetConversionActionTo_BTTGenericCredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeContent> ITypeConverter<BTTClaim>.Enumerate_BTTGenericCredential_EnvelopeContent(BTTClaim value)
            {
                
                yield break;
            }
            BTTClaim ITypeConverter<BTTClaim>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(BTTGenericCredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeSeal' to 'BTTClaim'.");
                
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<BTTClaim>.ConvertTo_BTTGenericCredential_EnvelopeSeal(BTTClaim value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<BTTClaim>.GetConversionActionTo_BTTGenericCredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeSeal> ITypeConverter<BTTClaim>.Enumerate_BTTGenericCredential_EnvelopeSeal(BTTClaim value)
            {
                
                yield break;
            }
            BTTClaim ITypeConverter<BTTClaim>.ConvertFrom_BTTGenericCredential_PackingLabel(BTTGenericCredential_PackingLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_PackingLabel' to 'BTTClaim'.");
                
            }
            BTTGenericCredential_PackingLabel ITypeConverter<BTTClaim>.ConvertTo_BTTGenericCredential_PackingLabel(BTTClaim value)
            {
                return TypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<BTTClaim>.GetConversionActionTo_BTTGenericCredential_PackingLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_PackingLabel> ITypeConverter<BTTClaim>.Enumerate_BTTGenericCredential_PackingLabel(BTTClaim value)
            {
                
                yield break;
            }
            BTTClaim ITypeConverter<BTTClaim>.ConvertFrom_BTTKeyValuePair(BTTKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTKeyValuePair' to 'BTTClaim'.");
                
            }
            BTTKeyValuePair ITypeConverter<BTTClaim>.ConvertTo_BTTKeyValuePair(BTTClaim value)
            {
                return TypeConverter<BTTKeyValuePair>.ConvertFrom_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<BTTClaim>.GetConversionActionTo_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTKeyValuePair> ITypeConverter<BTTClaim>.Enumerate_BTTKeyValuePair(BTTClaim value)
            {
                
                yield break;
            }
            BTTClaim ITypeConverter<BTTClaim>.ConvertFrom_BTTNFE_N4K_Claims(BTTNFE_N4K_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims' to 'BTTClaim'.");
                
            }
            BTTNFE_N4K_Claims ITypeConverter<BTTClaim>.ConvertTo_BTTNFE_N4K_Claims(BTTClaim value)
            {
                return TypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<BTTClaim>.GetConversionActionTo_BTTNFE_N4K_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims> ITypeConverter<BTTClaim>.Enumerate_BTTNFE_N4K_Claims(BTTClaim value)
            {
                
                yield break;
            }
            BTTClaim ITypeConverter<BTTClaim>.ConvertFrom_BTTNFE_N4K_Envelope(BTTNFE_N4K_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Envelope' to 'BTTClaim'.");
                
            }
            BTTNFE_N4K_Envelope ITypeConverter<BTTClaim>.ConvertTo_BTTNFE_N4K_Envelope(BTTClaim value)
            {
                return TypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<BTTClaim>.GetConversionActionTo_BTTNFE_N4K_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Envelope> ITypeConverter<BTTClaim>.Enumerate_BTTNFE_N4K_Envelope(BTTClaim value)
            {
                
                yield break;
            }
            BTTClaim ITypeConverter<BTTClaim>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(BTTNFE_N4K_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_EnvelopeContent' to 'BTTClaim'.");
                
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<BTTClaim>.ConvertTo_BTTNFE_N4K_EnvelopeContent(BTTClaim value)
            {
                return TypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<BTTClaim>.GetConversionActionTo_BTTNFE_N4K_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_EnvelopeContent> ITypeConverter<BTTClaim>.Enumerate_BTTNFE_N4K_EnvelopeContent(BTTClaim value)
            {
                
                yield break;
            }
            BTTClaim ITypeConverter<BTTClaim>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(BTTNFE_N4K_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_SealedEnvelope' to 'BTTClaim'.");
                
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<BTTClaim>.ConvertTo_BTTNFE_N4K_SealedEnvelope(BTTClaim value)
            {
                return TypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<BTTClaim>.GetConversionActionTo_BTTNFE_N4K_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_SealedEnvelope> ITypeConverter<BTTClaim>.Enumerate_BTTNFE_N4K_SealedEnvelope(BTTClaim value)
            {
                
                yield break;
            }
            BTTClaim ITypeConverter<BTTClaim>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTVerifiableCredential_SealedEnvelope' to 'BTTClaim'.");
                
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<BTTClaim>.ConvertTo_BTTVerifiableCredential_SealedEnvelope(BTTClaim value)
            {
                return TypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<BTTClaim>.GetConversionActionTo_BTTVerifiableCredential_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTVerifiableCredential_SealedEnvelope> ITypeConverter<BTTClaim>.Enumerate_BTTVerifiableCredential_SealedEnvelope(BTTClaim value)
            {
                
                yield break;
            }
            BTTClaim ITypeConverter<BTTClaim>.ConvertFrom_BTTEncryptionFlag(BTTEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptionFlag' to 'BTTClaim'.");
                
            }
            BTTEncryptionFlag ITypeConverter<BTTClaim>.ConvertTo_BTTEncryptionFlag(BTTClaim value)
            {
                return TypeConverter<BTTEncryptionFlag>.ConvertFrom_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<BTTClaim>.GetConversionActionTo_BTTEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptionFlag> ITypeConverter<BTTClaim>.Enumerate_BTTEncryptionFlag(BTTClaim value)
            {
                
                yield break;
            }
            BTTClaim ITypeConverter<BTTClaim>.ConvertFrom_BTTGenericCredentialType(BTTGenericCredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredentialType' to 'BTTClaim'.");
                
            }
            BTTGenericCredentialType ITypeConverter<BTTClaim>.ConvertTo_BTTGenericCredentialType(BTTClaim value)
            {
                return TypeConverter<BTTGenericCredentialType>.ConvertFrom_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<BTTClaim>.GetConversionActionTo_BTTGenericCredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredentialType> ITypeConverter<BTTClaim>.Enumerate_BTTGenericCredentialType(BTTClaim value)
            {
                
                yield break;
            }
            BTTClaim ITypeConverter<BTTClaim>.ConvertFrom_BTTNFEBodyPart(BTTNFEBodyPart value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFEBodyPart' to 'BTTClaim'.");
                
            }
            BTTNFEBodyPart ITypeConverter<BTTClaim>.ConvertTo_BTTNFEBodyPart(BTTClaim value)
            {
                return TypeConverter<BTTNFEBodyPart>.ConvertFrom_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<BTTClaim>.GetConversionActionTo_BTTNFEBodyPart()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFEBodyPart> ITypeConverter<BTTClaim>.Enumerate_BTTNFEBodyPart(BTTClaim value)
            {
                
                yield break;
            }
            BTTClaim ITypeConverter<BTTClaim>.ConvertFrom_BTTTrustLevel(BTTTrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTTrustLevel' to 'BTTClaim'.");
                
            }
            BTTTrustLevel ITypeConverter<BTTClaim>.ConvertTo_BTTTrustLevel(BTTClaim value)
            {
                return TypeConverter<BTTTrustLevel>.ConvertFrom_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<BTTClaim>.GetConversionActionTo_BTTTrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTTrustLevel> ITypeConverter<BTTClaim>.Enumerate_BTTTrustLevel(BTTClaim value)
            {
                
                yield break;
            }
            BTTClaim ITypeConverter<BTTClaim>.ConvertFrom_List_List_BTTKeyValuePair(List<List<BTTKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<BTTKeyValuePair>>' to 'BTTClaim'.");
                
            }
            List<List<BTTKeyValuePair>> ITypeConverter<BTTClaim>.ConvertTo_List_List_BTTKeyValuePair(BTTClaim value)
            {
                return TypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<BTTClaim>.GetConversionActionTo_List_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<BTTKeyValuePair>>> ITypeConverter<BTTClaim>.Enumerate_List_List_BTTKeyValuePair(BTTClaim value)
            {
                
                yield break;
            }
            BTTClaim ITypeConverter<BTTClaim>.ConvertFrom_List_BTTClaim(List<BTTClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTClaim>' to 'BTTClaim'.");
                
            }
            List<BTTClaim> ITypeConverter<BTTClaim>.ConvertTo_List_BTTClaim(BTTClaim value)
            {
                return TypeConverter<List<BTTClaim>>.ConvertFrom_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<BTTClaim>.GetConversionActionTo_List_BTTClaim()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTClaim>> ITypeConverter<BTTClaim>.Enumerate_List_BTTClaim(BTTClaim value)
            {
                
                yield break;
            }
            BTTClaim ITypeConverter<BTTClaim>.ConvertFrom_BTTEncryptedClaims_nullable(BTTEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims?' to 'BTTClaim'.");
                
            }
            BTTEncryptedClaims? ITypeConverter<BTTClaim>.ConvertTo_BTTEncryptedClaims_nullable(BTTClaim value)
            {
                return TypeConverter<BTTEncryptedClaims?>.ConvertFrom_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<BTTClaim>.GetConversionActionTo_BTTEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims?> ITypeConverter<BTTClaim>.Enumerate_BTTEncryptedClaims_nullable(BTTClaim value)
            {
                
                yield break;
            }
            BTTClaim ITypeConverter<BTTClaim>.ConvertFrom_BTTNFE_N4K_Claims_nullable(BTTNFE_N4K_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims?' to 'BTTClaim'.");
                
            }
            BTTNFE_N4K_Claims? ITypeConverter<BTTClaim>.ConvertTo_BTTNFE_N4K_Claims_nullable(BTTClaim value)
            {
                return TypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<BTTClaim>.GetConversionActionTo_BTTNFE_N4K_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims?> ITypeConverter<BTTClaim>.Enumerate_BTTNFE_N4K_Claims_nullable(BTTClaim value)
            {
                
                yield break;
            }
            BTTEncryptedClaims ITypeConverter<BTTEncryptedClaims>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'BTTEncryptedClaims'.");
                
            }
            bool ITypeConverter<BTTEncryptedClaims>.ConvertTo_bool(BTTEncryptedClaims value)
            {
                return TypeConverter<bool>.ConvertFrom_BTTEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<BTTEncryptedClaims>.Enumerate_bool(BTTEncryptedClaims value)
            {
                
                yield break;
            }
            BTTEncryptedClaims ITypeConverter<BTTEncryptedClaims>.ConvertFrom_int(int value)
            {
                
                throw new InvalidCastException("Invalid cast from 'int' to 'BTTEncryptedClaims'.");
                
            }
            int ITypeConverter<BTTEncryptedClaims>.ConvertTo_int(BTTEncryptedClaims value)
            {
                return TypeConverter<int>.ConvertFrom_BTTEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims>.GetConversionActionTo_int()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int> ITypeConverter<BTTEncryptedClaims>.Enumerate_int(BTTEncryptedClaims value)
            {
                
                yield break;
            }
            BTTEncryptedClaims ITypeConverter<BTTEncryptedClaims>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'BTTEncryptedClaims'.");
                
            }
            long ITypeConverter<BTTEncryptedClaims>.ConvertTo_long(BTTEncryptedClaims value)
            {
                return TypeConverter<long>.ConvertFrom_BTTEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<BTTEncryptedClaims>.Enumerate_long(BTTEncryptedClaims value)
            {
                
                yield break;
            }
            BTTEncryptedClaims ITypeConverter<BTTEncryptedClaims>.ConvertFrom_DateTime(DateTime value)
            {
                
                throw new InvalidCastException("Invalid cast from 'DateTime' to 'BTTEncryptedClaims'.");
                
            }
            DateTime ITypeConverter<BTTEncryptedClaims>.ConvertTo_DateTime(BTTEncryptedClaims value)
            {
                return TypeConverter<DateTime>.ConvertFrom_BTTEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims>.GetConversionActionTo_DateTime()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<DateTime> ITypeConverter<BTTEncryptedClaims>.Enumerate_DateTime(BTTEncryptedClaims value)
            {
                
                yield break;
            }
            BTTEncryptedClaims ITypeConverter<BTTEncryptedClaims>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    BTTEncryptedClaims intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = BTTEncryptedClaims.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "BTTEncryptedClaims");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<BTTEncryptedClaims>.ConvertTo_string(BTTEncryptedClaims value)
            {
                return TypeConverter<string>.ConvertFrom_BTTEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<BTTEncryptedClaims>.Enumerate_string(BTTEncryptedClaims value)
            {
                
                yield break;
            }
            BTTEncryptedClaims ITypeConverter<BTTEncryptedClaims>.ConvertFrom_int_Array_150(int[] value)
            {
                
                throw new InvalidCastException("Invalid cast from 'int[]' to 'BTTEncryptedClaims'.");
                
            }
            int[] ITypeConverter<BTTEncryptedClaims>.ConvertTo_int_Array_150(BTTEncryptedClaims value)
            {
                return TypeConverter<int[]>.ConvertFrom_BTTEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims>.GetConversionActionTo_int_Array_150()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int[]> ITypeConverter<BTTEncryptedClaims>.Enumerate_int_Array_150(BTTEncryptedClaims value)
            {
                
                yield break;
            }
            BTTEncryptedClaims ITypeConverter<BTTEncryptedClaims>.ConvertFrom_List_long(List<long> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<long>' to 'BTTEncryptedClaims'.");
                
            }
            List<long> ITypeConverter<BTTEncryptedClaims>.ConvertTo_List_long(BTTEncryptedClaims value)
            {
                return TypeConverter<List<long>>.ConvertFrom_BTTEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims>.GetConversionActionTo_List_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<long>> ITypeConverter<BTTEncryptedClaims>.Enumerate_List_long(BTTEncryptedClaims value)
            {
                
                yield break;
            }
            BTTEncryptedClaims ITypeConverter<BTTEncryptedClaims>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'BTTEncryptedClaims'.");
                
            }
            List<string> ITypeConverter<BTTEncryptedClaims>.ConvertTo_List_string(BTTEncryptedClaims value)
            {
                return TypeConverter<List<string>>.ConvertFrom_BTTEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<BTTEncryptedClaims>.Enumerate_List_string(BTTEncryptedClaims value)
            {
                
                yield break;
            }
            BTTEncryptedClaims ITypeConverter<BTTEncryptedClaims>.ConvertFrom_List_BTTKeyValuePair(List<BTTKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTKeyValuePair>' to 'BTTEncryptedClaims'.");
                
            }
            List<BTTKeyValuePair> ITypeConverter<BTTEncryptedClaims>.ConvertTo_List_BTTKeyValuePair(BTTEncryptedClaims value)
            {
                return TypeConverter<List<BTTKeyValuePair>>.ConvertFrom_BTTEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims>.GetConversionActionTo_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTKeyValuePair>> ITypeConverter<BTTEncryptedClaims>.Enumerate_List_BTTKeyValuePair(BTTEncryptedClaims value)
            {
                
                yield break;
            }
            BTTEncryptedClaims ITypeConverter<BTTEncryptedClaims>.ConvertFrom_BTTClaim(BTTClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTClaim' to 'BTTEncryptedClaims'.");
                
            }
            BTTClaim ITypeConverter<BTTEncryptedClaims>.ConvertTo_BTTClaim(BTTEncryptedClaims value)
            {
                return TypeConverter<BTTClaim>.ConvertFrom_BTTEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims>.GetConversionActionTo_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTClaim> ITypeConverter<BTTEncryptedClaims>.Enumerate_BTTClaim(BTTEncryptedClaims value)
            {
                
                yield break;
            }
            BTTEncryptedClaims ITypeConverter<BTTEncryptedClaims>.ConvertFrom_BTTEncryptedClaims(BTTEncryptedClaims value)
            {
                
                return (BTTEncryptedClaims)value;
                
            }
            BTTEncryptedClaims ITypeConverter<BTTEncryptedClaims>.ConvertTo_BTTEncryptedClaims(BTTEncryptedClaims value)
            {
                return TypeConverter<BTTEncryptedClaims>.ConvertFrom_BTTEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims>.GetConversionActionTo_BTTEncryptedClaims()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims> ITypeConverter<BTTEncryptedClaims>.Enumerate_BTTEncryptedClaims(BTTEncryptedClaims value)
            {
                
                yield break;
            }
            BTTEncryptedClaims ITypeConverter<BTTEncryptedClaims>.ConvertFrom_BTTGenericCredential_Envelope(BTTGenericCredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_Envelope' to 'BTTEncryptedClaims'.");
                
            }
            BTTGenericCredential_Envelope ITypeConverter<BTTEncryptedClaims>.ConvertTo_BTTGenericCredential_Envelope(BTTEncryptedClaims value)
            {
                return TypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_BTTEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims>.GetConversionActionTo_BTTGenericCredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_Envelope> ITypeConverter<BTTEncryptedClaims>.Enumerate_BTTGenericCredential_Envelope(BTTEncryptedClaims value)
            {
                
                yield break;
            }
            BTTEncryptedClaims ITypeConverter<BTTEncryptedClaims>.ConvertFrom_BTTGenericCredential_EnvelopeContent(BTTGenericCredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeContent' to 'BTTEncryptedClaims'.");
                
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<BTTEncryptedClaims>.ConvertTo_BTTGenericCredential_EnvelopeContent(BTTEncryptedClaims value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_BTTEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims>.GetConversionActionTo_BTTGenericCredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeContent> ITypeConverter<BTTEncryptedClaims>.Enumerate_BTTGenericCredential_EnvelopeContent(BTTEncryptedClaims value)
            {
                
                yield break;
            }
            BTTEncryptedClaims ITypeConverter<BTTEncryptedClaims>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(BTTGenericCredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeSeal' to 'BTTEncryptedClaims'.");
                
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<BTTEncryptedClaims>.ConvertTo_BTTGenericCredential_EnvelopeSeal(BTTEncryptedClaims value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_BTTEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims>.GetConversionActionTo_BTTGenericCredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeSeal> ITypeConverter<BTTEncryptedClaims>.Enumerate_BTTGenericCredential_EnvelopeSeal(BTTEncryptedClaims value)
            {
                
                yield break;
            }
            BTTEncryptedClaims ITypeConverter<BTTEncryptedClaims>.ConvertFrom_BTTGenericCredential_PackingLabel(BTTGenericCredential_PackingLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_PackingLabel' to 'BTTEncryptedClaims'.");
                
            }
            BTTGenericCredential_PackingLabel ITypeConverter<BTTEncryptedClaims>.ConvertTo_BTTGenericCredential_PackingLabel(BTTEncryptedClaims value)
            {
                return TypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_BTTEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims>.GetConversionActionTo_BTTGenericCredential_PackingLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_PackingLabel> ITypeConverter<BTTEncryptedClaims>.Enumerate_BTTGenericCredential_PackingLabel(BTTEncryptedClaims value)
            {
                
                yield break;
            }
            BTTEncryptedClaims ITypeConverter<BTTEncryptedClaims>.ConvertFrom_BTTKeyValuePair(BTTKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTKeyValuePair' to 'BTTEncryptedClaims'.");
                
            }
            BTTKeyValuePair ITypeConverter<BTTEncryptedClaims>.ConvertTo_BTTKeyValuePair(BTTEncryptedClaims value)
            {
                return TypeConverter<BTTKeyValuePair>.ConvertFrom_BTTEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims>.GetConversionActionTo_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTKeyValuePair> ITypeConverter<BTTEncryptedClaims>.Enumerate_BTTKeyValuePair(BTTEncryptedClaims value)
            {
                
                yield break;
            }
            BTTEncryptedClaims ITypeConverter<BTTEncryptedClaims>.ConvertFrom_BTTNFE_N4K_Claims(BTTNFE_N4K_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims' to 'BTTEncryptedClaims'.");
                
            }
            BTTNFE_N4K_Claims ITypeConverter<BTTEncryptedClaims>.ConvertTo_BTTNFE_N4K_Claims(BTTEncryptedClaims value)
            {
                return TypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_BTTEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims>.GetConversionActionTo_BTTNFE_N4K_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims> ITypeConverter<BTTEncryptedClaims>.Enumerate_BTTNFE_N4K_Claims(BTTEncryptedClaims value)
            {
                
                yield break;
            }
            BTTEncryptedClaims ITypeConverter<BTTEncryptedClaims>.ConvertFrom_BTTNFE_N4K_Envelope(BTTNFE_N4K_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Envelope' to 'BTTEncryptedClaims'.");
                
            }
            BTTNFE_N4K_Envelope ITypeConverter<BTTEncryptedClaims>.ConvertTo_BTTNFE_N4K_Envelope(BTTEncryptedClaims value)
            {
                return TypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_BTTEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims>.GetConversionActionTo_BTTNFE_N4K_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Envelope> ITypeConverter<BTTEncryptedClaims>.Enumerate_BTTNFE_N4K_Envelope(BTTEncryptedClaims value)
            {
                
                yield break;
            }
            BTTEncryptedClaims ITypeConverter<BTTEncryptedClaims>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(BTTNFE_N4K_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_EnvelopeContent' to 'BTTEncryptedClaims'.");
                
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<BTTEncryptedClaims>.ConvertTo_BTTNFE_N4K_EnvelopeContent(BTTEncryptedClaims value)
            {
                return TypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_BTTEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims>.GetConversionActionTo_BTTNFE_N4K_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_EnvelopeContent> ITypeConverter<BTTEncryptedClaims>.Enumerate_BTTNFE_N4K_EnvelopeContent(BTTEncryptedClaims value)
            {
                
                yield break;
            }
            BTTEncryptedClaims ITypeConverter<BTTEncryptedClaims>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(BTTNFE_N4K_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_SealedEnvelope' to 'BTTEncryptedClaims'.");
                
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<BTTEncryptedClaims>.ConvertTo_BTTNFE_N4K_SealedEnvelope(BTTEncryptedClaims value)
            {
                return TypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_BTTEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims>.GetConversionActionTo_BTTNFE_N4K_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_SealedEnvelope> ITypeConverter<BTTEncryptedClaims>.Enumerate_BTTNFE_N4K_SealedEnvelope(BTTEncryptedClaims value)
            {
                
                yield break;
            }
            BTTEncryptedClaims ITypeConverter<BTTEncryptedClaims>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTVerifiableCredential_SealedEnvelope' to 'BTTEncryptedClaims'.");
                
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<BTTEncryptedClaims>.ConvertTo_BTTVerifiableCredential_SealedEnvelope(BTTEncryptedClaims value)
            {
                return TypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_BTTEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims>.GetConversionActionTo_BTTVerifiableCredential_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTVerifiableCredential_SealedEnvelope> ITypeConverter<BTTEncryptedClaims>.Enumerate_BTTVerifiableCredential_SealedEnvelope(BTTEncryptedClaims value)
            {
                
                yield break;
            }
            BTTEncryptedClaims ITypeConverter<BTTEncryptedClaims>.ConvertFrom_BTTEncryptionFlag(BTTEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptionFlag' to 'BTTEncryptedClaims'.");
                
            }
            BTTEncryptionFlag ITypeConverter<BTTEncryptedClaims>.ConvertTo_BTTEncryptionFlag(BTTEncryptedClaims value)
            {
                return TypeConverter<BTTEncryptionFlag>.ConvertFrom_BTTEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims>.GetConversionActionTo_BTTEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptionFlag> ITypeConverter<BTTEncryptedClaims>.Enumerate_BTTEncryptionFlag(BTTEncryptedClaims value)
            {
                
                yield break;
            }
            BTTEncryptedClaims ITypeConverter<BTTEncryptedClaims>.ConvertFrom_BTTGenericCredentialType(BTTGenericCredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredentialType' to 'BTTEncryptedClaims'.");
                
            }
            BTTGenericCredentialType ITypeConverter<BTTEncryptedClaims>.ConvertTo_BTTGenericCredentialType(BTTEncryptedClaims value)
            {
                return TypeConverter<BTTGenericCredentialType>.ConvertFrom_BTTEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims>.GetConversionActionTo_BTTGenericCredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredentialType> ITypeConverter<BTTEncryptedClaims>.Enumerate_BTTGenericCredentialType(BTTEncryptedClaims value)
            {
                
                yield break;
            }
            BTTEncryptedClaims ITypeConverter<BTTEncryptedClaims>.ConvertFrom_BTTNFEBodyPart(BTTNFEBodyPart value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFEBodyPart' to 'BTTEncryptedClaims'.");
                
            }
            BTTNFEBodyPart ITypeConverter<BTTEncryptedClaims>.ConvertTo_BTTNFEBodyPart(BTTEncryptedClaims value)
            {
                return TypeConverter<BTTNFEBodyPart>.ConvertFrom_BTTEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims>.GetConversionActionTo_BTTNFEBodyPart()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFEBodyPart> ITypeConverter<BTTEncryptedClaims>.Enumerate_BTTNFEBodyPart(BTTEncryptedClaims value)
            {
                
                yield break;
            }
            BTTEncryptedClaims ITypeConverter<BTTEncryptedClaims>.ConvertFrom_BTTTrustLevel(BTTTrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTTrustLevel' to 'BTTEncryptedClaims'.");
                
            }
            BTTTrustLevel ITypeConverter<BTTEncryptedClaims>.ConvertTo_BTTTrustLevel(BTTEncryptedClaims value)
            {
                return TypeConverter<BTTTrustLevel>.ConvertFrom_BTTEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims>.GetConversionActionTo_BTTTrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTTrustLevel> ITypeConverter<BTTEncryptedClaims>.Enumerate_BTTTrustLevel(BTTEncryptedClaims value)
            {
                
                yield break;
            }
            BTTEncryptedClaims ITypeConverter<BTTEncryptedClaims>.ConvertFrom_List_List_BTTKeyValuePair(List<List<BTTKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<BTTKeyValuePair>>' to 'BTTEncryptedClaims'.");
                
            }
            List<List<BTTKeyValuePair>> ITypeConverter<BTTEncryptedClaims>.ConvertTo_List_List_BTTKeyValuePair(BTTEncryptedClaims value)
            {
                return TypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_BTTEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims>.GetConversionActionTo_List_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<BTTKeyValuePair>>> ITypeConverter<BTTEncryptedClaims>.Enumerate_List_List_BTTKeyValuePair(BTTEncryptedClaims value)
            {
                
                yield break;
            }
            BTTEncryptedClaims ITypeConverter<BTTEncryptedClaims>.ConvertFrom_List_BTTClaim(List<BTTClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTClaim>' to 'BTTEncryptedClaims'.");
                
            }
            List<BTTClaim> ITypeConverter<BTTEncryptedClaims>.ConvertTo_List_BTTClaim(BTTEncryptedClaims value)
            {
                return TypeConverter<List<BTTClaim>>.ConvertFrom_BTTEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims>.GetConversionActionTo_List_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTClaim>> ITypeConverter<BTTEncryptedClaims>.Enumerate_List_BTTClaim(BTTEncryptedClaims value)
            {
                
                yield break;
            }
            BTTEncryptedClaims ITypeConverter<BTTEncryptedClaims>.ConvertFrom_BTTEncryptedClaims_nullable(BTTEncryptedClaims? value)
            {
                
                return TypeConverter<BTTEncryptedClaims>.ConvertFrom_BTTEncryptedClaims(value.Value);
                
            }
            BTTEncryptedClaims? ITypeConverter<BTTEncryptedClaims>.ConvertTo_BTTEncryptedClaims_nullable(BTTEncryptedClaims value)
            {
                return TypeConverter<BTTEncryptedClaims?>.ConvertFrom_BTTEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims>.GetConversionActionTo_BTTEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims?> ITypeConverter<BTTEncryptedClaims>.Enumerate_BTTEncryptedClaims_nullable(BTTEncryptedClaims value)
            {
                
                yield break;
            }
            BTTEncryptedClaims ITypeConverter<BTTEncryptedClaims>.ConvertFrom_BTTNFE_N4K_Claims_nullable(BTTNFE_N4K_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims?' to 'BTTEncryptedClaims'.");
                
            }
            BTTNFE_N4K_Claims? ITypeConverter<BTTEncryptedClaims>.ConvertTo_BTTNFE_N4K_Claims_nullable(BTTEncryptedClaims value)
            {
                return TypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_BTTEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims>.GetConversionActionTo_BTTNFE_N4K_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims?> ITypeConverter<BTTEncryptedClaims>.Enumerate_BTTNFE_N4K_Claims_nullable(BTTEncryptedClaims value)
            {
                
                yield break;
            }
            BTTGenericCredential_Envelope ITypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'BTTGenericCredential_Envelope'.");
                
            }
            bool ITypeConverter<BTTGenericCredential_Envelope>.ConvertTo_bool(BTTGenericCredential_Envelope value)
            {
                return TypeConverter<bool>.ConvertFrom_BTTGenericCredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_Envelope>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<BTTGenericCredential_Envelope>.Enumerate_bool(BTTGenericCredential_Envelope value)
            {
                
                yield break;
            }
            BTTGenericCredential_Envelope ITypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_int(int value)
            {
                
                throw new InvalidCastException("Invalid cast from 'int' to 'BTTGenericCredential_Envelope'.");
                
            }
            int ITypeConverter<BTTGenericCredential_Envelope>.ConvertTo_int(BTTGenericCredential_Envelope value)
            {
                return TypeConverter<int>.ConvertFrom_BTTGenericCredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_Envelope>.GetConversionActionTo_int()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int> ITypeConverter<BTTGenericCredential_Envelope>.Enumerate_int(BTTGenericCredential_Envelope value)
            {
                
                yield break;
            }
            BTTGenericCredential_Envelope ITypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'BTTGenericCredential_Envelope'.");
                
            }
            long ITypeConverter<BTTGenericCredential_Envelope>.ConvertTo_long(BTTGenericCredential_Envelope value)
            {
                return TypeConverter<long>.ConvertFrom_BTTGenericCredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_Envelope>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<BTTGenericCredential_Envelope>.Enumerate_long(BTTGenericCredential_Envelope value)
            {
                
                yield break;
            }
            BTTGenericCredential_Envelope ITypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_DateTime(DateTime value)
            {
                
                throw new InvalidCastException("Invalid cast from 'DateTime' to 'BTTGenericCredential_Envelope'.");
                
            }
            DateTime ITypeConverter<BTTGenericCredential_Envelope>.ConvertTo_DateTime(BTTGenericCredential_Envelope value)
            {
                return TypeConverter<DateTime>.ConvertFrom_BTTGenericCredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_Envelope>.GetConversionActionTo_DateTime()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<DateTime> ITypeConverter<BTTGenericCredential_Envelope>.Enumerate_DateTime(BTTGenericCredential_Envelope value)
            {
                
                yield break;
            }
            BTTGenericCredential_Envelope ITypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    BTTGenericCredential_Envelope intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = BTTGenericCredential_Envelope.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "BTTGenericCredential_Envelope");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<BTTGenericCredential_Envelope>.ConvertTo_string(BTTGenericCredential_Envelope value)
            {
                return TypeConverter<string>.ConvertFrom_BTTGenericCredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_Envelope>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<BTTGenericCredential_Envelope>.Enumerate_string(BTTGenericCredential_Envelope value)
            {
                
                yield break;
            }
            BTTGenericCredential_Envelope ITypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_int_Array_150(int[] value)
            {
                
                throw new InvalidCastException("Invalid cast from 'int[]' to 'BTTGenericCredential_Envelope'.");
                
            }
            int[] ITypeConverter<BTTGenericCredential_Envelope>.ConvertTo_int_Array_150(BTTGenericCredential_Envelope value)
            {
                return TypeConverter<int[]>.ConvertFrom_BTTGenericCredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_Envelope>.GetConversionActionTo_int_Array_150()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int[]> ITypeConverter<BTTGenericCredential_Envelope>.Enumerate_int_Array_150(BTTGenericCredential_Envelope value)
            {
                
                yield break;
            }
            BTTGenericCredential_Envelope ITypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_List_long(List<long> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<long>' to 'BTTGenericCredential_Envelope'.");
                
            }
            List<long> ITypeConverter<BTTGenericCredential_Envelope>.ConvertTo_List_long(BTTGenericCredential_Envelope value)
            {
                return TypeConverter<List<long>>.ConvertFrom_BTTGenericCredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_Envelope>.GetConversionActionTo_List_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<long>> ITypeConverter<BTTGenericCredential_Envelope>.Enumerate_List_long(BTTGenericCredential_Envelope value)
            {
                
                yield break;
            }
            BTTGenericCredential_Envelope ITypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'BTTGenericCredential_Envelope'.");
                
            }
            List<string> ITypeConverter<BTTGenericCredential_Envelope>.ConvertTo_List_string(BTTGenericCredential_Envelope value)
            {
                return TypeConverter<List<string>>.ConvertFrom_BTTGenericCredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_Envelope>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<BTTGenericCredential_Envelope>.Enumerate_List_string(BTTGenericCredential_Envelope value)
            {
                
                yield break;
            }
            BTTGenericCredential_Envelope ITypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_List_BTTKeyValuePair(List<BTTKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTKeyValuePair>' to 'BTTGenericCredential_Envelope'.");
                
            }
            List<BTTKeyValuePair> ITypeConverter<BTTGenericCredential_Envelope>.ConvertTo_List_BTTKeyValuePair(BTTGenericCredential_Envelope value)
            {
                return TypeConverter<List<BTTKeyValuePair>>.ConvertFrom_BTTGenericCredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_Envelope>.GetConversionActionTo_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTKeyValuePair>> ITypeConverter<BTTGenericCredential_Envelope>.Enumerate_List_BTTKeyValuePair(BTTGenericCredential_Envelope value)
            {
                
                yield break;
            }
            BTTGenericCredential_Envelope ITypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_BTTClaim(BTTClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTClaim' to 'BTTGenericCredential_Envelope'.");
                
            }
            BTTClaim ITypeConverter<BTTGenericCredential_Envelope>.ConvertTo_BTTClaim(BTTGenericCredential_Envelope value)
            {
                return TypeConverter<BTTClaim>.ConvertFrom_BTTGenericCredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_Envelope>.GetConversionActionTo_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTClaim> ITypeConverter<BTTGenericCredential_Envelope>.Enumerate_BTTClaim(BTTGenericCredential_Envelope value)
            {
                
                yield break;
            }
            BTTGenericCredential_Envelope ITypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_BTTEncryptedClaims(BTTEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims' to 'BTTGenericCredential_Envelope'.");
                
            }
            BTTEncryptedClaims ITypeConverter<BTTGenericCredential_Envelope>.ConvertTo_BTTEncryptedClaims(BTTGenericCredential_Envelope value)
            {
                return TypeConverter<BTTEncryptedClaims>.ConvertFrom_BTTGenericCredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_Envelope>.GetConversionActionTo_BTTEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims> ITypeConverter<BTTGenericCredential_Envelope>.Enumerate_BTTEncryptedClaims(BTTGenericCredential_Envelope value)
            {
                
                yield break;
            }
            BTTGenericCredential_Envelope ITypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_BTTGenericCredential_Envelope(BTTGenericCredential_Envelope value)
            {
                
                return (BTTGenericCredential_Envelope)value;
                
            }
            BTTGenericCredential_Envelope ITypeConverter<BTTGenericCredential_Envelope>.ConvertTo_BTTGenericCredential_Envelope(BTTGenericCredential_Envelope value)
            {
                return TypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_BTTGenericCredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_Envelope>.GetConversionActionTo_BTTGenericCredential_Envelope()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_Envelope> ITypeConverter<BTTGenericCredential_Envelope>.Enumerate_BTTGenericCredential_Envelope(BTTGenericCredential_Envelope value)
            {
                
                yield break;
            }
            BTTGenericCredential_Envelope ITypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_BTTGenericCredential_EnvelopeContent(BTTGenericCredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeContent' to 'BTTGenericCredential_Envelope'.");
                
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<BTTGenericCredential_Envelope>.ConvertTo_BTTGenericCredential_EnvelopeContent(BTTGenericCredential_Envelope value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_BTTGenericCredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_Envelope>.GetConversionActionTo_BTTGenericCredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeContent> ITypeConverter<BTTGenericCredential_Envelope>.Enumerate_BTTGenericCredential_EnvelopeContent(BTTGenericCredential_Envelope value)
            {
                
                yield break;
            }
            BTTGenericCredential_Envelope ITypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(BTTGenericCredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeSeal' to 'BTTGenericCredential_Envelope'.");
                
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<BTTGenericCredential_Envelope>.ConvertTo_BTTGenericCredential_EnvelopeSeal(BTTGenericCredential_Envelope value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_BTTGenericCredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_Envelope>.GetConversionActionTo_BTTGenericCredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeSeal> ITypeConverter<BTTGenericCredential_Envelope>.Enumerate_BTTGenericCredential_EnvelopeSeal(BTTGenericCredential_Envelope value)
            {
                
                yield break;
            }
            BTTGenericCredential_Envelope ITypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_BTTGenericCredential_PackingLabel(BTTGenericCredential_PackingLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_PackingLabel' to 'BTTGenericCredential_Envelope'.");
                
            }
            BTTGenericCredential_PackingLabel ITypeConverter<BTTGenericCredential_Envelope>.ConvertTo_BTTGenericCredential_PackingLabel(BTTGenericCredential_Envelope value)
            {
                return TypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_BTTGenericCredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_Envelope>.GetConversionActionTo_BTTGenericCredential_PackingLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_PackingLabel> ITypeConverter<BTTGenericCredential_Envelope>.Enumerate_BTTGenericCredential_PackingLabel(BTTGenericCredential_Envelope value)
            {
                
                yield break;
            }
            BTTGenericCredential_Envelope ITypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_BTTKeyValuePair(BTTKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTKeyValuePair' to 'BTTGenericCredential_Envelope'.");
                
            }
            BTTKeyValuePair ITypeConverter<BTTGenericCredential_Envelope>.ConvertTo_BTTKeyValuePair(BTTGenericCredential_Envelope value)
            {
                return TypeConverter<BTTKeyValuePair>.ConvertFrom_BTTGenericCredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_Envelope>.GetConversionActionTo_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTKeyValuePair> ITypeConverter<BTTGenericCredential_Envelope>.Enumerate_BTTKeyValuePair(BTTGenericCredential_Envelope value)
            {
                
                yield break;
            }
            BTTGenericCredential_Envelope ITypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_BTTNFE_N4K_Claims(BTTNFE_N4K_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims' to 'BTTGenericCredential_Envelope'.");
                
            }
            BTTNFE_N4K_Claims ITypeConverter<BTTGenericCredential_Envelope>.ConvertTo_BTTNFE_N4K_Claims(BTTGenericCredential_Envelope value)
            {
                return TypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_BTTGenericCredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_Envelope>.GetConversionActionTo_BTTNFE_N4K_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims> ITypeConverter<BTTGenericCredential_Envelope>.Enumerate_BTTNFE_N4K_Claims(BTTGenericCredential_Envelope value)
            {
                
                yield break;
            }
            BTTGenericCredential_Envelope ITypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_BTTNFE_N4K_Envelope(BTTNFE_N4K_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Envelope' to 'BTTGenericCredential_Envelope'.");
                
            }
            BTTNFE_N4K_Envelope ITypeConverter<BTTGenericCredential_Envelope>.ConvertTo_BTTNFE_N4K_Envelope(BTTGenericCredential_Envelope value)
            {
                return TypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_BTTGenericCredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_Envelope>.GetConversionActionTo_BTTNFE_N4K_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Envelope> ITypeConverter<BTTGenericCredential_Envelope>.Enumerate_BTTNFE_N4K_Envelope(BTTGenericCredential_Envelope value)
            {
                
                yield break;
            }
            BTTGenericCredential_Envelope ITypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(BTTNFE_N4K_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_EnvelopeContent' to 'BTTGenericCredential_Envelope'.");
                
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<BTTGenericCredential_Envelope>.ConvertTo_BTTNFE_N4K_EnvelopeContent(BTTGenericCredential_Envelope value)
            {
                return TypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_BTTGenericCredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_Envelope>.GetConversionActionTo_BTTNFE_N4K_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_EnvelopeContent> ITypeConverter<BTTGenericCredential_Envelope>.Enumerate_BTTNFE_N4K_EnvelopeContent(BTTGenericCredential_Envelope value)
            {
                
                yield break;
            }
            BTTGenericCredential_Envelope ITypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(BTTNFE_N4K_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_SealedEnvelope' to 'BTTGenericCredential_Envelope'.");
                
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<BTTGenericCredential_Envelope>.ConvertTo_BTTNFE_N4K_SealedEnvelope(BTTGenericCredential_Envelope value)
            {
                return TypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_BTTGenericCredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_Envelope>.GetConversionActionTo_BTTNFE_N4K_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_SealedEnvelope> ITypeConverter<BTTGenericCredential_Envelope>.Enumerate_BTTNFE_N4K_SealedEnvelope(BTTGenericCredential_Envelope value)
            {
                
                yield break;
            }
            BTTGenericCredential_Envelope ITypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTVerifiableCredential_SealedEnvelope' to 'BTTGenericCredential_Envelope'.");
                
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<BTTGenericCredential_Envelope>.ConvertTo_BTTVerifiableCredential_SealedEnvelope(BTTGenericCredential_Envelope value)
            {
                return TypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_BTTGenericCredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_Envelope>.GetConversionActionTo_BTTVerifiableCredential_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTVerifiableCredential_SealedEnvelope> ITypeConverter<BTTGenericCredential_Envelope>.Enumerate_BTTVerifiableCredential_SealedEnvelope(BTTGenericCredential_Envelope value)
            {
                
                yield break;
            }
            BTTGenericCredential_Envelope ITypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_BTTEncryptionFlag(BTTEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptionFlag' to 'BTTGenericCredential_Envelope'.");
                
            }
            BTTEncryptionFlag ITypeConverter<BTTGenericCredential_Envelope>.ConvertTo_BTTEncryptionFlag(BTTGenericCredential_Envelope value)
            {
                return TypeConverter<BTTEncryptionFlag>.ConvertFrom_BTTGenericCredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_Envelope>.GetConversionActionTo_BTTEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptionFlag> ITypeConverter<BTTGenericCredential_Envelope>.Enumerate_BTTEncryptionFlag(BTTGenericCredential_Envelope value)
            {
                
                yield break;
            }
            BTTGenericCredential_Envelope ITypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_BTTGenericCredentialType(BTTGenericCredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredentialType' to 'BTTGenericCredential_Envelope'.");
                
            }
            BTTGenericCredentialType ITypeConverter<BTTGenericCredential_Envelope>.ConvertTo_BTTGenericCredentialType(BTTGenericCredential_Envelope value)
            {
                return TypeConverter<BTTGenericCredentialType>.ConvertFrom_BTTGenericCredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_Envelope>.GetConversionActionTo_BTTGenericCredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredentialType> ITypeConverter<BTTGenericCredential_Envelope>.Enumerate_BTTGenericCredentialType(BTTGenericCredential_Envelope value)
            {
                
                yield break;
            }
            BTTGenericCredential_Envelope ITypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_BTTNFEBodyPart(BTTNFEBodyPart value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFEBodyPart' to 'BTTGenericCredential_Envelope'.");
                
            }
            BTTNFEBodyPart ITypeConverter<BTTGenericCredential_Envelope>.ConvertTo_BTTNFEBodyPart(BTTGenericCredential_Envelope value)
            {
                return TypeConverter<BTTNFEBodyPart>.ConvertFrom_BTTGenericCredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_Envelope>.GetConversionActionTo_BTTNFEBodyPart()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFEBodyPart> ITypeConverter<BTTGenericCredential_Envelope>.Enumerate_BTTNFEBodyPart(BTTGenericCredential_Envelope value)
            {
                
                yield break;
            }
            BTTGenericCredential_Envelope ITypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_BTTTrustLevel(BTTTrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTTrustLevel' to 'BTTGenericCredential_Envelope'.");
                
            }
            BTTTrustLevel ITypeConverter<BTTGenericCredential_Envelope>.ConvertTo_BTTTrustLevel(BTTGenericCredential_Envelope value)
            {
                return TypeConverter<BTTTrustLevel>.ConvertFrom_BTTGenericCredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_Envelope>.GetConversionActionTo_BTTTrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTTrustLevel> ITypeConverter<BTTGenericCredential_Envelope>.Enumerate_BTTTrustLevel(BTTGenericCredential_Envelope value)
            {
                
                yield break;
            }
            BTTGenericCredential_Envelope ITypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_List_List_BTTKeyValuePair(List<List<BTTKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<BTTKeyValuePair>>' to 'BTTGenericCredential_Envelope'.");
                
            }
            List<List<BTTKeyValuePair>> ITypeConverter<BTTGenericCredential_Envelope>.ConvertTo_List_List_BTTKeyValuePair(BTTGenericCredential_Envelope value)
            {
                return TypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_BTTGenericCredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_Envelope>.GetConversionActionTo_List_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<BTTKeyValuePair>>> ITypeConverter<BTTGenericCredential_Envelope>.Enumerate_List_List_BTTKeyValuePair(BTTGenericCredential_Envelope value)
            {
                
                yield break;
            }
            BTTGenericCredential_Envelope ITypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_List_BTTClaim(List<BTTClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTClaim>' to 'BTTGenericCredential_Envelope'.");
                
            }
            List<BTTClaim> ITypeConverter<BTTGenericCredential_Envelope>.ConvertTo_List_BTTClaim(BTTGenericCredential_Envelope value)
            {
                return TypeConverter<List<BTTClaim>>.ConvertFrom_BTTGenericCredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_Envelope>.GetConversionActionTo_List_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTClaim>> ITypeConverter<BTTGenericCredential_Envelope>.Enumerate_List_BTTClaim(BTTGenericCredential_Envelope value)
            {
                
                yield break;
            }
            BTTGenericCredential_Envelope ITypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_BTTEncryptedClaims_nullable(BTTEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims?' to 'BTTGenericCredential_Envelope'.");
                
            }
            BTTEncryptedClaims? ITypeConverter<BTTGenericCredential_Envelope>.ConvertTo_BTTEncryptedClaims_nullable(BTTGenericCredential_Envelope value)
            {
                return TypeConverter<BTTEncryptedClaims?>.ConvertFrom_BTTGenericCredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_Envelope>.GetConversionActionTo_BTTEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims?> ITypeConverter<BTTGenericCredential_Envelope>.Enumerate_BTTEncryptedClaims_nullable(BTTGenericCredential_Envelope value)
            {
                
                yield break;
            }
            BTTGenericCredential_Envelope ITypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_BTTNFE_N4K_Claims_nullable(BTTNFE_N4K_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims?' to 'BTTGenericCredential_Envelope'.");
                
            }
            BTTNFE_N4K_Claims? ITypeConverter<BTTGenericCredential_Envelope>.ConvertTo_BTTNFE_N4K_Claims_nullable(BTTGenericCredential_Envelope value)
            {
                return TypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_BTTGenericCredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_Envelope>.GetConversionActionTo_BTTNFE_N4K_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims?> ITypeConverter<BTTGenericCredential_Envelope>.Enumerate_BTTNFE_N4K_Claims_nullable(BTTGenericCredential_Envelope value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'BTTGenericCredential_EnvelopeContent'.");
                
            }
            bool ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertTo_bool(BTTGenericCredential_EnvelopeContent value)
            {
                return TypeConverter<bool>.ConvertFrom_BTTGenericCredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeContent>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<BTTGenericCredential_EnvelopeContent>.Enumerate_bool(BTTGenericCredential_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_int(int value)
            {
                
                throw new InvalidCastException("Invalid cast from 'int' to 'BTTGenericCredential_EnvelopeContent'.");
                
            }
            int ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertTo_int(BTTGenericCredential_EnvelopeContent value)
            {
                return TypeConverter<int>.ConvertFrom_BTTGenericCredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeContent>.GetConversionActionTo_int()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int> ITypeConverter<BTTGenericCredential_EnvelopeContent>.Enumerate_int(BTTGenericCredential_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'BTTGenericCredential_EnvelopeContent'.");
                
            }
            long ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertTo_long(BTTGenericCredential_EnvelopeContent value)
            {
                return TypeConverter<long>.ConvertFrom_BTTGenericCredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeContent>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<BTTGenericCredential_EnvelopeContent>.Enumerate_long(BTTGenericCredential_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_DateTime(DateTime value)
            {
                
                throw new InvalidCastException("Invalid cast from 'DateTime' to 'BTTGenericCredential_EnvelopeContent'.");
                
            }
            DateTime ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertTo_DateTime(BTTGenericCredential_EnvelopeContent value)
            {
                return TypeConverter<DateTime>.ConvertFrom_BTTGenericCredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeContent>.GetConversionActionTo_DateTime()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<DateTime> ITypeConverter<BTTGenericCredential_EnvelopeContent>.Enumerate_DateTime(BTTGenericCredential_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    BTTGenericCredential_EnvelopeContent intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = BTTGenericCredential_EnvelopeContent.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "BTTGenericCredential_EnvelopeContent");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertTo_string(BTTGenericCredential_EnvelopeContent value)
            {
                return TypeConverter<string>.ConvertFrom_BTTGenericCredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeContent>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<BTTGenericCredential_EnvelopeContent>.Enumerate_string(BTTGenericCredential_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_int_Array_150(int[] value)
            {
                
                throw new InvalidCastException("Invalid cast from 'int[]' to 'BTTGenericCredential_EnvelopeContent'.");
                
            }
            int[] ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertTo_int_Array_150(BTTGenericCredential_EnvelopeContent value)
            {
                return TypeConverter<int[]>.ConvertFrom_BTTGenericCredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeContent>.GetConversionActionTo_int_Array_150()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int[]> ITypeConverter<BTTGenericCredential_EnvelopeContent>.Enumerate_int_Array_150(BTTGenericCredential_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_List_long(List<long> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<long>' to 'BTTGenericCredential_EnvelopeContent'.");
                
            }
            List<long> ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertTo_List_long(BTTGenericCredential_EnvelopeContent value)
            {
                return TypeConverter<List<long>>.ConvertFrom_BTTGenericCredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeContent>.GetConversionActionTo_List_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<long>> ITypeConverter<BTTGenericCredential_EnvelopeContent>.Enumerate_List_long(BTTGenericCredential_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'BTTGenericCredential_EnvelopeContent'.");
                
            }
            List<string> ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertTo_List_string(BTTGenericCredential_EnvelopeContent value)
            {
                return TypeConverter<List<string>>.ConvertFrom_BTTGenericCredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeContent>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<BTTGenericCredential_EnvelopeContent>.Enumerate_List_string(BTTGenericCredential_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_List_BTTKeyValuePair(List<BTTKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTKeyValuePair>' to 'BTTGenericCredential_EnvelopeContent'.");
                
            }
            List<BTTKeyValuePair> ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertTo_List_BTTKeyValuePair(BTTGenericCredential_EnvelopeContent value)
            {
                return TypeConverter<List<BTTKeyValuePair>>.ConvertFrom_BTTGenericCredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeContent>.GetConversionActionTo_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTKeyValuePair>> ITypeConverter<BTTGenericCredential_EnvelopeContent>.Enumerate_List_BTTKeyValuePair(BTTGenericCredential_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_BTTClaim(BTTClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTClaim' to 'BTTGenericCredential_EnvelopeContent'.");
                
            }
            BTTClaim ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertTo_BTTClaim(BTTGenericCredential_EnvelopeContent value)
            {
                return TypeConverter<BTTClaim>.ConvertFrom_BTTGenericCredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeContent>.GetConversionActionTo_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTClaim> ITypeConverter<BTTGenericCredential_EnvelopeContent>.Enumerate_BTTClaim(BTTGenericCredential_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_BTTEncryptedClaims(BTTEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims' to 'BTTGenericCredential_EnvelopeContent'.");
                
            }
            BTTEncryptedClaims ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertTo_BTTEncryptedClaims(BTTGenericCredential_EnvelopeContent value)
            {
                return TypeConverter<BTTEncryptedClaims>.ConvertFrom_BTTGenericCredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeContent>.GetConversionActionTo_BTTEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims> ITypeConverter<BTTGenericCredential_EnvelopeContent>.Enumerate_BTTEncryptedClaims(BTTGenericCredential_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_BTTGenericCredential_Envelope(BTTGenericCredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_Envelope' to 'BTTGenericCredential_EnvelopeContent'.");
                
            }
            BTTGenericCredential_Envelope ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertTo_BTTGenericCredential_Envelope(BTTGenericCredential_EnvelopeContent value)
            {
                return TypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_BTTGenericCredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeContent>.GetConversionActionTo_BTTGenericCredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_Envelope> ITypeConverter<BTTGenericCredential_EnvelopeContent>.Enumerate_BTTGenericCredential_Envelope(BTTGenericCredential_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_BTTGenericCredential_EnvelopeContent(BTTGenericCredential_EnvelopeContent value)
            {
                
                return (BTTGenericCredential_EnvelopeContent)value;
                
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertTo_BTTGenericCredential_EnvelopeContent(BTTGenericCredential_EnvelopeContent value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_BTTGenericCredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeContent>.GetConversionActionTo_BTTGenericCredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeContent> ITypeConverter<BTTGenericCredential_EnvelopeContent>.Enumerate_BTTGenericCredential_EnvelopeContent(BTTGenericCredential_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(BTTGenericCredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeSeal' to 'BTTGenericCredential_EnvelopeContent'.");
                
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertTo_BTTGenericCredential_EnvelopeSeal(BTTGenericCredential_EnvelopeContent value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_BTTGenericCredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeContent>.GetConversionActionTo_BTTGenericCredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeSeal> ITypeConverter<BTTGenericCredential_EnvelopeContent>.Enumerate_BTTGenericCredential_EnvelopeSeal(BTTGenericCredential_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_BTTGenericCredential_PackingLabel(BTTGenericCredential_PackingLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_PackingLabel' to 'BTTGenericCredential_EnvelopeContent'.");
                
            }
            BTTGenericCredential_PackingLabel ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertTo_BTTGenericCredential_PackingLabel(BTTGenericCredential_EnvelopeContent value)
            {
                return TypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_BTTGenericCredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeContent>.GetConversionActionTo_BTTGenericCredential_PackingLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_PackingLabel> ITypeConverter<BTTGenericCredential_EnvelopeContent>.Enumerate_BTTGenericCredential_PackingLabel(BTTGenericCredential_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_BTTKeyValuePair(BTTKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTKeyValuePair' to 'BTTGenericCredential_EnvelopeContent'.");
                
            }
            BTTKeyValuePair ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertTo_BTTKeyValuePair(BTTGenericCredential_EnvelopeContent value)
            {
                return TypeConverter<BTTKeyValuePair>.ConvertFrom_BTTGenericCredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeContent>.GetConversionActionTo_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTKeyValuePair> ITypeConverter<BTTGenericCredential_EnvelopeContent>.Enumerate_BTTKeyValuePair(BTTGenericCredential_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_BTTNFE_N4K_Claims(BTTNFE_N4K_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims' to 'BTTGenericCredential_EnvelopeContent'.");
                
            }
            BTTNFE_N4K_Claims ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertTo_BTTNFE_N4K_Claims(BTTGenericCredential_EnvelopeContent value)
            {
                return TypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_BTTGenericCredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeContent>.GetConversionActionTo_BTTNFE_N4K_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims> ITypeConverter<BTTGenericCredential_EnvelopeContent>.Enumerate_BTTNFE_N4K_Claims(BTTGenericCredential_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_BTTNFE_N4K_Envelope(BTTNFE_N4K_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Envelope' to 'BTTGenericCredential_EnvelopeContent'.");
                
            }
            BTTNFE_N4K_Envelope ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertTo_BTTNFE_N4K_Envelope(BTTGenericCredential_EnvelopeContent value)
            {
                return TypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_BTTGenericCredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeContent>.GetConversionActionTo_BTTNFE_N4K_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Envelope> ITypeConverter<BTTGenericCredential_EnvelopeContent>.Enumerate_BTTNFE_N4K_Envelope(BTTGenericCredential_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(BTTNFE_N4K_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_EnvelopeContent' to 'BTTGenericCredential_EnvelopeContent'.");
                
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertTo_BTTNFE_N4K_EnvelopeContent(BTTGenericCredential_EnvelopeContent value)
            {
                return TypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_BTTGenericCredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeContent>.GetConversionActionTo_BTTNFE_N4K_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_EnvelopeContent> ITypeConverter<BTTGenericCredential_EnvelopeContent>.Enumerate_BTTNFE_N4K_EnvelopeContent(BTTGenericCredential_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(BTTNFE_N4K_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_SealedEnvelope' to 'BTTGenericCredential_EnvelopeContent'.");
                
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertTo_BTTNFE_N4K_SealedEnvelope(BTTGenericCredential_EnvelopeContent value)
            {
                return TypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_BTTGenericCredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeContent>.GetConversionActionTo_BTTNFE_N4K_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_SealedEnvelope> ITypeConverter<BTTGenericCredential_EnvelopeContent>.Enumerate_BTTNFE_N4K_SealedEnvelope(BTTGenericCredential_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTVerifiableCredential_SealedEnvelope' to 'BTTGenericCredential_EnvelopeContent'.");
                
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertTo_BTTVerifiableCredential_SealedEnvelope(BTTGenericCredential_EnvelopeContent value)
            {
                return TypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_BTTGenericCredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeContent>.GetConversionActionTo_BTTVerifiableCredential_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTVerifiableCredential_SealedEnvelope> ITypeConverter<BTTGenericCredential_EnvelopeContent>.Enumerate_BTTVerifiableCredential_SealedEnvelope(BTTGenericCredential_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_BTTEncryptionFlag(BTTEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptionFlag' to 'BTTGenericCredential_EnvelopeContent'.");
                
            }
            BTTEncryptionFlag ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertTo_BTTEncryptionFlag(BTTGenericCredential_EnvelopeContent value)
            {
                return TypeConverter<BTTEncryptionFlag>.ConvertFrom_BTTGenericCredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeContent>.GetConversionActionTo_BTTEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptionFlag> ITypeConverter<BTTGenericCredential_EnvelopeContent>.Enumerate_BTTEncryptionFlag(BTTGenericCredential_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_BTTGenericCredentialType(BTTGenericCredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredentialType' to 'BTTGenericCredential_EnvelopeContent'.");
                
            }
            BTTGenericCredentialType ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertTo_BTTGenericCredentialType(BTTGenericCredential_EnvelopeContent value)
            {
                return TypeConverter<BTTGenericCredentialType>.ConvertFrom_BTTGenericCredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeContent>.GetConversionActionTo_BTTGenericCredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredentialType> ITypeConverter<BTTGenericCredential_EnvelopeContent>.Enumerate_BTTGenericCredentialType(BTTGenericCredential_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_BTTNFEBodyPart(BTTNFEBodyPart value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFEBodyPart' to 'BTTGenericCredential_EnvelopeContent'.");
                
            }
            BTTNFEBodyPart ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertTo_BTTNFEBodyPart(BTTGenericCredential_EnvelopeContent value)
            {
                return TypeConverter<BTTNFEBodyPart>.ConvertFrom_BTTGenericCredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeContent>.GetConversionActionTo_BTTNFEBodyPart()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFEBodyPart> ITypeConverter<BTTGenericCredential_EnvelopeContent>.Enumerate_BTTNFEBodyPart(BTTGenericCredential_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_BTTTrustLevel(BTTTrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTTrustLevel' to 'BTTGenericCredential_EnvelopeContent'.");
                
            }
            BTTTrustLevel ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertTo_BTTTrustLevel(BTTGenericCredential_EnvelopeContent value)
            {
                return TypeConverter<BTTTrustLevel>.ConvertFrom_BTTGenericCredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeContent>.GetConversionActionTo_BTTTrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTTrustLevel> ITypeConverter<BTTGenericCredential_EnvelopeContent>.Enumerate_BTTTrustLevel(BTTGenericCredential_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_List_List_BTTKeyValuePair(List<List<BTTKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<BTTKeyValuePair>>' to 'BTTGenericCredential_EnvelopeContent'.");
                
            }
            List<List<BTTKeyValuePair>> ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertTo_List_List_BTTKeyValuePair(BTTGenericCredential_EnvelopeContent value)
            {
                return TypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_BTTGenericCredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeContent>.GetConversionActionTo_List_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<BTTKeyValuePair>>> ITypeConverter<BTTGenericCredential_EnvelopeContent>.Enumerate_List_List_BTTKeyValuePair(BTTGenericCredential_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_List_BTTClaim(List<BTTClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTClaim>' to 'BTTGenericCredential_EnvelopeContent'.");
                
            }
            List<BTTClaim> ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertTo_List_BTTClaim(BTTGenericCredential_EnvelopeContent value)
            {
                return TypeConverter<List<BTTClaim>>.ConvertFrom_BTTGenericCredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeContent>.GetConversionActionTo_List_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTClaim>> ITypeConverter<BTTGenericCredential_EnvelopeContent>.Enumerate_List_BTTClaim(BTTGenericCredential_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_BTTEncryptedClaims_nullable(BTTEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims?' to 'BTTGenericCredential_EnvelopeContent'.");
                
            }
            BTTEncryptedClaims? ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertTo_BTTEncryptedClaims_nullable(BTTGenericCredential_EnvelopeContent value)
            {
                return TypeConverter<BTTEncryptedClaims?>.ConvertFrom_BTTGenericCredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeContent>.GetConversionActionTo_BTTEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims?> ITypeConverter<BTTGenericCredential_EnvelopeContent>.Enumerate_BTTEncryptedClaims_nullable(BTTGenericCredential_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_BTTNFE_N4K_Claims_nullable(BTTNFE_N4K_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims?' to 'BTTGenericCredential_EnvelopeContent'.");
                
            }
            BTTNFE_N4K_Claims? ITypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertTo_BTTNFE_N4K_Claims_nullable(BTTGenericCredential_EnvelopeContent value)
            {
                return TypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_BTTGenericCredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeContent>.GetConversionActionTo_BTTNFE_N4K_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims?> ITypeConverter<BTTGenericCredential_EnvelopeContent>.Enumerate_BTTNFE_N4K_Claims_nullable(BTTGenericCredential_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'BTTGenericCredential_EnvelopeSeal'.");
                
            }
            bool ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertTo_bool(BTTGenericCredential_EnvelopeSeal value)
            {
                return TypeConverter<bool>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeSeal>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<BTTGenericCredential_EnvelopeSeal>.Enumerate_bool(BTTGenericCredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_int(int value)
            {
                
                throw new InvalidCastException("Invalid cast from 'int' to 'BTTGenericCredential_EnvelopeSeal'.");
                
            }
            int ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertTo_int(BTTGenericCredential_EnvelopeSeal value)
            {
                return TypeConverter<int>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeSeal>.GetConversionActionTo_int()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int> ITypeConverter<BTTGenericCredential_EnvelopeSeal>.Enumerate_int(BTTGenericCredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'BTTGenericCredential_EnvelopeSeal'.");
                
            }
            long ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertTo_long(BTTGenericCredential_EnvelopeSeal value)
            {
                return TypeConverter<long>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeSeal>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<BTTGenericCredential_EnvelopeSeal>.Enumerate_long(BTTGenericCredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_DateTime(DateTime value)
            {
                
                throw new InvalidCastException("Invalid cast from 'DateTime' to 'BTTGenericCredential_EnvelopeSeal'.");
                
            }
            DateTime ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertTo_DateTime(BTTGenericCredential_EnvelopeSeal value)
            {
                return TypeConverter<DateTime>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeSeal>.GetConversionActionTo_DateTime()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<DateTime> ITypeConverter<BTTGenericCredential_EnvelopeSeal>.Enumerate_DateTime(BTTGenericCredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    BTTGenericCredential_EnvelopeSeal intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = BTTGenericCredential_EnvelopeSeal.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "BTTGenericCredential_EnvelopeSeal");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertTo_string(BTTGenericCredential_EnvelopeSeal value)
            {
                return TypeConverter<string>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeSeal>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<BTTGenericCredential_EnvelopeSeal>.Enumerate_string(BTTGenericCredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_int_Array_150(int[] value)
            {
                
                throw new InvalidCastException("Invalid cast from 'int[]' to 'BTTGenericCredential_EnvelopeSeal'.");
                
            }
            int[] ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertTo_int_Array_150(BTTGenericCredential_EnvelopeSeal value)
            {
                return TypeConverter<int[]>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeSeal>.GetConversionActionTo_int_Array_150()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int[]> ITypeConverter<BTTGenericCredential_EnvelopeSeal>.Enumerate_int_Array_150(BTTGenericCredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_List_long(List<long> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<long>' to 'BTTGenericCredential_EnvelopeSeal'.");
                
            }
            List<long> ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertTo_List_long(BTTGenericCredential_EnvelopeSeal value)
            {
                return TypeConverter<List<long>>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeSeal>.GetConversionActionTo_List_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<long>> ITypeConverter<BTTGenericCredential_EnvelopeSeal>.Enumerate_List_long(BTTGenericCredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'BTTGenericCredential_EnvelopeSeal'.");
                
            }
            List<string> ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertTo_List_string(BTTGenericCredential_EnvelopeSeal value)
            {
                return TypeConverter<List<string>>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeSeal>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<BTTGenericCredential_EnvelopeSeal>.Enumerate_List_string(BTTGenericCredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_List_BTTKeyValuePair(List<BTTKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTKeyValuePair>' to 'BTTGenericCredential_EnvelopeSeal'.");
                
            }
            List<BTTKeyValuePair> ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertTo_List_BTTKeyValuePair(BTTGenericCredential_EnvelopeSeal value)
            {
                return TypeConverter<List<BTTKeyValuePair>>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeSeal>.GetConversionActionTo_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTKeyValuePair>> ITypeConverter<BTTGenericCredential_EnvelopeSeal>.Enumerate_List_BTTKeyValuePair(BTTGenericCredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_BTTClaim(BTTClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTClaim' to 'BTTGenericCredential_EnvelopeSeal'.");
                
            }
            BTTClaim ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertTo_BTTClaim(BTTGenericCredential_EnvelopeSeal value)
            {
                return TypeConverter<BTTClaim>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeSeal>.GetConversionActionTo_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTClaim> ITypeConverter<BTTGenericCredential_EnvelopeSeal>.Enumerate_BTTClaim(BTTGenericCredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_BTTEncryptedClaims(BTTEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims' to 'BTTGenericCredential_EnvelopeSeal'.");
                
            }
            BTTEncryptedClaims ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertTo_BTTEncryptedClaims(BTTGenericCredential_EnvelopeSeal value)
            {
                return TypeConverter<BTTEncryptedClaims>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeSeal>.GetConversionActionTo_BTTEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims> ITypeConverter<BTTGenericCredential_EnvelopeSeal>.Enumerate_BTTEncryptedClaims(BTTGenericCredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_BTTGenericCredential_Envelope(BTTGenericCredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_Envelope' to 'BTTGenericCredential_EnvelopeSeal'.");
                
            }
            BTTGenericCredential_Envelope ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertTo_BTTGenericCredential_Envelope(BTTGenericCredential_EnvelopeSeal value)
            {
                return TypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeSeal>.GetConversionActionTo_BTTGenericCredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_Envelope> ITypeConverter<BTTGenericCredential_EnvelopeSeal>.Enumerate_BTTGenericCredential_Envelope(BTTGenericCredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_BTTGenericCredential_EnvelopeContent(BTTGenericCredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeContent' to 'BTTGenericCredential_EnvelopeSeal'.");
                
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertTo_BTTGenericCredential_EnvelopeContent(BTTGenericCredential_EnvelopeSeal value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeSeal>.GetConversionActionTo_BTTGenericCredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeContent> ITypeConverter<BTTGenericCredential_EnvelopeSeal>.Enumerate_BTTGenericCredential_EnvelopeContent(BTTGenericCredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(BTTGenericCredential_EnvelopeSeal value)
            {
                
                return (BTTGenericCredential_EnvelopeSeal)value;
                
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertTo_BTTGenericCredential_EnvelopeSeal(BTTGenericCredential_EnvelopeSeal value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeSeal>.GetConversionActionTo_BTTGenericCredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeSeal> ITypeConverter<BTTGenericCredential_EnvelopeSeal>.Enumerate_BTTGenericCredential_EnvelopeSeal(BTTGenericCredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_BTTGenericCredential_PackingLabel(BTTGenericCredential_PackingLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_PackingLabel' to 'BTTGenericCredential_EnvelopeSeal'.");
                
            }
            BTTGenericCredential_PackingLabel ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertTo_BTTGenericCredential_PackingLabel(BTTGenericCredential_EnvelopeSeal value)
            {
                return TypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeSeal>.GetConversionActionTo_BTTGenericCredential_PackingLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_PackingLabel> ITypeConverter<BTTGenericCredential_EnvelopeSeal>.Enumerate_BTTGenericCredential_PackingLabel(BTTGenericCredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_BTTKeyValuePair(BTTKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTKeyValuePair' to 'BTTGenericCredential_EnvelopeSeal'.");
                
            }
            BTTKeyValuePair ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertTo_BTTKeyValuePair(BTTGenericCredential_EnvelopeSeal value)
            {
                return TypeConverter<BTTKeyValuePair>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeSeal>.GetConversionActionTo_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTKeyValuePair> ITypeConverter<BTTGenericCredential_EnvelopeSeal>.Enumerate_BTTKeyValuePair(BTTGenericCredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_BTTNFE_N4K_Claims(BTTNFE_N4K_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims' to 'BTTGenericCredential_EnvelopeSeal'.");
                
            }
            BTTNFE_N4K_Claims ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertTo_BTTNFE_N4K_Claims(BTTGenericCredential_EnvelopeSeal value)
            {
                return TypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeSeal>.GetConversionActionTo_BTTNFE_N4K_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims> ITypeConverter<BTTGenericCredential_EnvelopeSeal>.Enumerate_BTTNFE_N4K_Claims(BTTGenericCredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_BTTNFE_N4K_Envelope(BTTNFE_N4K_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Envelope' to 'BTTGenericCredential_EnvelopeSeal'.");
                
            }
            BTTNFE_N4K_Envelope ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertTo_BTTNFE_N4K_Envelope(BTTGenericCredential_EnvelopeSeal value)
            {
                return TypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeSeal>.GetConversionActionTo_BTTNFE_N4K_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Envelope> ITypeConverter<BTTGenericCredential_EnvelopeSeal>.Enumerate_BTTNFE_N4K_Envelope(BTTGenericCredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(BTTNFE_N4K_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_EnvelopeContent' to 'BTTGenericCredential_EnvelopeSeal'.");
                
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertTo_BTTNFE_N4K_EnvelopeContent(BTTGenericCredential_EnvelopeSeal value)
            {
                return TypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeSeal>.GetConversionActionTo_BTTNFE_N4K_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_EnvelopeContent> ITypeConverter<BTTGenericCredential_EnvelopeSeal>.Enumerate_BTTNFE_N4K_EnvelopeContent(BTTGenericCredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(BTTNFE_N4K_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_SealedEnvelope' to 'BTTGenericCredential_EnvelopeSeal'.");
                
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertTo_BTTNFE_N4K_SealedEnvelope(BTTGenericCredential_EnvelopeSeal value)
            {
                return TypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeSeal>.GetConversionActionTo_BTTNFE_N4K_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_SealedEnvelope> ITypeConverter<BTTGenericCredential_EnvelopeSeal>.Enumerate_BTTNFE_N4K_SealedEnvelope(BTTGenericCredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTVerifiableCredential_SealedEnvelope' to 'BTTGenericCredential_EnvelopeSeal'.");
                
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertTo_BTTVerifiableCredential_SealedEnvelope(BTTGenericCredential_EnvelopeSeal value)
            {
                return TypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeSeal>.GetConversionActionTo_BTTVerifiableCredential_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTVerifiableCredential_SealedEnvelope> ITypeConverter<BTTGenericCredential_EnvelopeSeal>.Enumerate_BTTVerifiableCredential_SealedEnvelope(BTTGenericCredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_BTTEncryptionFlag(BTTEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptionFlag' to 'BTTGenericCredential_EnvelopeSeal'.");
                
            }
            BTTEncryptionFlag ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertTo_BTTEncryptionFlag(BTTGenericCredential_EnvelopeSeal value)
            {
                return TypeConverter<BTTEncryptionFlag>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeSeal>.GetConversionActionTo_BTTEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptionFlag> ITypeConverter<BTTGenericCredential_EnvelopeSeal>.Enumerate_BTTEncryptionFlag(BTTGenericCredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_BTTGenericCredentialType(BTTGenericCredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredentialType' to 'BTTGenericCredential_EnvelopeSeal'.");
                
            }
            BTTGenericCredentialType ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertTo_BTTGenericCredentialType(BTTGenericCredential_EnvelopeSeal value)
            {
                return TypeConverter<BTTGenericCredentialType>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeSeal>.GetConversionActionTo_BTTGenericCredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredentialType> ITypeConverter<BTTGenericCredential_EnvelopeSeal>.Enumerate_BTTGenericCredentialType(BTTGenericCredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_BTTNFEBodyPart(BTTNFEBodyPart value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFEBodyPart' to 'BTTGenericCredential_EnvelopeSeal'.");
                
            }
            BTTNFEBodyPart ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertTo_BTTNFEBodyPart(BTTGenericCredential_EnvelopeSeal value)
            {
                return TypeConverter<BTTNFEBodyPart>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeSeal>.GetConversionActionTo_BTTNFEBodyPart()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFEBodyPart> ITypeConverter<BTTGenericCredential_EnvelopeSeal>.Enumerate_BTTNFEBodyPart(BTTGenericCredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_BTTTrustLevel(BTTTrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTTrustLevel' to 'BTTGenericCredential_EnvelopeSeal'.");
                
            }
            BTTTrustLevel ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertTo_BTTTrustLevel(BTTGenericCredential_EnvelopeSeal value)
            {
                return TypeConverter<BTTTrustLevel>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeSeal>.GetConversionActionTo_BTTTrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTTrustLevel> ITypeConverter<BTTGenericCredential_EnvelopeSeal>.Enumerate_BTTTrustLevel(BTTGenericCredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_List_List_BTTKeyValuePair(List<List<BTTKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<BTTKeyValuePair>>' to 'BTTGenericCredential_EnvelopeSeal'.");
                
            }
            List<List<BTTKeyValuePair>> ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertTo_List_List_BTTKeyValuePair(BTTGenericCredential_EnvelopeSeal value)
            {
                return TypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeSeal>.GetConversionActionTo_List_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<BTTKeyValuePair>>> ITypeConverter<BTTGenericCredential_EnvelopeSeal>.Enumerate_List_List_BTTKeyValuePair(BTTGenericCredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_List_BTTClaim(List<BTTClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTClaim>' to 'BTTGenericCredential_EnvelopeSeal'.");
                
            }
            List<BTTClaim> ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertTo_List_BTTClaim(BTTGenericCredential_EnvelopeSeal value)
            {
                return TypeConverter<List<BTTClaim>>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeSeal>.GetConversionActionTo_List_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTClaim>> ITypeConverter<BTTGenericCredential_EnvelopeSeal>.Enumerate_List_BTTClaim(BTTGenericCredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_BTTEncryptedClaims_nullable(BTTEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims?' to 'BTTGenericCredential_EnvelopeSeal'.");
                
            }
            BTTEncryptedClaims? ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertTo_BTTEncryptedClaims_nullable(BTTGenericCredential_EnvelopeSeal value)
            {
                return TypeConverter<BTTEncryptedClaims?>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeSeal>.GetConversionActionTo_BTTEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims?> ITypeConverter<BTTGenericCredential_EnvelopeSeal>.Enumerate_BTTEncryptedClaims_nullable(BTTGenericCredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_BTTNFE_N4K_Claims_nullable(BTTNFE_N4K_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims?' to 'BTTGenericCredential_EnvelopeSeal'.");
                
            }
            BTTNFE_N4K_Claims? ITypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertTo_BTTNFE_N4K_Claims_nullable(BTTGenericCredential_EnvelopeSeal value)
            {
                return TypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_EnvelopeSeal>.GetConversionActionTo_BTTNFE_N4K_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims?> ITypeConverter<BTTGenericCredential_EnvelopeSeal>.Enumerate_BTTNFE_N4K_Claims_nullable(BTTGenericCredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            BTTGenericCredential_PackingLabel ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'BTTGenericCredential_PackingLabel'.");
                
            }
            bool ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertTo_bool(BTTGenericCredential_PackingLabel value)
            {
                return TypeConverter<bool>.ConvertFrom_BTTGenericCredential_PackingLabel(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_PackingLabel>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<BTTGenericCredential_PackingLabel>.Enumerate_bool(BTTGenericCredential_PackingLabel value)
            {
                
                yield break;
            }
            BTTGenericCredential_PackingLabel ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_int(int value)
            {
                
                throw new InvalidCastException("Invalid cast from 'int' to 'BTTGenericCredential_PackingLabel'.");
                
            }
            int ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertTo_int(BTTGenericCredential_PackingLabel value)
            {
                return TypeConverter<int>.ConvertFrom_BTTGenericCredential_PackingLabel(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_PackingLabel>.GetConversionActionTo_int()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int> ITypeConverter<BTTGenericCredential_PackingLabel>.Enumerate_int(BTTGenericCredential_PackingLabel value)
            {
                
                yield break;
            }
            BTTGenericCredential_PackingLabel ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'BTTGenericCredential_PackingLabel'.");
                
            }
            long ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertTo_long(BTTGenericCredential_PackingLabel value)
            {
                return TypeConverter<long>.ConvertFrom_BTTGenericCredential_PackingLabel(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_PackingLabel>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<BTTGenericCredential_PackingLabel>.Enumerate_long(BTTGenericCredential_PackingLabel value)
            {
                
                yield break;
            }
            BTTGenericCredential_PackingLabel ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_DateTime(DateTime value)
            {
                
                throw new InvalidCastException("Invalid cast from 'DateTime' to 'BTTGenericCredential_PackingLabel'.");
                
            }
            DateTime ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertTo_DateTime(BTTGenericCredential_PackingLabel value)
            {
                return TypeConverter<DateTime>.ConvertFrom_BTTGenericCredential_PackingLabel(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_PackingLabel>.GetConversionActionTo_DateTime()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<DateTime> ITypeConverter<BTTGenericCredential_PackingLabel>.Enumerate_DateTime(BTTGenericCredential_PackingLabel value)
            {
                
                yield break;
            }
            BTTGenericCredential_PackingLabel ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    BTTGenericCredential_PackingLabel intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = BTTGenericCredential_PackingLabel.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "BTTGenericCredential_PackingLabel");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertTo_string(BTTGenericCredential_PackingLabel value)
            {
                return TypeConverter<string>.ConvertFrom_BTTGenericCredential_PackingLabel(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_PackingLabel>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<BTTGenericCredential_PackingLabel>.Enumerate_string(BTTGenericCredential_PackingLabel value)
            {
                
                yield break;
            }
            BTTGenericCredential_PackingLabel ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_int_Array_150(int[] value)
            {
                
                throw new InvalidCastException("Invalid cast from 'int[]' to 'BTTGenericCredential_PackingLabel'.");
                
            }
            int[] ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertTo_int_Array_150(BTTGenericCredential_PackingLabel value)
            {
                return TypeConverter<int[]>.ConvertFrom_BTTGenericCredential_PackingLabel(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_PackingLabel>.GetConversionActionTo_int_Array_150()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int[]> ITypeConverter<BTTGenericCredential_PackingLabel>.Enumerate_int_Array_150(BTTGenericCredential_PackingLabel value)
            {
                
                yield break;
            }
            BTTGenericCredential_PackingLabel ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_List_long(List<long> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<long>' to 'BTTGenericCredential_PackingLabel'.");
                
            }
            List<long> ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertTo_List_long(BTTGenericCredential_PackingLabel value)
            {
                return TypeConverter<List<long>>.ConvertFrom_BTTGenericCredential_PackingLabel(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_PackingLabel>.GetConversionActionTo_List_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<long>> ITypeConverter<BTTGenericCredential_PackingLabel>.Enumerate_List_long(BTTGenericCredential_PackingLabel value)
            {
                
                yield break;
            }
            BTTGenericCredential_PackingLabel ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'BTTGenericCredential_PackingLabel'.");
                
            }
            List<string> ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertTo_List_string(BTTGenericCredential_PackingLabel value)
            {
                return TypeConverter<List<string>>.ConvertFrom_BTTGenericCredential_PackingLabel(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_PackingLabel>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<BTTGenericCredential_PackingLabel>.Enumerate_List_string(BTTGenericCredential_PackingLabel value)
            {
                
                yield break;
            }
            BTTGenericCredential_PackingLabel ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_List_BTTKeyValuePair(List<BTTKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTKeyValuePair>' to 'BTTGenericCredential_PackingLabel'.");
                
            }
            List<BTTKeyValuePair> ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertTo_List_BTTKeyValuePair(BTTGenericCredential_PackingLabel value)
            {
                return TypeConverter<List<BTTKeyValuePair>>.ConvertFrom_BTTGenericCredential_PackingLabel(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_PackingLabel>.GetConversionActionTo_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTKeyValuePair>> ITypeConverter<BTTGenericCredential_PackingLabel>.Enumerate_List_BTTKeyValuePair(BTTGenericCredential_PackingLabel value)
            {
                
                yield break;
            }
            BTTGenericCredential_PackingLabel ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_BTTClaim(BTTClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTClaim' to 'BTTGenericCredential_PackingLabel'.");
                
            }
            BTTClaim ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertTo_BTTClaim(BTTGenericCredential_PackingLabel value)
            {
                return TypeConverter<BTTClaim>.ConvertFrom_BTTGenericCredential_PackingLabel(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_PackingLabel>.GetConversionActionTo_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTClaim> ITypeConverter<BTTGenericCredential_PackingLabel>.Enumerate_BTTClaim(BTTGenericCredential_PackingLabel value)
            {
                
                yield break;
            }
            BTTGenericCredential_PackingLabel ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_BTTEncryptedClaims(BTTEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims' to 'BTTGenericCredential_PackingLabel'.");
                
            }
            BTTEncryptedClaims ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertTo_BTTEncryptedClaims(BTTGenericCredential_PackingLabel value)
            {
                return TypeConverter<BTTEncryptedClaims>.ConvertFrom_BTTGenericCredential_PackingLabel(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_PackingLabel>.GetConversionActionTo_BTTEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims> ITypeConverter<BTTGenericCredential_PackingLabel>.Enumerate_BTTEncryptedClaims(BTTGenericCredential_PackingLabel value)
            {
                
                yield break;
            }
            BTTGenericCredential_PackingLabel ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_BTTGenericCredential_Envelope(BTTGenericCredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_Envelope' to 'BTTGenericCredential_PackingLabel'.");
                
            }
            BTTGenericCredential_Envelope ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertTo_BTTGenericCredential_Envelope(BTTGenericCredential_PackingLabel value)
            {
                return TypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_BTTGenericCredential_PackingLabel(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_PackingLabel>.GetConversionActionTo_BTTGenericCredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_Envelope> ITypeConverter<BTTGenericCredential_PackingLabel>.Enumerate_BTTGenericCredential_Envelope(BTTGenericCredential_PackingLabel value)
            {
                
                yield break;
            }
            BTTGenericCredential_PackingLabel ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_BTTGenericCredential_EnvelopeContent(BTTGenericCredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeContent' to 'BTTGenericCredential_PackingLabel'.");
                
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertTo_BTTGenericCredential_EnvelopeContent(BTTGenericCredential_PackingLabel value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_BTTGenericCredential_PackingLabel(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_PackingLabel>.GetConversionActionTo_BTTGenericCredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeContent> ITypeConverter<BTTGenericCredential_PackingLabel>.Enumerate_BTTGenericCredential_EnvelopeContent(BTTGenericCredential_PackingLabel value)
            {
                
                yield break;
            }
            BTTGenericCredential_PackingLabel ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(BTTGenericCredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeSeal' to 'BTTGenericCredential_PackingLabel'.");
                
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertTo_BTTGenericCredential_EnvelopeSeal(BTTGenericCredential_PackingLabel value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_BTTGenericCredential_PackingLabel(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_PackingLabel>.GetConversionActionTo_BTTGenericCredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeSeal> ITypeConverter<BTTGenericCredential_PackingLabel>.Enumerate_BTTGenericCredential_EnvelopeSeal(BTTGenericCredential_PackingLabel value)
            {
                
                yield break;
            }
            BTTGenericCredential_PackingLabel ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_BTTGenericCredential_PackingLabel(BTTGenericCredential_PackingLabel value)
            {
                
                return (BTTGenericCredential_PackingLabel)value;
                
            }
            BTTGenericCredential_PackingLabel ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertTo_BTTGenericCredential_PackingLabel(BTTGenericCredential_PackingLabel value)
            {
                return TypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_BTTGenericCredential_PackingLabel(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_PackingLabel>.GetConversionActionTo_BTTGenericCredential_PackingLabel()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_PackingLabel> ITypeConverter<BTTGenericCredential_PackingLabel>.Enumerate_BTTGenericCredential_PackingLabel(BTTGenericCredential_PackingLabel value)
            {
                
                yield break;
            }
            BTTGenericCredential_PackingLabel ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_BTTKeyValuePair(BTTKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTKeyValuePair' to 'BTTGenericCredential_PackingLabel'.");
                
            }
            BTTKeyValuePair ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertTo_BTTKeyValuePair(BTTGenericCredential_PackingLabel value)
            {
                return TypeConverter<BTTKeyValuePair>.ConvertFrom_BTTGenericCredential_PackingLabel(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_PackingLabel>.GetConversionActionTo_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTKeyValuePair> ITypeConverter<BTTGenericCredential_PackingLabel>.Enumerate_BTTKeyValuePair(BTTGenericCredential_PackingLabel value)
            {
                
                yield break;
            }
            BTTGenericCredential_PackingLabel ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_BTTNFE_N4K_Claims(BTTNFE_N4K_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims' to 'BTTGenericCredential_PackingLabel'.");
                
            }
            BTTNFE_N4K_Claims ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertTo_BTTNFE_N4K_Claims(BTTGenericCredential_PackingLabel value)
            {
                return TypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_BTTGenericCredential_PackingLabel(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_PackingLabel>.GetConversionActionTo_BTTNFE_N4K_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims> ITypeConverter<BTTGenericCredential_PackingLabel>.Enumerate_BTTNFE_N4K_Claims(BTTGenericCredential_PackingLabel value)
            {
                
                yield break;
            }
            BTTGenericCredential_PackingLabel ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_BTTNFE_N4K_Envelope(BTTNFE_N4K_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Envelope' to 'BTTGenericCredential_PackingLabel'.");
                
            }
            BTTNFE_N4K_Envelope ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertTo_BTTNFE_N4K_Envelope(BTTGenericCredential_PackingLabel value)
            {
                return TypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_BTTGenericCredential_PackingLabel(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_PackingLabel>.GetConversionActionTo_BTTNFE_N4K_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Envelope> ITypeConverter<BTTGenericCredential_PackingLabel>.Enumerate_BTTNFE_N4K_Envelope(BTTGenericCredential_PackingLabel value)
            {
                
                yield break;
            }
            BTTGenericCredential_PackingLabel ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(BTTNFE_N4K_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_EnvelopeContent' to 'BTTGenericCredential_PackingLabel'.");
                
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertTo_BTTNFE_N4K_EnvelopeContent(BTTGenericCredential_PackingLabel value)
            {
                return TypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_BTTGenericCredential_PackingLabel(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_PackingLabel>.GetConversionActionTo_BTTNFE_N4K_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_EnvelopeContent> ITypeConverter<BTTGenericCredential_PackingLabel>.Enumerate_BTTNFE_N4K_EnvelopeContent(BTTGenericCredential_PackingLabel value)
            {
                
                yield break;
            }
            BTTGenericCredential_PackingLabel ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(BTTNFE_N4K_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_SealedEnvelope' to 'BTTGenericCredential_PackingLabel'.");
                
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertTo_BTTNFE_N4K_SealedEnvelope(BTTGenericCredential_PackingLabel value)
            {
                return TypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_BTTGenericCredential_PackingLabel(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_PackingLabel>.GetConversionActionTo_BTTNFE_N4K_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_SealedEnvelope> ITypeConverter<BTTGenericCredential_PackingLabel>.Enumerate_BTTNFE_N4K_SealedEnvelope(BTTGenericCredential_PackingLabel value)
            {
                
                yield break;
            }
            BTTGenericCredential_PackingLabel ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTVerifiableCredential_SealedEnvelope' to 'BTTGenericCredential_PackingLabel'.");
                
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertTo_BTTVerifiableCredential_SealedEnvelope(BTTGenericCredential_PackingLabel value)
            {
                return TypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_BTTGenericCredential_PackingLabel(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_PackingLabel>.GetConversionActionTo_BTTVerifiableCredential_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTVerifiableCredential_SealedEnvelope> ITypeConverter<BTTGenericCredential_PackingLabel>.Enumerate_BTTVerifiableCredential_SealedEnvelope(BTTGenericCredential_PackingLabel value)
            {
                
                yield break;
            }
            BTTGenericCredential_PackingLabel ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_BTTEncryptionFlag(BTTEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptionFlag' to 'BTTGenericCredential_PackingLabel'.");
                
            }
            BTTEncryptionFlag ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertTo_BTTEncryptionFlag(BTTGenericCredential_PackingLabel value)
            {
                return TypeConverter<BTTEncryptionFlag>.ConvertFrom_BTTGenericCredential_PackingLabel(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_PackingLabel>.GetConversionActionTo_BTTEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptionFlag> ITypeConverter<BTTGenericCredential_PackingLabel>.Enumerate_BTTEncryptionFlag(BTTGenericCredential_PackingLabel value)
            {
                
                yield break;
            }
            BTTGenericCredential_PackingLabel ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_BTTGenericCredentialType(BTTGenericCredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredentialType' to 'BTTGenericCredential_PackingLabel'.");
                
            }
            BTTGenericCredentialType ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertTo_BTTGenericCredentialType(BTTGenericCredential_PackingLabel value)
            {
                return TypeConverter<BTTGenericCredentialType>.ConvertFrom_BTTGenericCredential_PackingLabel(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_PackingLabel>.GetConversionActionTo_BTTGenericCredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredentialType> ITypeConverter<BTTGenericCredential_PackingLabel>.Enumerate_BTTGenericCredentialType(BTTGenericCredential_PackingLabel value)
            {
                
                yield break;
            }
            BTTGenericCredential_PackingLabel ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_BTTNFEBodyPart(BTTNFEBodyPart value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFEBodyPart' to 'BTTGenericCredential_PackingLabel'.");
                
            }
            BTTNFEBodyPart ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertTo_BTTNFEBodyPart(BTTGenericCredential_PackingLabel value)
            {
                return TypeConverter<BTTNFEBodyPart>.ConvertFrom_BTTGenericCredential_PackingLabel(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_PackingLabel>.GetConversionActionTo_BTTNFEBodyPart()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFEBodyPart> ITypeConverter<BTTGenericCredential_PackingLabel>.Enumerate_BTTNFEBodyPart(BTTGenericCredential_PackingLabel value)
            {
                
                yield break;
            }
            BTTGenericCredential_PackingLabel ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_BTTTrustLevel(BTTTrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTTrustLevel' to 'BTTGenericCredential_PackingLabel'.");
                
            }
            BTTTrustLevel ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertTo_BTTTrustLevel(BTTGenericCredential_PackingLabel value)
            {
                return TypeConverter<BTTTrustLevel>.ConvertFrom_BTTGenericCredential_PackingLabel(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_PackingLabel>.GetConversionActionTo_BTTTrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTTrustLevel> ITypeConverter<BTTGenericCredential_PackingLabel>.Enumerate_BTTTrustLevel(BTTGenericCredential_PackingLabel value)
            {
                
                yield break;
            }
            BTTGenericCredential_PackingLabel ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_List_List_BTTKeyValuePair(List<List<BTTKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<BTTKeyValuePair>>' to 'BTTGenericCredential_PackingLabel'.");
                
            }
            List<List<BTTKeyValuePair>> ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertTo_List_List_BTTKeyValuePair(BTTGenericCredential_PackingLabel value)
            {
                return TypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_BTTGenericCredential_PackingLabel(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_PackingLabel>.GetConversionActionTo_List_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<BTTKeyValuePair>>> ITypeConverter<BTTGenericCredential_PackingLabel>.Enumerate_List_List_BTTKeyValuePair(BTTGenericCredential_PackingLabel value)
            {
                
                yield break;
            }
            BTTGenericCredential_PackingLabel ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_List_BTTClaim(List<BTTClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTClaim>' to 'BTTGenericCredential_PackingLabel'.");
                
            }
            List<BTTClaim> ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertTo_List_BTTClaim(BTTGenericCredential_PackingLabel value)
            {
                return TypeConverter<List<BTTClaim>>.ConvertFrom_BTTGenericCredential_PackingLabel(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_PackingLabel>.GetConversionActionTo_List_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTClaim>> ITypeConverter<BTTGenericCredential_PackingLabel>.Enumerate_List_BTTClaim(BTTGenericCredential_PackingLabel value)
            {
                
                yield break;
            }
            BTTGenericCredential_PackingLabel ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_BTTEncryptedClaims_nullable(BTTEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims?' to 'BTTGenericCredential_PackingLabel'.");
                
            }
            BTTEncryptedClaims? ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertTo_BTTEncryptedClaims_nullable(BTTGenericCredential_PackingLabel value)
            {
                return TypeConverter<BTTEncryptedClaims?>.ConvertFrom_BTTGenericCredential_PackingLabel(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_PackingLabel>.GetConversionActionTo_BTTEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims?> ITypeConverter<BTTGenericCredential_PackingLabel>.Enumerate_BTTEncryptedClaims_nullable(BTTGenericCredential_PackingLabel value)
            {
                
                yield break;
            }
            BTTGenericCredential_PackingLabel ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_BTTNFE_N4K_Claims_nullable(BTTNFE_N4K_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims?' to 'BTTGenericCredential_PackingLabel'.");
                
            }
            BTTNFE_N4K_Claims? ITypeConverter<BTTGenericCredential_PackingLabel>.ConvertTo_BTTNFE_N4K_Claims_nullable(BTTGenericCredential_PackingLabel value)
            {
                return TypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_BTTGenericCredential_PackingLabel(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredential_PackingLabel>.GetConversionActionTo_BTTNFE_N4K_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims?> ITypeConverter<BTTGenericCredential_PackingLabel>.Enumerate_BTTNFE_N4K_Claims_nullable(BTTGenericCredential_PackingLabel value)
            {
                
                yield break;
            }
            BTTKeyValuePair ITypeConverter<BTTKeyValuePair>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'BTTKeyValuePair'.");
                
            }
            bool ITypeConverter<BTTKeyValuePair>.ConvertTo_bool(BTTKeyValuePair value)
            {
                return TypeConverter<bool>.ConvertFrom_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<BTTKeyValuePair>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<BTTKeyValuePair>.Enumerate_bool(BTTKeyValuePair value)
            {
                
                yield break;
            }
            BTTKeyValuePair ITypeConverter<BTTKeyValuePair>.ConvertFrom_int(int value)
            {
                
                throw new InvalidCastException("Invalid cast from 'int' to 'BTTKeyValuePair'.");
                
            }
            int ITypeConverter<BTTKeyValuePair>.ConvertTo_int(BTTKeyValuePair value)
            {
                return TypeConverter<int>.ConvertFrom_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<BTTKeyValuePair>.GetConversionActionTo_int()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int> ITypeConverter<BTTKeyValuePair>.Enumerate_int(BTTKeyValuePair value)
            {
                
                yield break;
            }
            BTTKeyValuePair ITypeConverter<BTTKeyValuePair>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'BTTKeyValuePair'.");
                
            }
            long ITypeConverter<BTTKeyValuePair>.ConvertTo_long(BTTKeyValuePair value)
            {
                return TypeConverter<long>.ConvertFrom_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<BTTKeyValuePair>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<BTTKeyValuePair>.Enumerate_long(BTTKeyValuePair value)
            {
                
                yield break;
            }
            BTTKeyValuePair ITypeConverter<BTTKeyValuePair>.ConvertFrom_DateTime(DateTime value)
            {
                
                throw new InvalidCastException("Invalid cast from 'DateTime' to 'BTTKeyValuePair'.");
                
            }
            DateTime ITypeConverter<BTTKeyValuePair>.ConvertTo_DateTime(BTTKeyValuePair value)
            {
                return TypeConverter<DateTime>.ConvertFrom_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<BTTKeyValuePair>.GetConversionActionTo_DateTime()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<DateTime> ITypeConverter<BTTKeyValuePair>.Enumerate_DateTime(BTTKeyValuePair value)
            {
                
                yield break;
            }
            BTTKeyValuePair ITypeConverter<BTTKeyValuePair>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    BTTKeyValuePair intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = BTTKeyValuePair.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "BTTKeyValuePair");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<BTTKeyValuePair>.ConvertTo_string(BTTKeyValuePair value)
            {
                return TypeConverter<string>.ConvertFrom_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<BTTKeyValuePair>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<BTTKeyValuePair>.Enumerate_string(BTTKeyValuePair value)
            {
                
                yield break;
            }
            BTTKeyValuePair ITypeConverter<BTTKeyValuePair>.ConvertFrom_int_Array_150(int[] value)
            {
                
                throw new InvalidCastException("Invalid cast from 'int[]' to 'BTTKeyValuePair'.");
                
            }
            int[] ITypeConverter<BTTKeyValuePair>.ConvertTo_int_Array_150(BTTKeyValuePair value)
            {
                return TypeConverter<int[]>.ConvertFrom_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<BTTKeyValuePair>.GetConversionActionTo_int_Array_150()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int[]> ITypeConverter<BTTKeyValuePair>.Enumerate_int_Array_150(BTTKeyValuePair value)
            {
                
                yield break;
            }
            BTTKeyValuePair ITypeConverter<BTTKeyValuePair>.ConvertFrom_List_long(List<long> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<long>' to 'BTTKeyValuePair'.");
                
            }
            List<long> ITypeConverter<BTTKeyValuePair>.ConvertTo_List_long(BTTKeyValuePair value)
            {
                return TypeConverter<List<long>>.ConvertFrom_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<BTTKeyValuePair>.GetConversionActionTo_List_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<long>> ITypeConverter<BTTKeyValuePair>.Enumerate_List_long(BTTKeyValuePair value)
            {
                
                yield break;
            }
            BTTKeyValuePair ITypeConverter<BTTKeyValuePair>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'BTTKeyValuePair'.");
                
            }
            List<string> ITypeConverter<BTTKeyValuePair>.ConvertTo_List_string(BTTKeyValuePair value)
            {
                return TypeConverter<List<string>>.ConvertFrom_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<BTTKeyValuePair>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<BTTKeyValuePair>.Enumerate_List_string(BTTKeyValuePair value)
            {
                
                yield break;
            }
            BTTKeyValuePair ITypeConverter<BTTKeyValuePair>.ConvertFrom_List_BTTKeyValuePair(List<BTTKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTKeyValuePair>' to 'BTTKeyValuePair'.");
                
            }
            List<BTTKeyValuePair> ITypeConverter<BTTKeyValuePair>.ConvertTo_List_BTTKeyValuePair(BTTKeyValuePair value)
            {
                return TypeConverter<List<BTTKeyValuePair>>.ConvertFrom_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<BTTKeyValuePair>.GetConversionActionTo_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTKeyValuePair>> ITypeConverter<BTTKeyValuePair>.Enumerate_List_BTTKeyValuePair(BTTKeyValuePair value)
            {
                
                yield break;
            }
            BTTKeyValuePair ITypeConverter<BTTKeyValuePair>.ConvertFrom_BTTClaim(BTTClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTClaim' to 'BTTKeyValuePair'.");
                
            }
            BTTClaim ITypeConverter<BTTKeyValuePair>.ConvertTo_BTTClaim(BTTKeyValuePair value)
            {
                return TypeConverter<BTTClaim>.ConvertFrom_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<BTTKeyValuePair>.GetConversionActionTo_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTClaim> ITypeConverter<BTTKeyValuePair>.Enumerate_BTTClaim(BTTKeyValuePair value)
            {
                
                yield break;
            }
            BTTKeyValuePair ITypeConverter<BTTKeyValuePair>.ConvertFrom_BTTEncryptedClaims(BTTEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims' to 'BTTKeyValuePair'.");
                
            }
            BTTEncryptedClaims ITypeConverter<BTTKeyValuePair>.ConvertTo_BTTEncryptedClaims(BTTKeyValuePair value)
            {
                return TypeConverter<BTTEncryptedClaims>.ConvertFrom_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<BTTKeyValuePair>.GetConversionActionTo_BTTEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims> ITypeConverter<BTTKeyValuePair>.Enumerate_BTTEncryptedClaims(BTTKeyValuePair value)
            {
                
                yield break;
            }
            BTTKeyValuePair ITypeConverter<BTTKeyValuePair>.ConvertFrom_BTTGenericCredential_Envelope(BTTGenericCredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_Envelope' to 'BTTKeyValuePair'.");
                
            }
            BTTGenericCredential_Envelope ITypeConverter<BTTKeyValuePair>.ConvertTo_BTTGenericCredential_Envelope(BTTKeyValuePair value)
            {
                return TypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<BTTKeyValuePair>.GetConversionActionTo_BTTGenericCredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_Envelope> ITypeConverter<BTTKeyValuePair>.Enumerate_BTTGenericCredential_Envelope(BTTKeyValuePair value)
            {
                
                yield break;
            }
            BTTKeyValuePair ITypeConverter<BTTKeyValuePair>.ConvertFrom_BTTGenericCredential_EnvelopeContent(BTTGenericCredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeContent' to 'BTTKeyValuePair'.");
                
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<BTTKeyValuePair>.ConvertTo_BTTGenericCredential_EnvelopeContent(BTTKeyValuePair value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<BTTKeyValuePair>.GetConversionActionTo_BTTGenericCredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeContent> ITypeConverter<BTTKeyValuePair>.Enumerate_BTTGenericCredential_EnvelopeContent(BTTKeyValuePair value)
            {
                
                yield break;
            }
            BTTKeyValuePair ITypeConverter<BTTKeyValuePair>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(BTTGenericCredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeSeal' to 'BTTKeyValuePair'.");
                
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<BTTKeyValuePair>.ConvertTo_BTTGenericCredential_EnvelopeSeal(BTTKeyValuePair value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<BTTKeyValuePair>.GetConversionActionTo_BTTGenericCredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeSeal> ITypeConverter<BTTKeyValuePair>.Enumerate_BTTGenericCredential_EnvelopeSeal(BTTKeyValuePair value)
            {
                
                yield break;
            }
            BTTKeyValuePair ITypeConverter<BTTKeyValuePair>.ConvertFrom_BTTGenericCredential_PackingLabel(BTTGenericCredential_PackingLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_PackingLabel' to 'BTTKeyValuePair'.");
                
            }
            BTTGenericCredential_PackingLabel ITypeConverter<BTTKeyValuePair>.ConvertTo_BTTGenericCredential_PackingLabel(BTTKeyValuePair value)
            {
                return TypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<BTTKeyValuePair>.GetConversionActionTo_BTTGenericCredential_PackingLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_PackingLabel> ITypeConverter<BTTKeyValuePair>.Enumerate_BTTGenericCredential_PackingLabel(BTTKeyValuePair value)
            {
                
                yield break;
            }
            BTTKeyValuePair ITypeConverter<BTTKeyValuePair>.ConvertFrom_BTTKeyValuePair(BTTKeyValuePair value)
            {
                
                return (BTTKeyValuePair)value;
                
            }
            BTTKeyValuePair ITypeConverter<BTTKeyValuePair>.ConvertTo_BTTKeyValuePair(BTTKeyValuePair value)
            {
                return TypeConverter<BTTKeyValuePair>.ConvertFrom_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<BTTKeyValuePair>.GetConversionActionTo_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTKeyValuePair> ITypeConverter<BTTKeyValuePair>.Enumerate_BTTKeyValuePair(BTTKeyValuePair value)
            {
                
                yield break;
            }
            BTTKeyValuePair ITypeConverter<BTTKeyValuePair>.ConvertFrom_BTTNFE_N4K_Claims(BTTNFE_N4K_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims' to 'BTTKeyValuePair'.");
                
            }
            BTTNFE_N4K_Claims ITypeConverter<BTTKeyValuePair>.ConvertTo_BTTNFE_N4K_Claims(BTTKeyValuePair value)
            {
                return TypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<BTTKeyValuePair>.GetConversionActionTo_BTTNFE_N4K_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims> ITypeConverter<BTTKeyValuePair>.Enumerate_BTTNFE_N4K_Claims(BTTKeyValuePair value)
            {
                
                yield break;
            }
            BTTKeyValuePair ITypeConverter<BTTKeyValuePair>.ConvertFrom_BTTNFE_N4K_Envelope(BTTNFE_N4K_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Envelope' to 'BTTKeyValuePair'.");
                
            }
            BTTNFE_N4K_Envelope ITypeConverter<BTTKeyValuePair>.ConvertTo_BTTNFE_N4K_Envelope(BTTKeyValuePair value)
            {
                return TypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<BTTKeyValuePair>.GetConversionActionTo_BTTNFE_N4K_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Envelope> ITypeConverter<BTTKeyValuePair>.Enumerate_BTTNFE_N4K_Envelope(BTTKeyValuePair value)
            {
                
                yield break;
            }
            BTTKeyValuePair ITypeConverter<BTTKeyValuePair>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(BTTNFE_N4K_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_EnvelopeContent' to 'BTTKeyValuePair'.");
                
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<BTTKeyValuePair>.ConvertTo_BTTNFE_N4K_EnvelopeContent(BTTKeyValuePair value)
            {
                return TypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<BTTKeyValuePair>.GetConversionActionTo_BTTNFE_N4K_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_EnvelopeContent> ITypeConverter<BTTKeyValuePair>.Enumerate_BTTNFE_N4K_EnvelopeContent(BTTKeyValuePair value)
            {
                
                yield break;
            }
            BTTKeyValuePair ITypeConverter<BTTKeyValuePair>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(BTTNFE_N4K_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_SealedEnvelope' to 'BTTKeyValuePair'.");
                
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<BTTKeyValuePair>.ConvertTo_BTTNFE_N4K_SealedEnvelope(BTTKeyValuePair value)
            {
                return TypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<BTTKeyValuePair>.GetConversionActionTo_BTTNFE_N4K_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_SealedEnvelope> ITypeConverter<BTTKeyValuePair>.Enumerate_BTTNFE_N4K_SealedEnvelope(BTTKeyValuePair value)
            {
                
                yield break;
            }
            BTTKeyValuePair ITypeConverter<BTTKeyValuePair>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTVerifiableCredential_SealedEnvelope' to 'BTTKeyValuePair'.");
                
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<BTTKeyValuePair>.ConvertTo_BTTVerifiableCredential_SealedEnvelope(BTTKeyValuePair value)
            {
                return TypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<BTTKeyValuePair>.GetConversionActionTo_BTTVerifiableCredential_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTVerifiableCredential_SealedEnvelope> ITypeConverter<BTTKeyValuePair>.Enumerate_BTTVerifiableCredential_SealedEnvelope(BTTKeyValuePair value)
            {
                
                yield break;
            }
            BTTKeyValuePair ITypeConverter<BTTKeyValuePair>.ConvertFrom_BTTEncryptionFlag(BTTEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptionFlag' to 'BTTKeyValuePair'.");
                
            }
            BTTEncryptionFlag ITypeConverter<BTTKeyValuePair>.ConvertTo_BTTEncryptionFlag(BTTKeyValuePair value)
            {
                return TypeConverter<BTTEncryptionFlag>.ConvertFrom_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<BTTKeyValuePair>.GetConversionActionTo_BTTEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptionFlag> ITypeConverter<BTTKeyValuePair>.Enumerate_BTTEncryptionFlag(BTTKeyValuePair value)
            {
                
                yield break;
            }
            BTTKeyValuePair ITypeConverter<BTTKeyValuePair>.ConvertFrom_BTTGenericCredentialType(BTTGenericCredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredentialType' to 'BTTKeyValuePair'.");
                
            }
            BTTGenericCredentialType ITypeConverter<BTTKeyValuePair>.ConvertTo_BTTGenericCredentialType(BTTKeyValuePair value)
            {
                return TypeConverter<BTTGenericCredentialType>.ConvertFrom_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<BTTKeyValuePair>.GetConversionActionTo_BTTGenericCredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredentialType> ITypeConverter<BTTKeyValuePair>.Enumerate_BTTGenericCredentialType(BTTKeyValuePair value)
            {
                
                yield break;
            }
            BTTKeyValuePair ITypeConverter<BTTKeyValuePair>.ConvertFrom_BTTNFEBodyPart(BTTNFEBodyPart value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFEBodyPart' to 'BTTKeyValuePair'.");
                
            }
            BTTNFEBodyPart ITypeConverter<BTTKeyValuePair>.ConvertTo_BTTNFEBodyPart(BTTKeyValuePair value)
            {
                return TypeConverter<BTTNFEBodyPart>.ConvertFrom_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<BTTKeyValuePair>.GetConversionActionTo_BTTNFEBodyPart()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFEBodyPart> ITypeConverter<BTTKeyValuePair>.Enumerate_BTTNFEBodyPart(BTTKeyValuePair value)
            {
                
                yield break;
            }
            BTTKeyValuePair ITypeConverter<BTTKeyValuePair>.ConvertFrom_BTTTrustLevel(BTTTrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTTrustLevel' to 'BTTKeyValuePair'.");
                
            }
            BTTTrustLevel ITypeConverter<BTTKeyValuePair>.ConvertTo_BTTTrustLevel(BTTKeyValuePair value)
            {
                return TypeConverter<BTTTrustLevel>.ConvertFrom_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<BTTKeyValuePair>.GetConversionActionTo_BTTTrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTTrustLevel> ITypeConverter<BTTKeyValuePair>.Enumerate_BTTTrustLevel(BTTKeyValuePair value)
            {
                
                yield break;
            }
            BTTKeyValuePair ITypeConverter<BTTKeyValuePair>.ConvertFrom_List_List_BTTKeyValuePair(List<List<BTTKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<BTTKeyValuePair>>' to 'BTTKeyValuePair'.");
                
            }
            List<List<BTTKeyValuePair>> ITypeConverter<BTTKeyValuePair>.ConvertTo_List_List_BTTKeyValuePair(BTTKeyValuePair value)
            {
                return TypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<BTTKeyValuePair>.GetConversionActionTo_List_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<BTTKeyValuePair>>> ITypeConverter<BTTKeyValuePair>.Enumerate_List_List_BTTKeyValuePair(BTTKeyValuePair value)
            {
                
                yield break;
            }
            BTTKeyValuePair ITypeConverter<BTTKeyValuePair>.ConvertFrom_List_BTTClaim(List<BTTClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTClaim>' to 'BTTKeyValuePair'.");
                
            }
            List<BTTClaim> ITypeConverter<BTTKeyValuePair>.ConvertTo_List_BTTClaim(BTTKeyValuePair value)
            {
                return TypeConverter<List<BTTClaim>>.ConvertFrom_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<BTTKeyValuePair>.GetConversionActionTo_List_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTClaim>> ITypeConverter<BTTKeyValuePair>.Enumerate_List_BTTClaim(BTTKeyValuePair value)
            {
                
                yield break;
            }
            BTTKeyValuePair ITypeConverter<BTTKeyValuePair>.ConvertFrom_BTTEncryptedClaims_nullable(BTTEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims?' to 'BTTKeyValuePair'.");
                
            }
            BTTEncryptedClaims? ITypeConverter<BTTKeyValuePair>.ConvertTo_BTTEncryptedClaims_nullable(BTTKeyValuePair value)
            {
                return TypeConverter<BTTEncryptedClaims?>.ConvertFrom_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<BTTKeyValuePair>.GetConversionActionTo_BTTEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims?> ITypeConverter<BTTKeyValuePair>.Enumerate_BTTEncryptedClaims_nullable(BTTKeyValuePair value)
            {
                
                yield break;
            }
            BTTKeyValuePair ITypeConverter<BTTKeyValuePair>.ConvertFrom_BTTNFE_N4K_Claims_nullable(BTTNFE_N4K_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims?' to 'BTTKeyValuePair'.");
                
            }
            BTTNFE_N4K_Claims? ITypeConverter<BTTKeyValuePair>.ConvertTo_BTTNFE_N4K_Claims_nullable(BTTKeyValuePair value)
            {
                return TypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<BTTKeyValuePair>.GetConversionActionTo_BTTNFE_N4K_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims?> ITypeConverter<BTTKeyValuePair>.Enumerate_BTTNFE_N4K_Claims_nullable(BTTKeyValuePair value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims ITypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'BTTNFE_N4K_Claims'.");
                
            }
            bool ITypeConverter<BTTNFE_N4K_Claims>.ConvertTo_bool(BTTNFE_N4K_Claims value)
            {
                return TypeConverter<bool>.ConvertFrom_BTTNFE_N4K_Claims(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<BTTNFE_N4K_Claims>.Enumerate_bool(BTTNFE_N4K_Claims value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims ITypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_int(int value)
            {
                
                throw new InvalidCastException("Invalid cast from 'int' to 'BTTNFE_N4K_Claims'.");
                
            }
            int ITypeConverter<BTTNFE_N4K_Claims>.ConvertTo_int(BTTNFE_N4K_Claims value)
            {
                return TypeConverter<int>.ConvertFrom_BTTNFE_N4K_Claims(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims>.GetConversionActionTo_int()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int> ITypeConverter<BTTNFE_N4K_Claims>.Enumerate_int(BTTNFE_N4K_Claims value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims ITypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'BTTNFE_N4K_Claims'.");
                
            }
            long ITypeConverter<BTTNFE_N4K_Claims>.ConvertTo_long(BTTNFE_N4K_Claims value)
            {
                return TypeConverter<long>.ConvertFrom_BTTNFE_N4K_Claims(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<BTTNFE_N4K_Claims>.Enumerate_long(BTTNFE_N4K_Claims value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims ITypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_DateTime(DateTime value)
            {
                
                throw new InvalidCastException("Invalid cast from 'DateTime' to 'BTTNFE_N4K_Claims'.");
                
            }
            DateTime ITypeConverter<BTTNFE_N4K_Claims>.ConvertTo_DateTime(BTTNFE_N4K_Claims value)
            {
                return TypeConverter<DateTime>.ConvertFrom_BTTNFE_N4K_Claims(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims>.GetConversionActionTo_DateTime()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<DateTime> ITypeConverter<BTTNFE_N4K_Claims>.Enumerate_DateTime(BTTNFE_N4K_Claims value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims ITypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    BTTNFE_N4K_Claims intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = BTTNFE_N4K_Claims.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "BTTNFE_N4K_Claims");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<BTTNFE_N4K_Claims>.ConvertTo_string(BTTNFE_N4K_Claims value)
            {
                return TypeConverter<string>.ConvertFrom_BTTNFE_N4K_Claims(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<BTTNFE_N4K_Claims>.Enumerate_string(BTTNFE_N4K_Claims value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims ITypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_int_Array_150(int[] value)
            {
                
                throw new InvalidCastException("Invalid cast from 'int[]' to 'BTTNFE_N4K_Claims'.");
                
            }
            int[] ITypeConverter<BTTNFE_N4K_Claims>.ConvertTo_int_Array_150(BTTNFE_N4K_Claims value)
            {
                return TypeConverter<int[]>.ConvertFrom_BTTNFE_N4K_Claims(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims>.GetConversionActionTo_int_Array_150()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int[]> ITypeConverter<BTTNFE_N4K_Claims>.Enumerate_int_Array_150(BTTNFE_N4K_Claims value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims ITypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_List_long(List<long> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<long>' to 'BTTNFE_N4K_Claims'.");
                
            }
            List<long> ITypeConverter<BTTNFE_N4K_Claims>.ConvertTo_List_long(BTTNFE_N4K_Claims value)
            {
                return TypeConverter<List<long>>.ConvertFrom_BTTNFE_N4K_Claims(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims>.GetConversionActionTo_List_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<long>> ITypeConverter<BTTNFE_N4K_Claims>.Enumerate_List_long(BTTNFE_N4K_Claims value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims ITypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'BTTNFE_N4K_Claims'.");
                
            }
            List<string> ITypeConverter<BTTNFE_N4K_Claims>.ConvertTo_List_string(BTTNFE_N4K_Claims value)
            {
                return TypeConverter<List<string>>.ConvertFrom_BTTNFE_N4K_Claims(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<BTTNFE_N4K_Claims>.Enumerate_List_string(BTTNFE_N4K_Claims value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims ITypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_List_BTTKeyValuePair(List<BTTKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTKeyValuePair>' to 'BTTNFE_N4K_Claims'.");
                
            }
            List<BTTKeyValuePair> ITypeConverter<BTTNFE_N4K_Claims>.ConvertTo_List_BTTKeyValuePair(BTTNFE_N4K_Claims value)
            {
                return TypeConverter<List<BTTKeyValuePair>>.ConvertFrom_BTTNFE_N4K_Claims(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims>.GetConversionActionTo_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTKeyValuePair>> ITypeConverter<BTTNFE_N4K_Claims>.Enumerate_List_BTTKeyValuePair(BTTNFE_N4K_Claims value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims ITypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_BTTClaim(BTTClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTClaim' to 'BTTNFE_N4K_Claims'.");
                
            }
            BTTClaim ITypeConverter<BTTNFE_N4K_Claims>.ConvertTo_BTTClaim(BTTNFE_N4K_Claims value)
            {
                return TypeConverter<BTTClaim>.ConvertFrom_BTTNFE_N4K_Claims(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims>.GetConversionActionTo_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTClaim> ITypeConverter<BTTNFE_N4K_Claims>.Enumerate_BTTClaim(BTTNFE_N4K_Claims value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims ITypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_BTTEncryptedClaims(BTTEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims' to 'BTTNFE_N4K_Claims'.");
                
            }
            BTTEncryptedClaims ITypeConverter<BTTNFE_N4K_Claims>.ConvertTo_BTTEncryptedClaims(BTTNFE_N4K_Claims value)
            {
                return TypeConverter<BTTEncryptedClaims>.ConvertFrom_BTTNFE_N4K_Claims(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims>.GetConversionActionTo_BTTEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims> ITypeConverter<BTTNFE_N4K_Claims>.Enumerate_BTTEncryptedClaims(BTTNFE_N4K_Claims value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims ITypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_BTTGenericCredential_Envelope(BTTGenericCredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_Envelope' to 'BTTNFE_N4K_Claims'.");
                
            }
            BTTGenericCredential_Envelope ITypeConverter<BTTNFE_N4K_Claims>.ConvertTo_BTTGenericCredential_Envelope(BTTNFE_N4K_Claims value)
            {
                return TypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_BTTNFE_N4K_Claims(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims>.GetConversionActionTo_BTTGenericCredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_Envelope> ITypeConverter<BTTNFE_N4K_Claims>.Enumerate_BTTGenericCredential_Envelope(BTTNFE_N4K_Claims value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims ITypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_BTTGenericCredential_EnvelopeContent(BTTGenericCredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeContent' to 'BTTNFE_N4K_Claims'.");
                
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<BTTNFE_N4K_Claims>.ConvertTo_BTTGenericCredential_EnvelopeContent(BTTNFE_N4K_Claims value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_BTTNFE_N4K_Claims(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims>.GetConversionActionTo_BTTGenericCredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeContent> ITypeConverter<BTTNFE_N4K_Claims>.Enumerate_BTTGenericCredential_EnvelopeContent(BTTNFE_N4K_Claims value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims ITypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(BTTGenericCredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeSeal' to 'BTTNFE_N4K_Claims'.");
                
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<BTTNFE_N4K_Claims>.ConvertTo_BTTGenericCredential_EnvelopeSeal(BTTNFE_N4K_Claims value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_BTTNFE_N4K_Claims(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims>.GetConversionActionTo_BTTGenericCredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeSeal> ITypeConverter<BTTNFE_N4K_Claims>.Enumerate_BTTGenericCredential_EnvelopeSeal(BTTNFE_N4K_Claims value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims ITypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_BTTGenericCredential_PackingLabel(BTTGenericCredential_PackingLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_PackingLabel' to 'BTTNFE_N4K_Claims'.");
                
            }
            BTTGenericCredential_PackingLabel ITypeConverter<BTTNFE_N4K_Claims>.ConvertTo_BTTGenericCredential_PackingLabel(BTTNFE_N4K_Claims value)
            {
                return TypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_BTTNFE_N4K_Claims(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims>.GetConversionActionTo_BTTGenericCredential_PackingLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_PackingLabel> ITypeConverter<BTTNFE_N4K_Claims>.Enumerate_BTTGenericCredential_PackingLabel(BTTNFE_N4K_Claims value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims ITypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_BTTKeyValuePair(BTTKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTKeyValuePair' to 'BTTNFE_N4K_Claims'.");
                
            }
            BTTKeyValuePair ITypeConverter<BTTNFE_N4K_Claims>.ConvertTo_BTTKeyValuePair(BTTNFE_N4K_Claims value)
            {
                return TypeConverter<BTTKeyValuePair>.ConvertFrom_BTTNFE_N4K_Claims(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims>.GetConversionActionTo_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTKeyValuePair> ITypeConverter<BTTNFE_N4K_Claims>.Enumerate_BTTKeyValuePair(BTTNFE_N4K_Claims value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims ITypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_BTTNFE_N4K_Claims(BTTNFE_N4K_Claims value)
            {
                
                return (BTTNFE_N4K_Claims)value;
                
            }
            BTTNFE_N4K_Claims ITypeConverter<BTTNFE_N4K_Claims>.ConvertTo_BTTNFE_N4K_Claims(BTTNFE_N4K_Claims value)
            {
                return TypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_BTTNFE_N4K_Claims(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims>.GetConversionActionTo_BTTNFE_N4K_Claims()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims> ITypeConverter<BTTNFE_N4K_Claims>.Enumerate_BTTNFE_N4K_Claims(BTTNFE_N4K_Claims value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims ITypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_BTTNFE_N4K_Envelope(BTTNFE_N4K_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Envelope' to 'BTTNFE_N4K_Claims'.");
                
            }
            BTTNFE_N4K_Envelope ITypeConverter<BTTNFE_N4K_Claims>.ConvertTo_BTTNFE_N4K_Envelope(BTTNFE_N4K_Claims value)
            {
                return TypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_BTTNFE_N4K_Claims(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims>.GetConversionActionTo_BTTNFE_N4K_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Envelope> ITypeConverter<BTTNFE_N4K_Claims>.Enumerate_BTTNFE_N4K_Envelope(BTTNFE_N4K_Claims value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims ITypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(BTTNFE_N4K_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_EnvelopeContent' to 'BTTNFE_N4K_Claims'.");
                
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<BTTNFE_N4K_Claims>.ConvertTo_BTTNFE_N4K_EnvelopeContent(BTTNFE_N4K_Claims value)
            {
                return TypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_BTTNFE_N4K_Claims(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims>.GetConversionActionTo_BTTNFE_N4K_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_EnvelopeContent> ITypeConverter<BTTNFE_N4K_Claims>.Enumerate_BTTNFE_N4K_EnvelopeContent(BTTNFE_N4K_Claims value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims ITypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(BTTNFE_N4K_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_SealedEnvelope' to 'BTTNFE_N4K_Claims'.");
                
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<BTTNFE_N4K_Claims>.ConvertTo_BTTNFE_N4K_SealedEnvelope(BTTNFE_N4K_Claims value)
            {
                return TypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_BTTNFE_N4K_Claims(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims>.GetConversionActionTo_BTTNFE_N4K_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_SealedEnvelope> ITypeConverter<BTTNFE_N4K_Claims>.Enumerate_BTTNFE_N4K_SealedEnvelope(BTTNFE_N4K_Claims value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims ITypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTVerifiableCredential_SealedEnvelope' to 'BTTNFE_N4K_Claims'.");
                
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<BTTNFE_N4K_Claims>.ConvertTo_BTTVerifiableCredential_SealedEnvelope(BTTNFE_N4K_Claims value)
            {
                return TypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_BTTNFE_N4K_Claims(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims>.GetConversionActionTo_BTTVerifiableCredential_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTVerifiableCredential_SealedEnvelope> ITypeConverter<BTTNFE_N4K_Claims>.Enumerate_BTTVerifiableCredential_SealedEnvelope(BTTNFE_N4K_Claims value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims ITypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_BTTEncryptionFlag(BTTEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptionFlag' to 'BTTNFE_N4K_Claims'.");
                
            }
            BTTEncryptionFlag ITypeConverter<BTTNFE_N4K_Claims>.ConvertTo_BTTEncryptionFlag(BTTNFE_N4K_Claims value)
            {
                return TypeConverter<BTTEncryptionFlag>.ConvertFrom_BTTNFE_N4K_Claims(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims>.GetConversionActionTo_BTTEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptionFlag> ITypeConverter<BTTNFE_N4K_Claims>.Enumerate_BTTEncryptionFlag(BTTNFE_N4K_Claims value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims ITypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_BTTGenericCredentialType(BTTGenericCredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredentialType' to 'BTTNFE_N4K_Claims'.");
                
            }
            BTTGenericCredentialType ITypeConverter<BTTNFE_N4K_Claims>.ConvertTo_BTTGenericCredentialType(BTTNFE_N4K_Claims value)
            {
                return TypeConverter<BTTGenericCredentialType>.ConvertFrom_BTTNFE_N4K_Claims(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims>.GetConversionActionTo_BTTGenericCredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredentialType> ITypeConverter<BTTNFE_N4K_Claims>.Enumerate_BTTGenericCredentialType(BTTNFE_N4K_Claims value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims ITypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_BTTNFEBodyPart(BTTNFEBodyPart value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFEBodyPart' to 'BTTNFE_N4K_Claims'.");
                
            }
            BTTNFEBodyPart ITypeConverter<BTTNFE_N4K_Claims>.ConvertTo_BTTNFEBodyPart(BTTNFE_N4K_Claims value)
            {
                return TypeConverter<BTTNFEBodyPart>.ConvertFrom_BTTNFE_N4K_Claims(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims>.GetConversionActionTo_BTTNFEBodyPart()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFEBodyPart> ITypeConverter<BTTNFE_N4K_Claims>.Enumerate_BTTNFEBodyPart(BTTNFE_N4K_Claims value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims ITypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_BTTTrustLevel(BTTTrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTTrustLevel' to 'BTTNFE_N4K_Claims'.");
                
            }
            BTTTrustLevel ITypeConverter<BTTNFE_N4K_Claims>.ConvertTo_BTTTrustLevel(BTTNFE_N4K_Claims value)
            {
                return TypeConverter<BTTTrustLevel>.ConvertFrom_BTTNFE_N4K_Claims(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims>.GetConversionActionTo_BTTTrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTTrustLevel> ITypeConverter<BTTNFE_N4K_Claims>.Enumerate_BTTTrustLevel(BTTNFE_N4K_Claims value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims ITypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_List_List_BTTKeyValuePair(List<List<BTTKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<BTTKeyValuePair>>' to 'BTTNFE_N4K_Claims'.");
                
            }
            List<List<BTTKeyValuePair>> ITypeConverter<BTTNFE_N4K_Claims>.ConvertTo_List_List_BTTKeyValuePair(BTTNFE_N4K_Claims value)
            {
                return TypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_BTTNFE_N4K_Claims(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims>.GetConversionActionTo_List_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<BTTKeyValuePair>>> ITypeConverter<BTTNFE_N4K_Claims>.Enumerate_List_List_BTTKeyValuePair(BTTNFE_N4K_Claims value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims ITypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_List_BTTClaim(List<BTTClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTClaim>' to 'BTTNFE_N4K_Claims'.");
                
            }
            List<BTTClaim> ITypeConverter<BTTNFE_N4K_Claims>.ConvertTo_List_BTTClaim(BTTNFE_N4K_Claims value)
            {
                return TypeConverter<List<BTTClaim>>.ConvertFrom_BTTNFE_N4K_Claims(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims>.GetConversionActionTo_List_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTClaim>> ITypeConverter<BTTNFE_N4K_Claims>.Enumerate_List_BTTClaim(BTTNFE_N4K_Claims value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims ITypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_BTTEncryptedClaims_nullable(BTTEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims?' to 'BTTNFE_N4K_Claims'.");
                
            }
            BTTEncryptedClaims? ITypeConverter<BTTNFE_N4K_Claims>.ConvertTo_BTTEncryptedClaims_nullable(BTTNFE_N4K_Claims value)
            {
                return TypeConverter<BTTEncryptedClaims?>.ConvertFrom_BTTNFE_N4K_Claims(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims>.GetConversionActionTo_BTTEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims?> ITypeConverter<BTTNFE_N4K_Claims>.Enumerate_BTTEncryptedClaims_nullable(BTTNFE_N4K_Claims value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims ITypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_BTTNFE_N4K_Claims_nullable(BTTNFE_N4K_Claims? value)
            {
                
                return TypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_BTTNFE_N4K_Claims(value.Value);
                
            }
            BTTNFE_N4K_Claims? ITypeConverter<BTTNFE_N4K_Claims>.ConvertTo_BTTNFE_N4K_Claims_nullable(BTTNFE_N4K_Claims value)
            {
                return TypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_BTTNFE_N4K_Claims(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims>.GetConversionActionTo_BTTNFE_N4K_Claims_nullable()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims?> ITypeConverter<BTTNFE_N4K_Claims>.Enumerate_BTTNFE_N4K_Claims_nullable(BTTNFE_N4K_Claims value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Envelope ITypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'BTTNFE_N4K_Envelope'.");
                
            }
            bool ITypeConverter<BTTNFE_N4K_Envelope>.ConvertTo_bool(BTTNFE_N4K_Envelope value)
            {
                return TypeConverter<bool>.ConvertFrom_BTTNFE_N4K_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Envelope>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<BTTNFE_N4K_Envelope>.Enumerate_bool(BTTNFE_N4K_Envelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Envelope ITypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_int(int value)
            {
                
                throw new InvalidCastException("Invalid cast from 'int' to 'BTTNFE_N4K_Envelope'.");
                
            }
            int ITypeConverter<BTTNFE_N4K_Envelope>.ConvertTo_int(BTTNFE_N4K_Envelope value)
            {
                return TypeConverter<int>.ConvertFrom_BTTNFE_N4K_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Envelope>.GetConversionActionTo_int()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int> ITypeConverter<BTTNFE_N4K_Envelope>.Enumerate_int(BTTNFE_N4K_Envelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Envelope ITypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'BTTNFE_N4K_Envelope'.");
                
            }
            long ITypeConverter<BTTNFE_N4K_Envelope>.ConvertTo_long(BTTNFE_N4K_Envelope value)
            {
                return TypeConverter<long>.ConvertFrom_BTTNFE_N4K_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Envelope>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<BTTNFE_N4K_Envelope>.Enumerate_long(BTTNFE_N4K_Envelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Envelope ITypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_DateTime(DateTime value)
            {
                
                throw new InvalidCastException("Invalid cast from 'DateTime' to 'BTTNFE_N4K_Envelope'.");
                
            }
            DateTime ITypeConverter<BTTNFE_N4K_Envelope>.ConvertTo_DateTime(BTTNFE_N4K_Envelope value)
            {
                return TypeConverter<DateTime>.ConvertFrom_BTTNFE_N4K_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Envelope>.GetConversionActionTo_DateTime()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<DateTime> ITypeConverter<BTTNFE_N4K_Envelope>.Enumerate_DateTime(BTTNFE_N4K_Envelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Envelope ITypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    BTTNFE_N4K_Envelope intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = BTTNFE_N4K_Envelope.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "BTTNFE_N4K_Envelope");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<BTTNFE_N4K_Envelope>.ConvertTo_string(BTTNFE_N4K_Envelope value)
            {
                return TypeConverter<string>.ConvertFrom_BTTNFE_N4K_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Envelope>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<BTTNFE_N4K_Envelope>.Enumerate_string(BTTNFE_N4K_Envelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Envelope ITypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_int_Array_150(int[] value)
            {
                
                throw new InvalidCastException("Invalid cast from 'int[]' to 'BTTNFE_N4K_Envelope'.");
                
            }
            int[] ITypeConverter<BTTNFE_N4K_Envelope>.ConvertTo_int_Array_150(BTTNFE_N4K_Envelope value)
            {
                return TypeConverter<int[]>.ConvertFrom_BTTNFE_N4K_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Envelope>.GetConversionActionTo_int_Array_150()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int[]> ITypeConverter<BTTNFE_N4K_Envelope>.Enumerate_int_Array_150(BTTNFE_N4K_Envelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Envelope ITypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_List_long(List<long> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<long>' to 'BTTNFE_N4K_Envelope'.");
                
            }
            List<long> ITypeConverter<BTTNFE_N4K_Envelope>.ConvertTo_List_long(BTTNFE_N4K_Envelope value)
            {
                return TypeConverter<List<long>>.ConvertFrom_BTTNFE_N4K_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Envelope>.GetConversionActionTo_List_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<long>> ITypeConverter<BTTNFE_N4K_Envelope>.Enumerate_List_long(BTTNFE_N4K_Envelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Envelope ITypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'BTTNFE_N4K_Envelope'.");
                
            }
            List<string> ITypeConverter<BTTNFE_N4K_Envelope>.ConvertTo_List_string(BTTNFE_N4K_Envelope value)
            {
                return TypeConverter<List<string>>.ConvertFrom_BTTNFE_N4K_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Envelope>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<BTTNFE_N4K_Envelope>.Enumerate_List_string(BTTNFE_N4K_Envelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Envelope ITypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_List_BTTKeyValuePair(List<BTTKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTKeyValuePair>' to 'BTTNFE_N4K_Envelope'.");
                
            }
            List<BTTKeyValuePair> ITypeConverter<BTTNFE_N4K_Envelope>.ConvertTo_List_BTTKeyValuePair(BTTNFE_N4K_Envelope value)
            {
                return TypeConverter<List<BTTKeyValuePair>>.ConvertFrom_BTTNFE_N4K_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Envelope>.GetConversionActionTo_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTKeyValuePair>> ITypeConverter<BTTNFE_N4K_Envelope>.Enumerate_List_BTTKeyValuePair(BTTNFE_N4K_Envelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Envelope ITypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_BTTClaim(BTTClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTClaim' to 'BTTNFE_N4K_Envelope'.");
                
            }
            BTTClaim ITypeConverter<BTTNFE_N4K_Envelope>.ConvertTo_BTTClaim(BTTNFE_N4K_Envelope value)
            {
                return TypeConverter<BTTClaim>.ConvertFrom_BTTNFE_N4K_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Envelope>.GetConversionActionTo_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTClaim> ITypeConverter<BTTNFE_N4K_Envelope>.Enumerate_BTTClaim(BTTNFE_N4K_Envelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Envelope ITypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_BTTEncryptedClaims(BTTEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims' to 'BTTNFE_N4K_Envelope'.");
                
            }
            BTTEncryptedClaims ITypeConverter<BTTNFE_N4K_Envelope>.ConvertTo_BTTEncryptedClaims(BTTNFE_N4K_Envelope value)
            {
                return TypeConverter<BTTEncryptedClaims>.ConvertFrom_BTTNFE_N4K_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Envelope>.GetConversionActionTo_BTTEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims> ITypeConverter<BTTNFE_N4K_Envelope>.Enumerate_BTTEncryptedClaims(BTTNFE_N4K_Envelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Envelope ITypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_BTTGenericCredential_Envelope(BTTGenericCredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_Envelope' to 'BTTNFE_N4K_Envelope'.");
                
            }
            BTTGenericCredential_Envelope ITypeConverter<BTTNFE_N4K_Envelope>.ConvertTo_BTTGenericCredential_Envelope(BTTNFE_N4K_Envelope value)
            {
                return TypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_BTTNFE_N4K_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Envelope>.GetConversionActionTo_BTTGenericCredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_Envelope> ITypeConverter<BTTNFE_N4K_Envelope>.Enumerate_BTTGenericCredential_Envelope(BTTNFE_N4K_Envelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Envelope ITypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_BTTGenericCredential_EnvelopeContent(BTTGenericCredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeContent' to 'BTTNFE_N4K_Envelope'.");
                
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<BTTNFE_N4K_Envelope>.ConvertTo_BTTGenericCredential_EnvelopeContent(BTTNFE_N4K_Envelope value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_BTTNFE_N4K_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Envelope>.GetConversionActionTo_BTTGenericCredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeContent> ITypeConverter<BTTNFE_N4K_Envelope>.Enumerate_BTTGenericCredential_EnvelopeContent(BTTNFE_N4K_Envelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Envelope ITypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(BTTGenericCredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeSeal' to 'BTTNFE_N4K_Envelope'.");
                
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<BTTNFE_N4K_Envelope>.ConvertTo_BTTGenericCredential_EnvelopeSeal(BTTNFE_N4K_Envelope value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_BTTNFE_N4K_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Envelope>.GetConversionActionTo_BTTGenericCredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeSeal> ITypeConverter<BTTNFE_N4K_Envelope>.Enumerate_BTTGenericCredential_EnvelopeSeal(BTTNFE_N4K_Envelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Envelope ITypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_BTTGenericCredential_PackingLabel(BTTGenericCredential_PackingLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_PackingLabel' to 'BTTNFE_N4K_Envelope'.");
                
            }
            BTTGenericCredential_PackingLabel ITypeConverter<BTTNFE_N4K_Envelope>.ConvertTo_BTTGenericCredential_PackingLabel(BTTNFE_N4K_Envelope value)
            {
                return TypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_BTTNFE_N4K_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Envelope>.GetConversionActionTo_BTTGenericCredential_PackingLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_PackingLabel> ITypeConverter<BTTNFE_N4K_Envelope>.Enumerate_BTTGenericCredential_PackingLabel(BTTNFE_N4K_Envelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Envelope ITypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_BTTKeyValuePair(BTTKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTKeyValuePair' to 'BTTNFE_N4K_Envelope'.");
                
            }
            BTTKeyValuePair ITypeConverter<BTTNFE_N4K_Envelope>.ConvertTo_BTTKeyValuePair(BTTNFE_N4K_Envelope value)
            {
                return TypeConverter<BTTKeyValuePair>.ConvertFrom_BTTNFE_N4K_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Envelope>.GetConversionActionTo_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTKeyValuePair> ITypeConverter<BTTNFE_N4K_Envelope>.Enumerate_BTTKeyValuePair(BTTNFE_N4K_Envelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Envelope ITypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_BTTNFE_N4K_Claims(BTTNFE_N4K_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims' to 'BTTNFE_N4K_Envelope'.");
                
            }
            BTTNFE_N4K_Claims ITypeConverter<BTTNFE_N4K_Envelope>.ConvertTo_BTTNFE_N4K_Claims(BTTNFE_N4K_Envelope value)
            {
                return TypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_BTTNFE_N4K_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Envelope>.GetConversionActionTo_BTTNFE_N4K_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims> ITypeConverter<BTTNFE_N4K_Envelope>.Enumerate_BTTNFE_N4K_Claims(BTTNFE_N4K_Envelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Envelope ITypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_BTTNFE_N4K_Envelope(BTTNFE_N4K_Envelope value)
            {
                
                return (BTTNFE_N4K_Envelope)value;
                
            }
            BTTNFE_N4K_Envelope ITypeConverter<BTTNFE_N4K_Envelope>.ConvertTo_BTTNFE_N4K_Envelope(BTTNFE_N4K_Envelope value)
            {
                return TypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_BTTNFE_N4K_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Envelope>.GetConversionActionTo_BTTNFE_N4K_Envelope()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Envelope> ITypeConverter<BTTNFE_N4K_Envelope>.Enumerate_BTTNFE_N4K_Envelope(BTTNFE_N4K_Envelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Envelope ITypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(BTTNFE_N4K_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_EnvelopeContent' to 'BTTNFE_N4K_Envelope'.");
                
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<BTTNFE_N4K_Envelope>.ConvertTo_BTTNFE_N4K_EnvelopeContent(BTTNFE_N4K_Envelope value)
            {
                return TypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_BTTNFE_N4K_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Envelope>.GetConversionActionTo_BTTNFE_N4K_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_EnvelopeContent> ITypeConverter<BTTNFE_N4K_Envelope>.Enumerate_BTTNFE_N4K_EnvelopeContent(BTTNFE_N4K_Envelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Envelope ITypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(BTTNFE_N4K_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_SealedEnvelope' to 'BTTNFE_N4K_Envelope'.");
                
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<BTTNFE_N4K_Envelope>.ConvertTo_BTTNFE_N4K_SealedEnvelope(BTTNFE_N4K_Envelope value)
            {
                return TypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_BTTNFE_N4K_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Envelope>.GetConversionActionTo_BTTNFE_N4K_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_SealedEnvelope> ITypeConverter<BTTNFE_N4K_Envelope>.Enumerate_BTTNFE_N4K_SealedEnvelope(BTTNFE_N4K_Envelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Envelope ITypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTVerifiableCredential_SealedEnvelope' to 'BTTNFE_N4K_Envelope'.");
                
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<BTTNFE_N4K_Envelope>.ConvertTo_BTTVerifiableCredential_SealedEnvelope(BTTNFE_N4K_Envelope value)
            {
                return TypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_BTTNFE_N4K_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Envelope>.GetConversionActionTo_BTTVerifiableCredential_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTVerifiableCredential_SealedEnvelope> ITypeConverter<BTTNFE_N4K_Envelope>.Enumerate_BTTVerifiableCredential_SealedEnvelope(BTTNFE_N4K_Envelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Envelope ITypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_BTTEncryptionFlag(BTTEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptionFlag' to 'BTTNFE_N4K_Envelope'.");
                
            }
            BTTEncryptionFlag ITypeConverter<BTTNFE_N4K_Envelope>.ConvertTo_BTTEncryptionFlag(BTTNFE_N4K_Envelope value)
            {
                return TypeConverter<BTTEncryptionFlag>.ConvertFrom_BTTNFE_N4K_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Envelope>.GetConversionActionTo_BTTEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptionFlag> ITypeConverter<BTTNFE_N4K_Envelope>.Enumerate_BTTEncryptionFlag(BTTNFE_N4K_Envelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Envelope ITypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_BTTGenericCredentialType(BTTGenericCredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredentialType' to 'BTTNFE_N4K_Envelope'.");
                
            }
            BTTGenericCredentialType ITypeConverter<BTTNFE_N4K_Envelope>.ConvertTo_BTTGenericCredentialType(BTTNFE_N4K_Envelope value)
            {
                return TypeConverter<BTTGenericCredentialType>.ConvertFrom_BTTNFE_N4K_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Envelope>.GetConversionActionTo_BTTGenericCredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredentialType> ITypeConverter<BTTNFE_N4K_Envelope>.Enumerate_BTTGenericCredentialType(BTTNFE_N4K_Envelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Envelope ITypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_BTTNFEBodyPart(BTTNFEBodyPart value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFEBodyPart' to 'BTTNFE_N4K_Envelope'.");
                
            }
            BTTNFEBodyPart ITypeConverter<BTTNFE_N4K_Envelope>.ConvertTo_BTTNFEBodyPart(BTTNFE_N4K_Envelope value)
            {
                return TypeConverter<BTTNFEBodyPart>.ConvertFrom_BTTNFE_N4K_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Envelope>.GetConversionActionTo_BTTNFEBodyPart()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFEBodyPart> ITypeConverter<BTTNFE_N4K_Envelope>.Enumerate_BTTNFEBodyPart(BTTNFE_N4K_Envelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Envelope ITypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_BTTTrustLevel(BTTTrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTTrustLevel' to 'BTTNFE_N4K_Envelope'.");
                
            }
            BTTTrustLevel ITypeConverter<BTTNFE_N4K_Envelope>.ConvertTo_BTTTrustLevel(BTTNFE_N4K_Envelope value)
            {
                return TypeConverter<BTTTrustLevel>.ConvertFrom_BTTNFE_N4K_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Envelope>.GetConversionActionTo_BTTTrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTTrustLevel> ITypeConverter<BTTNFE_N4K_Envelope>.Enumerate_BTTTrustLevel(BTTNFE_N4K_Envelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Envelope ITypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_List_List_BTTKeyValuePair(List<List<BTTKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<BTTKeyValuePair>>' to 'BTTNFE_N4K_Envelope'.");
                
            }
            List<List<BTTKeyValuePair>> ITypeConverter<BTTNFE_N4K_Envelope>.ConvertTo_List_List_BTTKeyValuePair(BTTNFE_N4K_Envelope value)
            {
                return TypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_BTTNFE_N4K_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Envelope>.GetConversionActionTo_List_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<BTTKeyValuePair>>> ITypeConverter<BTTNFE_N4K_Envelope>.Enumerate_List_List_BTTKeyValuePair(BTTNFE_N4K_Envelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Envelope ITypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_List_BTTClaim(List<BTTClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTClaim>' to 'BTTNFE_N4K_Envelope'.");
                
            }
            List<BTTClaim> ITypeConverter<BTTNFE_N4K_Envelope>.ConvertTo_List_BTTClaim(BTTNFE_N4K_Envelope value)
            {
                return TypeConverter<List<BTTClaim>>.ConvertFrom_BTTNFE_N4K_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Envelope>.GetConversionActionTo_List_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTClaim>> ITypeConverter<BTTNFE_N4K_Envelope>.Enumerate_List_BTTClaim(BTTNFE_N4K_Envelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Envelope ITypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_BTTEncryptedClaims_nullable(BTTEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims?' to 'BTTNFE_N4K_Envelope'.");
                
            }
            BTTEncryptedClaims? ITypeConverter<BTTNFE_N4K_Envelope>.ConvertTo_BTTEncryptedClaims_nullable(BTTNFE_N4K_Envelope value)
            {
                return TypeConverter<BTTEncryptedClaims?>.ConvertFrom_BTTNFE_N4K_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Envelope>.GetConversionActionTo_BTTEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims?> ITypeConverter<BTTNFE_N4K_Envelope>.Enumerate_BTTEncryptedClaims_nullable(BTTNFE_N4K_Envelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Envelope ITypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_BTTNFE_N4K_Claims_nullable(BTTNFE_N4K_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims?' to 'BTTNFE_N4K_Envelope'.");
                
            }
            BTTNFE_N4K_Claims? ITypeConverter<BTTNFE_N4K_Envelope>.ConvertTo_BTTNFE_N4K_Claims_nullable(BTTNFE_N4K_Envelope value)
            {
                return TypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_BTTNFE_N4K_Envelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Envelope>.GetConversionActionTo_BTTNFE_N4K_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims?> ITypeConverter<BTTNFE_N4K_Envelope>.Enumerate_BTTNFE_N4K_Claims_nullable(BTTNFE_N4K_Envelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'BTTNFE_N4K_EnvelopeContent'.");
                
            }
            bool ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertTo_bool(BTTNFE_N4K_EnvelopeContent value)
            {
                return TypeConverter<bool>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_EnvelopeContent>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<BTTNFE_N4K_EnvelopeContent>.Enumerate_bool(BTTNFE_N4K_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_int(int value)
            {
                
                throw new InvalidCastException("Invalid cast from 'int' to 'BTTNFE_N4K_EnvelopeContent'.");
                
            }
            int ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertTo_int(BTTNFE_N4K_EnvelopeContent value)
            {
                return TypeConverter<int>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_EnvelopeContent>.GetConversionActionTo_int()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int> ITypeConverter<BTTNFE_N4K_EnvelopeContent>.Enumerate_int(BTTNFE_N4K_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'BTTNFE_N4K_EnvelopeContent'.");
                
            }
            long ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertTo_long(BTTNFE_N4K_EnvelopeContent value)
            {
                return TypeConverter<long>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_EnvelopeContent>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<BTTNFE_N4K_EnvelopeContent>.Enumerate_long(BTTNFE_N4K_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_DateTime(DateTime value)
            {
                
                throw new InvalidCastException("Invalid cast from 'DateTime' to 'BTTNFE_N4K_EnvelopeContent'.");
                
            }
            DateTime ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertTo_DateTime(BTTNFE_N4K_EnvelopeContent value)
            {
                return TypeConverter<DateTime>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_EnvelopeContent>.GetConversionActionTo_DateTime()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<DateTime> ITypeConverter<BTTNFE_N4K_EnvelopeContent>.Enumerate_DateTime(BTTNFE_N4K_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    BTTNFE_N4K_EnvelopeContent intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = BTTNFE_N4K_EnvelopeContent.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "BTTNFE_N4K_EnvelopeContent");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertTo_string(BTTNFE_N4K_EnvelopeContent value)
            {
                return TypeConverter<string>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_EnvelopeContent>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<BTTNFE_N4K_EnvelopeContent>.Enumerate_string(BTTNFE_N4K_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_int_Array_150(int[] value)
            {
                
                throw new InvalidCastException("Invalid cast from 'int[]' to 'BTTNFE_N4K_EnvelopeContent'.");
                
            }
            int[] ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertTo_int_Array_150(BTTNFE_N4K_EnvelopeContent value)
            {
                return TypeConverter<int[]>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_EnvelopeContent>.GetConversionActionTo_int_Array_150()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int[]> ITypeConverter<BTTNFE_N4K_EnvelopeContent>.Enumerate_int_Array_150(BTTNFE_N4K_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_List_long(List<long> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<long>' to 'BTTNFE_N4K_EnvelopeContent'.");
                
            }
            List<long> ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertTo_List_long(BTTNFE_N4K_EnvelopeContent value)
            {
                return TypeConverter<List<long>>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_EnvelopeContent>.GetConversionActionTo_List_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<long>> ITypeConverter<BTTNFE_N4K_EnvelopeContent>.Enumerate_List_long(BTTNFE_N4K_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'BTTNFE_N4K_EnvelopeContent'.");
                
            }
            List<string> ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertTo_List_string(BTTNFE_N4K_EnvelopeContent value)
            {
                return TypeConverter<List<string>>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_EnvelopeContent>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<BTTNFE_N4K_EnvelopeContent>.Enumerate_List_string(BTTNFE_N4K_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_List_BTTKeyValuePair(List<BTTKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTKeyValuePair>' to 'BTTNFE_N4K_EnvelopeContent'.");
                
            }
            List<BTTKeyValuePair> ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertTo_List_BTTKeyValuePair(BTTNFE_N4K_EnvelopeContent value)
            {
                return TypeConverter<List<BTTKeyValuePair>>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_EnvelopeContent>.GetConversionActionTo_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTKeyValuePair>> ITypeConverter<BTTNFE_N4K_EnvelopeContent>.Enumerate_List_BTTKeyValuePair(BTTNFE_N4K_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_BTTClaim(BTTClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTClaim' to 'BTTNFE_N4K_EnvelopeContent'.");
                
            }
            BTTClaim ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertTo_BTTClaim(BTTNFE_N4K_EnvelopeContent value)
            {
                return TypeConverter<BTTClaim>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_EnvelopeContent>.GetConversionActionTo_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTClaim> ITypeConverter<BTTNFE_N4K_EnvelopeContent>.Enumerate_BTTClaim(BTTNFE_N4K_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_BTTEncryptedClaims(BTTEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims' to 'BTTNFE_N4K_EnvelopeContent'.");
                
            }
            BTTEncryptedClaims ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertTo_BTTEncryptedClaims(BTTNFE_N4K_EnvelopeContent value)
            {
                return TypeConverter<BTTEncryptedClaims>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_EnvelopeContent>.GetConversionActionTo_BTTEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims> ITypeConverter<BTTNFE_N4K_EnvelopeContent>.Enumerate_BTTEncryptedClaims(BTTNFE_N4K_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_BTTGenericCredential_Envelope(BTTGenericCredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_Envelope' to 'BTTNFE_N4K_EnvelopeContent'.");
                
            }
            BTTGenericCredential_Envelope ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertTo_BTTGenericCredential_Envelope(BTTNFE_N4K_EnvelopeContent value)
            {
                return TypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_EnvelopeContent>.GetConversionActionTo_BTTGenericCredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_Envelope> ITypeConverter<BTTNFE_N4K_EnvelopeContent>.Enumerate_BTTGenericCredential_Envelope(BTTNFE_N4K_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_BTTGenericCredential_EnvelopeContent(BTTGenericCredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeContent' to 'BTTNFE_N4K_EnvelopeContent'.");
                
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertTo_BTTGenericCredential_EnvelopeContent(BTTNFE_N4K_EnvelopeContent value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_EnvelopeContent>.GetConversionActionTo_BTTGenericCredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeContent> ITypeConverter<BTTNFE_N4K_EnvelopeContent>.Enumerate_BTTGenericCredential_EnvelopeContent(BTTNFE_N4K_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(BTTGenericCredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeSeal' to 'BTTNFE_N4K_EnvelopeContent'.");
                
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertTo_BTTGenericCredential_EnvelopeSeal(BTTNFE_N4K_EnvelopeContent value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_EnvelopeContent>.GetConversionActionTo_BTTGenericCredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeSeal> ITypeConverter<BTTNFE_N4K_EnvelopeContent>.Enumerate_BTTGenericCredential_EnvelopeSeal(BTTNFE_N4K_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_BTTGenericCredential_PackingLabel(BTTGenericCredential_PackingLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_PackingLabel' to 'BTTNFE_N4K_EnvelopeContent'.");
                
            }
            BTTGenericCredential_PackingLabel ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertTo_BTTGenericCredential_PackingLabel(BTTNFE_N4K_EnvelopeContent value)
            {
                return TypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_EnvelopeContent>.GetConversionActionTo_BTTGenericCredential_PackingLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_PackingLabel> ITypeConverter<BTTNFE_N4K_EnvelopeContent>.Enumerate_BTTGenericCredential_PackingLabel(BTTNFE_N4K_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_BTTKeyValuePair(BTTKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTKeyValuePair' to 'BTTNFE_N4K_EnvelopeContent'.");
                
            }
            BTTKeyValuePair ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertTo_BTTKeyValuePair(BTTNFE_N4K_EnvelopeContent value)
            {
                return TypeConverter<BTTKeyValuePair>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_EnvelopeContent>.GetConversionActionTo_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTKeyValuePair> ITypeConverter<BTTNFE_N4K_EnvelopeContent>.Enumerate_BTTKeyValuePair(BTTNFE_N4K_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_BTTNFE_N4K_Claims(BTTNFE_N4K_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims' to 'BTTNFE_N4K_EnvelopeContent'.");
                
            }
            BTTNFE_N4K_Claims ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertTo_BTTNFE_N4K_Claims(BTTNFE_N4K_EnvelopeContent value)
            {
                return TypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_EnvelopeContent>.GetConversionActionTo_BTTNFE_N4K_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims> ITypeConverter<BTTNFE_N4K_EnvelopeContent>.Enumerate_BTTNFE_N4K_Claims(BTTNFE_N4K_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_BTTNFE_N4K_Envelope(BTTNFE_N4K_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Envelope' to 'BTTNFE_N4K_EnvelopeContent'.");
                
            }
            BTTNFE_N4K_Envelope ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertTo_BTTNFE_N4K_Envelope(BTTNFE_N4K_EnvelopeContent value)
            {
                return TypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_EnvelopeContent>.GetConversionActionTo_BTTNFE_N4K_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Envelope> ITypeConverter<BTTNFE_N4K_EnvelopeContent>.Enumerate_BTTNFE_N4K_Envelope(BTTNFE_N4K_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(BTTNFE_N4K_EnvelopeContent value)
            {
                
                return (BTTNFE_N4K_EnvelopeContent)value;
                
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertTo_BTTNFE_N4K_EnvelopeContent(BTTNFE_N4K_EnvelopeContent value)
            {
                return TypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_EnvelopeContent>.GetConversionActionTo_BTTNFE_N4K_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_EnvelopeContent> ITypeConverter<BTTNFE_N4K_EnvelopeContent>.Enumerate_BTTNFE_N4K_EnvelopeContent(BTTNFE_N4K_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(BTTNFE_N4K_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_SealedEnvelope' to 'BTTNFE_N4K_EnvelopeContent'.");
                
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertTo_BTTNFE_N4K_SealedEnvelope(BTTNFE_N4K_EnvelopeContent value)
            {
                return TypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_EnvelopeContent>.GetConversionActionTo_BTTNFE_N4K_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_SealedEnvelope> ITypeConverter<BTTNFE_N4K_EnvelopeContent>.Enumerate_BTTNFE_N4K_SealedEnvelope(BTTNFE_N4K_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTVerifiableCredential_SealedEnvelope' to 'BTTNFE_N4K_EnvelopeContent'.");
                
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertTo_BTTVerifiableCredential_SealedEnvelope(BTTNFE_N4K_EnvelopeContent value)
            {
                return TypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_EnvelopeContent>.GetConversionActionTo_BTTVerifiableCredential_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTVerifiableCredential_SealedEnvelope> ITypeConverter<BTTNFE_N4K_EnvelopeContent>.Enumerate_BTTVerifiableCredential_SealedEnvelope(BTTNFE_N4K_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_BTTEncryptionFlag(BTTEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptionFlag' to 'BTTNFE_N4K_EnvelopeContent'.");
                
            }
            BTTEncryptionFlag ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertTo_BTTEncryptionFlag(BTTNFE_N4K_EnvelopeContent value)
            {
                return TypeConverter<BTTEncryptionFlag>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_EnvelopeContent>.GetConversionActionTo_BTTEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptionFlag> ITypeConverter<BTTNFE_N4K_EnvelopeContent>.Enumerate_BTTEncryptionFlag(BTTNFE_N4K_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_BTTGenericCredentialType(BTTGenericCredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredentialType' to 'BTTNFE_N4K_EnvelopeContent'.");
                
            }
            BTTGenericCredentialType ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertTo_BTTGenericCredentialType(BTTNFE_N4K_EnvelopeContent value)
            {
                return TypeConverter<BTTGenericCredentialType>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_EnvelopeContent>.GetConversionActionTo_BTTGenericCredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredentialType> ITypeConverter<BTTNFE_N4K_EnvelopeContent>.Enumerate_BTTGenericCredentialType(BTTNFE_N4K_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_BTTNFEBodyPart(BTTNFEBodyPart value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFEBodyPart' to 'BTTNFE_N4K_EnvelopeContent'.");
                
            }
            BTTNFEBodyPart ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertTo_BTTNFEBodyPart(BTTNFE_N4K_EnvelopeContent value)
            {
                return TypeConverter<BTTNFEBodyPart>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_EnvelopeContent>.GetConversionActionTo_BTTNFEBodyPart()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFEBodyPart> ITypeConverter<BTTNFE_N4K_EnvelopeContent>.Enumerate_BTTNFEBodyPart(BTTNFE_N4K_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_BTTTrustLevel(BTTTrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTTrustLevel' to 'BTTNFE_N4K_EnvelopeContent'.");
                
            }
            BTTTrustLevel ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertTo_BTTTrustLevel(BTTNFE_N4K_EnvelopeContent value)
            {
                return TypeConverter<BTTTrustLevel>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_EnvelopeContent>.GetConversionActionTo_BTTTrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTTrustLevel> ITypeConverter<BTTNFE_N4K_EnvelopeContent>.Enumerate_BTTTrustLevel(BTTNFE_N4K_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_List_List_BTTKeyValuePair(List<List<BTTKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<BTTKeyValuePair>>' to 'BTTNFE_N4K_EnvelopeContent'.");
                
            }
            List<List<BTTKeyValuePair>> ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertTo_List_List_BTTKeyValuePair(BTTNFE_N4K_EnvelopeContent value)
            {
                return TypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_EnvelopeContent>.GetConversionActionTo_List_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<BTTKeyValuePair>>> ITypeConverter<BTTNFE_N4K_EnvelopeContent>.Enumerate_List_List_BTTKeyValuePair(BTTNFE_N4K_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_List_BTTClaim(List<BTTClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTClaim>' to 'BTTNFE_N4K_EnvelopeContent'.");
                
            }
            List<BTTClaim> ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertTo_List_BTTClaim(BTTNFE_N4K_EnvelopeContent value)
            {
                return TypeConverter<List<BTTClaim>>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_EnvelopeContent>.GetConversionActionTo_List_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTClaim>> ITypeConverter<BTTNFE_N4K_EnvelopeContent>.Enumerate_List_BTTClaim(BTTNFE_N4K_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_BTTEncryptedClaims_nullable(BTTEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims?' to 'BTTNFE_N4K_EnvelopeContent'.");
                
            }
            BTTEncryptedClaims? ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertTo_BTTEncryptedClaims_nullable(BTTNFE_N4K_EnvelopeContent value)
            {
                return TypeConverter<BTTEncryptedClaims?>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_EnvelopeContent>.GetConversionActionTo_BTTEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims?> ITypeConverter<BTTNFE_N4K_EnvelopeContent>.Enumerate_BTTEncryptedClaims_nullable(BTTNFE_N4K_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_BTTNFE_N4K_Claims_nullable(BTTNFE_N4K_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims?' to 'BTTNFE_N4K_EnvelopeContent'.");
                
            }
            BTTNFE_N4K_Claims? ITypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertTo_BTTNFE_N4K_Claims_nullable(BTTNFE_N4K_EnvelopeContent value)
            {
                return TypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_EnvelopeContent>.GetConversionActionTo_BTTNFE_N4K_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims?> ITypeConverter<BTTNFE_N4K_EnvelopeContent>.Enumerate_BTTNFE_N4K_Claims_nullable(BTTNFE_N4K_EnvelopeContent value)
            {
                
                yield break;
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'BTTNFE_N4K_SealedEnvelope'.");
                
            }
            bool ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertTo_bool(BTTNFE_N4K_SealedEnvelope value)
            {
                return TypeConverter<bool>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_SealedEnvelope>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<BTTNFE_N4K_SealedEnvelope>.Enumerate_bool(BTTNFE_N4K_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_int(int value)
            {
                
                throw new InvalidCastException("Invalid cast from 'int' to 'BTTNFE_N4K_SealedEnvelope'.");
                
            }
            int ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertTo_int(BTTNFE_N4K_SealedEnvelope value)
            {
                return TypeConverter<int>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_SealedEnvelope>.GetConversionActionTo_int()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int> ITypeConverter<BTTNFE_N4K_SealedEnvelope>.Enumerate_int(BTTNFE_N4K_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'BTTNFE_N4K_SealedEnvelope'.");
                
            }
            long ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertTo_long(BTTNFE_N4K_SealedEnvelope value)
            {
                return TypeConverter<long>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_SealedEnvelope>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<BTTNFE_N4K_SealedEnvelope>.Enumerate_long(BTTNFE_N4K_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_DateTime(DateTime value)
            {
                
                throw new InvalidCastException("Invalid cast from 'DateTime' to 'BTTNFE_N4K_SealedEnvelope'.");
                
            }
            DateTime ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertTo_DateTime(BTTNFE_N4K_SealedEnvelope value)
            {
                return TypeConverter<DateTime>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_SealedEnvelope>.GetConversionActionTo_DateTime()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<DateTime> ITypeConverter<BTTNFE_N4K_SealedEnvelope>.Enumerate_DateTime(BTTNFE_N4K_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    BTTNFE_N4K_SealedEnvelope intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = BTTNFE_N4K_SealedEnvelope.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "BTTNFE_N4K_SealedEnvelope");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertTo_string(BTTNFE_N4K_SealedEnvelope value)
            {
                return TypeConverter<string>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_SealedEnvelope>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<BTTNFE_N4K_SealedEnvelope>.Enumerate_string(BTTNFE_N4K_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_int_Array_150(int[] value)
            {
                
                throw new InvalidCastException("Invalid cast from 'int[]' to 'BTTNFE_N4K_SealedEnvelope'.");
                
            }
            int[] ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertTo_int_Array_150(BTTNFE_N4K_SealedEnvelope value)
            {
                return TypeConverter<int[]>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_SealedEnvelope>.GetConversionActionTo_int_Array_150()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int[]> ITypeConverter<BTTNFE_N4K_SealedEnvelope>.Enumerate_int_Array_150(BTTNFE_N4K_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_List_long(List<long> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<long>' to 'BTTNFE_N4K_SealedEnvelope'.");
                
            }
            List<long> ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertTo_List_long(BTTNFE_N4K_SealedEnvelope value)
            {
                return TypeConverter<List<long>>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_SealedEnvelope>.GetConversionActionTo_List_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<long>> ITypeConverter<BTTNFE_N4K_SealedEnvelope>.Enumerate_List_long(BTTNFE_N4K_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'BTTNFE_N4K_SealedEnvelope'.");
                
            }
            List<string> ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertTo_List_string(BTTNFE_N4K_SealedEnvelope value)
            {
                return TypeConverter<List<string>>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_SealedEnvelope>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<BTTNFE_N4K_SealedEnvelope>.Enumerate_List_string(BTTNFE_N4K_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_List_BTTKeyValuePair(List<BTTKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTKeyValuePair>' to 'BTTNFE_N4K_SealedEnvelope'.");
                
            }
            List<BTTKeyValuePair> ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertTo_List_BTTKeyValuePair(BTTNFE_N4K_SealedEnvelope value)
            {
                return TypeConverter<List<BTTKeyValuePair>>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_SealedEnvelope>.GetConversionActionTo_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTKeyValuePair>> ITypeConverter<BTTNFE_N4K_SealedEnvelope>.Enumerate_List_BTTKeyValuePair(BTTNFE_N4K_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_BTTClaim(BTTClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTClaim' to 'BTTNFE_N4K_SealedEnvelope'.");
                
            }
            BTTClaim ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertTo_BTTClaim(BTTNFE_N4K_SealedEnvelope value)
            {
                return TypeConverter<BTTClaim>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_SealedEnvelope>.GetConversionActionTo_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTClaim> ITypeConverter<BTTNFE_N4K_SealedEnvelope>.Enumerate_BTTClaim(BTTNFE_N4K_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_BTTEncryptedClaims(BTTEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims' to 'BTTNFE_N4K_SealedEnvelope'.");
                
            }
            BTTEncryptedClaims ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertTo_BTTEncryptedClaims(BTTNFE_N4K_SealedEnvelope value)
            {
                return TypeConverter<BTTEncryptedClaims>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_SealedEnvelope>.GetConversionActionTo_BTTEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims> ITypeConverter<BTTNFE_N4K_SealedEnvelope>.Enumerate_BTTEncryptedClaims(BTTNFE_N4K_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_BTTGenericCredential_Envelope(BTTGenericCredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_Envelope' to 'BTTNFE_N4K_SealedEnvelope'.");
                
            }
            BTTGenericCredential_Envelope ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertTo_BTTGenericCredential_Envelope(BTTNFE_N4K_SealedEnvelope value)
            {
                return TypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_SealedEnvelope>.GetConversionActionTo_BTTGenericCredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_Envelope> ITypeConverter<BTTNFE_N4K_SealedEnvelope>.Enumerate_BTTGenericCredential_Envelope(BTTNFE_N4K_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_BTTGenericCredential_EnvelopeContent(BTTGenericCredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeContent' to 'BTTNFE_N4K_SealedEnvelope'.");
                
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertTo_BTTGenericCredential_EnvelopeContent(BTTNFE_N4K_SealedEnvelope value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_SealedEnvelope>.GetConversionActionTo_BTTGenericCredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeContent> ITypeConverter<BTTNFE_N4K_SealedEnvelope>.Enumerate_BTTGenericCredential_EnvelopeContent(BTTNFE_N4K_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(BTTGenericCredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeSeal' to 'BTTNFE_N4K_SealedEnvelope'.");
                
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertTo_BTTGenericCredential_EnvelopeSeal(BTTNFE_N4K_SealedEnvelope value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_SealedEnvelope>.GetConversionActionTo_BTTGenericCredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeSeal> ITypeConverter<BTTNFE_N4K_SealedEnvelope>.Enumerate_BTTGenericCredential_EnvelopeSeal(BTTNFE_N4K_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_BTTGenericCredential_PackingLabel(BTTGenericCredential_PackingLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_PackingLabel' to 'BTTNFE_N4K_SealedEnvelope'.");
                
            }
            BTTGenericCredential_PackingLabel ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertTo_BTTGenericCredential_PackingLabel(BTTNFE_N4K_SealedEnvelope value)
            {
                return TypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_SealedEnvelope>.GetConversionActionTo_BTTGenericCredential_PackingLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_PackingLabel> ITypeConverter<BTTNFE_N4K_SealedEnvelope>.Enumerate_BTTGenericCredential_PackingLabel(BTTNFE_N4K_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_BTTKeyValuePair(BTTKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTKeyValuePair' to 'BTTNFE_N4K_SealedEnvelope'.");
                
            }
            BTTKeyValuePair ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertTo_BTTKeyValuePair(BTTNFE_N4K_SealedEnvelope value)
            {
                return TypeConverter<BTTKeyValuePair>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_SealedEnvelope>.GetConversionActionTo_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTKeyValuePair> ITypeConverter<BTTNFE_N4K_SealedEnvelope>.Enumerate_BTTKeyValuePair(BTTNFE_N4K_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_BTTNFE_N4K_Claims(BTTNFE_N4K_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims' to 'BTTNFE_N4K_SealedEnvelope'.");
                
            }
            BTTNFE_N4K_Claims ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertTo_BTTNFE_N4K_Claims(BTTNFE_N4K_SealedEnvelope value)
            {
                return TypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_SealedEnvelope>.GetConversionActionTo_BTTNFE_N4K_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims> ITypeConverter<BTTNFE_N4K_SealedEnvelope>.Enumerate_BTTNFE_N4K_Claims(BTTNFE_N4K_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_BTTNFE_N4K_Envelope(BTTNFE_N4K_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Envelope' to 'BTTNFE_N4K_SealedEnvelope'.");
                
            }
            BTTNFE_N4K_Envelope ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertTo_BTTNFE_N4K_Envelope(BTTNFE_N4K_SealedEnvelope value)
            {
                return TypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_SealedEnvelope>.GetConversionActionTo_BTTNFE_N4K_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Envelope> ITypeConverter<BTTNFE_N4K_SealedEnvelope>.Enumerate_BTTNFE_N4K_Envelope(BTTNFE_N4K_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(BTTNFE_N4K_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_EnvelopeContent' to 'BTTNFE_N4K_SealedEnvelope'.");
                
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertTo_BTTNFE_N4K_EnvelopeContent(BTTNFE_N4K_SealedEnvelope value)
            {
                return TypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_SealedEnvelope>.GetConversionActionTo_BTTNFE_N4K_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_EnvelopeContent> ITypeConverter<BTTNFE_N4K_SealedEnvelope>.Enumerate_BTTNFE_N4K_EnvelopeContent(BTTNFE_N4K_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(BTTNFE_N4K_SealedEnvelope value)
            {
                
                return (BTTNFE_N4K_SealedEnvelope)value;
                
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertTo_BTTNFE_N4K_SealedEnvelope(BTTNFE_N4K_SealedEnvelope value)
            {
                return TypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_SealedEnvelope>.GetConversionActionTo_BTTNFE_N4K_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_SealedEnvelope> ITypeConverter<BTTNFE_N4K_SealedEnvelope>.Enumerate_BTTNFE_N4K_SealedEnvelope(BTTNFE_N4K_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTVerifiableCredential_SealedEnvelope' to 'BTTNFE_N4K_SealedEnvelope'.");
                
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertTo_BTTVerifiableCredential_SealedEnvelope(BTTNFE_N4K_SealedEnvelope value)
            {
                return TypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_SealedEnvelope>.GetConversionActionTo_BTTVerifiableCredential_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTVerifiableCredential_SealedEnvelope> ITypeConverter<BTTNFE_N4K_SealedEnvelope>.Enumerate_BTTVerifiableCredential_SealedEnvelope(BTTNFE_N4K_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_BTTEncryptionFlag(BTTEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptionFlag' to 'BTTNFE_N4K_SealedEnvelope'.");
                
            }
            BTTEncryptionFlag ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertTo_BTTEncryptionFlag(BTTNFE_N4K_SealedEnvelope value)
            {
                return TypeConverter<BTTEncryptionFlag>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_SealedEnvelope>.GetConversionActionTo_BTTEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptionFlag> ITypeConverter<BTTNFE_N4K_SealedEnvelope>.Enumerate_BTTEncryptionFlag(BTTNFE_N4K_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_BTTGenericCredentialType(BTTGenericCredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredentialType' to 'BTTNFE_N4K_SealedEnvelope'.");
                
            }
            BTTGenericCredentialType ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertTo_BTTGenericCredentialType(BTTNFE_N4K_SealedEnvelope value)
            {
                return TypeConverter<BTTGenericCredentialType>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_SealedEnvelope>.GetConversionActionTo_BTTGenericCredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredentialType> ITypeConverter<BTTNFE_N4K_SealedEnvelope>.Enumerate_BTTGenericCredentialType(BTTNFE_N4K_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_BTTNFEBodyPart(BTTNFEBodyPart value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFEBodyPart' to 'BTTNFE_N4K_SealedEnvelope'.");
                
            }
            BTTNFEBodyPart ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertTo_BTTNFEBodyPart(BTTNFE_N4K_SealedEnvelope value)
            {
                return TypeConverter<BTTNFEBodyPart>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_SealedEnvelope>.GetConversionActionTo_BTTNFEBodyPart()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFEBodyPart> ITypeConverter<BTTNFE_N4K_SealedEnvelope>.Enumerate_BTTNFEBodyPart(BTTNFE_N4K_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_BTTTrustLevel(BTTTrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTTrustLevel' to 'BTTNFE_N4K_SealedEnvelope'.");
                
            }
            BTTTrustLevel ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertTo_BTTTrustLevel(BTTNFE_N4K_SealedEnvelope value)
            {
                return TypeConverter<BTTTrustLevel>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_SealedEnvelope>.GetConversionActionTo_BTTTrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTTrustLevel> ITypeConverter<BTTNFE_N4K_SealedEnvelope>.Enumerate_BTTTrustLevel(BTTNFE_N4K_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_List_List_BTTKeyValuePair(List<List<BTTKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<BTTKeyValuePair>>' to 'BTTNFE_N4K_SealedEnvelope'.");
                
            }
            List<List<BTTKeyValuePair>> ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertTo_List_List_BTTKeyValuePair(BTTNFE_N4K_SealedEnvelope value)
            {
                return TypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_SealedEnvelope>.GetConversionActionTo_List_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<BTTKeyValuePair>>> ITypeConverter<BTTNFE_N4K_SealedEnvelope>.Enumerate_List_List_BTTKeyValuePair(BTTNFE_N4K_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_List_BTTClaim(List<BTTClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTClaim>' to 'BTTNFE_N4K_SealedEnvelope'.");
                
            }
            List<BTTClaim> ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertTo_List_BTTClaim(BTTNFE_N4K_SealedEnvelope value)
            {
                return TypeConverter<List<BTTClaim>>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_SealedEnvelope>.GetConversionActionTo_List_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTClaim>> ITypeConverter<BTTNFE_N4K_SealedEnvelope>.Enumerate_List_BTTClaim(BTTNFE_N4K_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_BTTEncryptedClaims_nullable(BTTEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims?' to 'BTTNFE_N4K_SealedEnvelope'.");
                
            }
            BTTEncryptedClaims? ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertTo_BTTEncryptedClaims_nullable(BTTNFE_N4K_SealedEnvelope value)
            {
                return TypeConverter<BTTEncryptedClaims?>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_SealedEnvelope>.GetConversionActionTo_BTTEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims?> ITypeConverter<BTTNFE_N4K_SealedEnvelope>.Enumerate_BTTEncryptedClaims_nullable(BTTNFE_N4K_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_BTTNFE_N4K_Claims_nullable(BTTNFE_N4K_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims?' to 'BTTNFE_N4K_SealedEnvelope'.");
                
            }
            BTTNFE_N4K_Claims? ITypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertTo_BTTNFE_N4K_Claims_nullable(BTTNFE_N4K_SealedEnvelope value)
            {
                return TypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_SealedEnvelope>.GetConversionActionTo_BTTNFE_N4K_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims?> ITypeConverter<BTTNFE_N4K_SealedEnvelope>.Enumerate_BTTNFE_N4K_Claims_nullable(BTTNFE_N4K_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'BTTVerifiableCredential_SealedEnvelope'.");
                
            }
            bool ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertTo_bool(BTTVerifiableCredential_SealedEnvelope value)
            {
                return TypeConverter<bool>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.Enumerate_bool(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_int(int value)
            {
                
                throw new InvalidCastException("Invalid cast from 'int' to 'BTTVerifiableCredential_SealedEnvelope'.");
                
            }
            int ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertTo_int(BTTVerifiableCredential_SealedEnvelope value)
            {
                return TypeConverter<int>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.GetConversionActionTo_int()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int> ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.Enumerate_int(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'BTTVerifiableCredential_SealedEnvelope'.");
                
            }
            long ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertTo_long(BTTVerifiableCredential_SealedEnvelope value)
            {
                return TypeConverter<long>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.Enumerate_long(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_DateTime(DateTime value)
            {
                
                throw new InvalidCastException("Invalid cast from 'DateTime' to 'BTTVerifiableCredential_SealedEnvelope'.");
                
            }
            DateTime ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertTo_DateTime(BTTVerifiableCredential_SealedEnvelope value)
            {
                return TypeConverter<DateTime>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.GetConversionActionTo_DateTime()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<DateTime> ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.Enumerate_DateTime(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    BTTVerifiableCredential_SealedEnvelope intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = BTTVerifiableCredential_SealedEnvelope.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "BTTVerifiableCredential_SealedEnvelope");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertTo_string(BTTVerifiableCredential_SealedEnvelope value)
            {
                return TypeConverter<string>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.Enumerate_string(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_int_Array_150(int[] value)
            {
                
                throw new InvalidCastException("Invalid cast from 'int[]' to 'BTTVerifiableCredential_SealedEnvelope'.");
                
            }
            int[] ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertTo_int_Array_150(BTTVerifiableCredential_SealedEnvelope value)
            {
                return TypeConverter<int[]>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.GetConversionActionTo_int_Array_150()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int[]> ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.Enumerate_int_Array_150(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_List_long(List<long> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<long>' to 'BTTVerifiableCredential_SealedEnvelope'.");
                
            }
            List<long> ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertTo_List_long(BTTVerifiableCredential_SealedEnvelope value)
            {
                return TypeConverter<List<long>>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.GetConversionActionTo_List_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<long>> ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.Enumerate_List_long(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'BTTVerifiableCredential_SealedEnvelope'.");
                
            }
            List<string> ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertTo_List_string(BTTVerifiableCredential_SealedEnvelope value)
            {
                return TypeConverter<List<string>>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.Enumerate_List_string(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_List_BTTKeyValuePair(List<BTTKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTKeyValuePair>' to 'BTTVerifiableCredential_SealedEnvelope'.");
                
            }
            List<BTTKeyValuePair> ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertTo_List_BTTKeyValuePair(BTTVerifiableCredential_SealedEnvelope value)
            {
                return TypeConverter<List<BTTKeyValuePair>>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.GetConversionActionTo_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTKeyValuePair>> ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.Enumerate_List_BTTKeyValuePair(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_BTTClaim(BTTClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTClaim' to 'BTTVerifiableCredential_SealedEnvelope'.");
                
            }
            BTTClaim ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertTo_BTTClaim(BTTVerifiableCredential_SealedEnvelope value)
            {
                return TypeConverter<BTTClaim>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.GetConversionActionTo_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTClaim> ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.Enumerate_BTTClaim(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_BTTEncryptedClaims(BTTEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims' to 'BTTVerifiableCredential_SealedEnvelope'.");
                
            }
            BTTEncryptedClaims ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertTo_BTTEncryptedClaims(BTTVerifiableCredential_SealedEnvelope value)
            {
                return TypeConverter<BTTEncryptedClaims>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.GetConversionActionTo_BTTEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims> ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.Enumerate_BTTEncryptedClaims(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_BTTGenericCredential_Envelope(BTTGenericCredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_Envelope' to 'BTTVerifiableCredential_SealedEnvelope'.");
                
            }
            BTTGenericCredential_Envelope ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertTo_BTTGenericCredential_Envelope(BTTVerifiableCredential_SealedEnvelope value)
            {
                return TypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.GetConversionActionTo_BTTGenericCredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_Envelope> ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.Enumerate_BTTGenericCredential_Envelope(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_BTTGenericCredential_EnvelopeContent(BTTGenericCredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeContent' to 'BTTVerifiableCredential_SealedEnvelope'.");
                
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertTo_BTTGenericCredential_EnvelopeContent(BTTVerifiableCredential_SealedEnvelope value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.GetConversionActionTo_BTTGenericCredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeContent> ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.Enumerate_BTTGenericCredential_EnvelopeContent(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(BTTGenericCredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeSeal' to 'BTTVerifiableCredential_SealedEnvelope'.");
                
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertTo_BTTGenericCredential_EnvelopeSeal(BTTVerifiableCredential_SealedEnvelope value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.GetConversionActionTo_BTTGenericCredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeSeal> ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.Enumerate_BTTGenericCredential_EnvelopeSeal(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_BTTGenericCredential_PackingLabel(BTTGenericCredential_PackingLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_PackingLabel' to 'BTTVerifiableCredential_SealedEnvelope'.");
                
            }
            BTTGenericCredential_PackingLabel ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertTo_BTTGenericCredential_PackingLabel(BTTVerifiableCredential_SealedEnvelope value)
            {
                return TypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.GetConversionActionTo_BTTGenericCredential_PackingLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_PackingLabel> ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.Enumerate_BTTGenericCredential_PackingLabel(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_BTTKeyValuePair(BTTKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTKeyValuePair' to 'BTTVerifiableCredential_SealedEnvelope'.");
                
            }
            BTTKeyValuePair ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertTo_BTTKeyValuePair(BTTVerifiableCredential_SealedEnvelope value)
            {
                return TypeConverter<BTTKeyValuePair>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.GetConversionActionTo_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTKeyValuePair> ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.Enumerate_BTTKeyValuePair(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_BTTNFE_N4K_Claims(BTTNFE_N4K_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims' to 'BTTVerifiableCredential_SealedEnvelope'.");
                
            }
            BTTNFE_N4K_Claims ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertTo_BTTNFE_N4K_Claims(BTTVerifiableCredential_SealedEnvelope value)
            {
                return TypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.GetConversionActionTo_BTTNFE_N4K_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims> ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.Enumerate_BTTNFE_N4K_Claims(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_BTTNFE_N4K_Envelope(BTTNFE_N4K_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Envelope' to 'BTTVerifiableCredential_SealedEnvelope'.");
                
            }
            BTTNFE_N4K_Envelope ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertTo_BTTNFE_N4K_Envelope(BTTVerifiableCredential_SealedEnvelope value)
            {
                return TypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.GetConversionActionTo_BTTNFE_N4K_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Envelope> ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.Enumerate_BTTNFE_N4K_Envelope(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(BTTNFE_N4K_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_EnvelopeContent' to 'BTTVerifiableCredential_SealedEnvelope'.");
                
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertTo_BTTNFE_N4K_EnvelopeContent(BTTVerifiableCredential_SealedEnvelope value)
            {
                return TypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.GetConversionActionTo_BTTNFE_N4K_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_EnvelopeContent> ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.Enumerate_BTTNFE_N4K_EnvelopeContent(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(BTTNFE_N4K_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_SealedEnvelope' to 'BTTVerifiableCredential_SealedEnvelope'.");
                
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertTo_BTTNFE_N4K_SealedEnvelope(BTTVerifiableCredential_SealedEnvelope value)
            {
                return TypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.GetConversionActionTo_BTTNFE_N4K_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_SealedEnvelope> ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.Enumerate_BTTNFE_N4K_SealedEnvelope(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                return (BTTVerifiableCredential_SealedEnvelope)value;
                
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertTo_BTTVerifiableCredential_SealedEnvelope(BTTVerifiableCredential_SealedEnvelope value)
            {
                return TypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.GetConversionActionTo_BTTVerifiableCredential_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTVerifiableCredential_SealedEnvelope> ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.Enumerate_BTTVerifiableCredential_SealedEnvelope(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_BTTEncryptionFlag(BTTEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptionFlag' to 'BTTVerifiableCredential_SealedEnvelope'.");
                
            }
            BTTEncryptionFlag ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertTo_BTTEncryptionFlag(BTTVerifiableCredential_SealedEnvelope value)
            {
                return TypeConverter<BTTEncryptionFlag>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.GetConversionActionTo_BTTEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptionFlag> ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.Enumerate_BTTEncryptionFlag(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_BTTGenericCredentialType(BTTGenericCredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredentialType' to 'BTTVerifiableCredential_SealedEnvelope'.");
                
            }
            BTTGenericCredentialType ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertTo_BTTGenericCredentialType(BTTVerifiableCredential_SealedEnvelope value)
            {
                return TypeConverter<BTTGenericCredentialType>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.GetConversionActionTo_BTTGenericCredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredentialType> ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.Enumerate_BTTGenericCredentialType(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_BTTNFEBodyPart(BTTNFEBodyPart value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFEBodyPart' to 'BTTVerifiableCredential_SealedEnvelope'.");
                
            }
            BTTNFEBodyPart ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertTo_BTTNFEBodyPart(BTTVerifiableCredential_SealedEnvelope value)
            {
                return TypeConverter<BTTNFEBodyPart>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.GetConversionActionTo_BTTNFEBodyPart()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFEBodyPart> ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.Enumerate_BTTNFEBodyPart(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_BTTTrustLevel(BTTTrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTTrustLevel' to 'BTTVerifiableCredential_SealedEnvelope'.");
                
            }
            BTTTrustLevel ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertTo_BTTTrustLevel(BTTVerifiableCredential_SealedEnvelope value)
            {
                return TypeConverter<BTTTrustLevel>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.GetConversionActionTo_BTTTrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTTrustLevel> ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.Enumerate_BTTTrustLevel(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_List_List_BTTKeyValuePair(List<List<BTTKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<BTTKeyValuePair>>' to 'BTTVerifiableCredential_SealedEnvelope'.");
                
            }
            List<List<BTTKeyValuePair>> ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertTo_List_List_BTTKeyValuePair(BTTVerifiableCredential_SealedEnvelope value)
            {
                return TypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.GetConversionActionTo_List_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<BTTKeyValuePair>>> ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.Enumerate_List_List_BTTKeyValuePair(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_List_BTTClaim(List<BTTClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTClaim>' to 'BTTVerifiableCredential_SealedEnvelope'.");
                
            }
            List<BTTClaim> ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertTo_List_BTTClaim(BTTVerifiableCredential_SealedEnvelope value)
            {
                return TypeConverter<List<BTTClaim>>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.GetConversionActionTo_List_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTClaim>> ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.Enumerate_List_BTTClaim(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_BTTEncryptedClaims_nullable(BTTEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims?' to 'BTTVerifiableCredential_SealedEnvelope'.");
                
            }
            BTTEncryptedClaims? ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertTo_BTTEncryptedClaims_nullable(BTTVerifiableCredential_SealedEnvelope value)
            {
                return TypeConverter<BTTEncryptedClaims?>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.GetConversionActionTo_BTTEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims?> ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.Enumerate_BTTEncryptedClaims_nullable(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_BTTNFE_N4K_Claims_nullable(BTTNFE_N4K_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims?' to 'BTTVerifiableCredential_SealedEnvelope'.");
                
            }
            BTTNFE_N4K_Claims? ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertTo_BTTNFE_N4K_Claims_nullable(BTTVerifiableCredential_SealedEnvelope value)
            {
                return TypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(value);
            }
            TypeConversionAction ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.GetConversionActionTo_BTTNFE_N4K_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims?> ITypeConverter<BTTVerifiableCredential_SealedEnvelope>.Enumerate_BTTNFE_N4K_Claims_nullable(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                yield break;
            }
            BTTEncryptionFlag ITypeConverter<BTTEncryptionFlag>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'BTTEncryptionFlag'.");
                
            }
            bool ITypeConverter<BTTEncryptionFlag>.ConvertTo_bool(BTTEncryptionFlag value)
            {
                return TypeConverter<bool>.ConvertFrom_BTTEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptionFlag>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<BTTEncryptionFlag>.Enumerate_bool(BTTEncryptionFlag value)
            {
                
                yield break;
            }
            BTTEncryptionFlag ITypeConverter<BTTEncryptionFlag>.ConvertFrom_int(int value)
            {
                
                throw new InvalidCastException("Invalid cast from 'int' to 'BTTEncryptionFlag'.");
                
            }
            int ITypeConverter<BTTEncryptionFlag>.ConvertTo_int(BTTEncryptionFlag value)
            {
                return TypeConverter<int>.ConvertFrom_BTTEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptionFlag>.GetConversionActionTo_int()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int> ITypeConverter<BTTEncryptionFlag>.Enumerate_int(BTTEncryptionFlag value)
            {
                
                yield break;
            }
            BTTEncryptionFlag ITypeConverter<BTTEncryptionFlag>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'BTTEncryptionFlag'.");
                
            }
            long ITypeConverter<BTTEncryptionFlag>.ConvertTo_long(BTTEncryptionFlag value)
            {
                return TypeConverter<long>.ConvertFrom_BTTEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptionFlag>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<BTTEncryptionFlag>.Enumerate_long(BTTEncryptionFlag value)
            {
                
                yield break;
            }
            BTTEncryptionFlag ITypeConverter<BTTEncryptionFlag>.ConvertFrom_DateTime(DateTime value)
            {
                
                throw new InvalidCastException("Invalid cast from 'DateTime' to 'BTTEncryptionFlag'.");
                
            }
            DateTime ITypeConverter<BTTEncryptionFlag>.ConvertTo_DateTime(BTTEncryptionFlag value)
            {
                return TypeConverter<DateTime>.ConvertFrom_BTTEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptionFlag>.GetConversionActionTo_DateTime()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<DateTime> ITypeConverter<BTTEncryptionFlag>.Enumerate_DateTime(BTTEncryptionFlag value)
            {
                
                yield break;
            }
            BTTEncryptionFlag ITypeConverter<BTTEncryptionFlag>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    BTTEncryptionFlag intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = BTTEncryptionFlag.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "BTTEncryptionFlag");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<BTTEncryptionFlag>.ConvertTo_string(BTTEncryptionFlag value)
            {
                return TypeConverter<string>.ConvertFrom_BTTEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptionFlag>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<BTTEncryptionFlag>.Enumerate_string(BTTEncryptionFlag value)
            {
                
                yield break;
            }
            BTTEncryptionFlag ITypeConverter<BTTEncryptionFlag>.ConvertFrom_int_Array_150(int[] value)
            {
                
                throw new InvalidCastException("Invalid cast from 'int[]' to 'BTTEncryptionFlag'.");
                
            }
            int[] ITypeConverter<BTTEncryptionFlag>.ConvertTo_int_Array_150(BTTEncryptionFlag value)
            {
                return TypeConverter<int[]>.ConvertFrom_BTTEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptionFlag>.GetConversionActionTo_int_Array_150()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int[]> ITypeConverter<BTTEncryptionFlag>.Enumerate_int_Array_150(BTTEncryptionFlag value)
            {
                
                yield break;
            }
            BTTEncryptionFlag ITypeConverter<BTTEncryptionFlag>.ConvertFrom_List_long(List<long> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<long>' to 'BTTEncryptionFlag'.");
                
            }
            List<long> ITypeConverter<BTTEncryptionFlag>.ConvertTo_List_long(BTTEncryptionFlag value)
            {
                return TypeConverter<List<long>>.ConvertFrom_BTTEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptionFlag>.GetConversionActionTo_List_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<long>> ITypeConverter<BTTEncryptionFlag>.Enumerate_List_long(BTTEncryptionFlag value)
            {
                
                yield break;
            }
            BTTEncryptionFlag ITypeConverter<BTTEncryptionFlag>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'BTTEncryptionFlag'.");
                
            }
            List<string> ITypeConverter<BTTEncryptionFlag>.ConvertTo_List_string(BTTEncryptionFlag value)
            {
                return TypeConverter<List<string>>.ConvertFrom_BTTEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptionFlag>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<BTTEncryptionFlag>.Enumerate_List_string(BTTEncryptionFlag value)
            {
                
                yield break;
            }
            BTTEncryptionFlag ITypeConverter<BTTEncryptionFlag>.ConvertFrom_List_BTTKeyValuePair(List<BTTKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTKeyValuePair>' to 'BTTEncryptionFlag'.");
                
            }
            List<BTTKeyValuePair> ITypeConverter<BTTEncryptionFlag>.ConvertTo_List_BTTKeyValuePair(BTTEncryptionFlag value)
            {
                return TypeConverter<List<BTTKeyValuePair>>.ConvertFrom_BTTEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptionFlag>.GetConversionActionTo_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTKeyValuePair>> ITypeConverter<BTTEncryptionFlag>.Enumerate_List_BTTKeyValuePair(BTTEncryptionFlag value)
            {
                
                yield break;
            }
            BTTEncryptionFlag ITypeConverter<BTTEncryptionFlag>.ConvertFrom_BTTClaim(BTTClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTClaim' to 'BTTEncryptionFlag'.");
                
            }
            BTTClaim ITypeConverter<BTTEncryptionFlag>.ConvertTo_BTTClaim(BTTEncryptionFlag value)
            {
                return TypeConverter<BTTClaim>.ConvertFrom_BTTEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptionFlag>.GetConversionActionTo_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTClaim> ITypeConverter<BTTEncryptionFlag>.Enumerate_BTTClaim(BTTEncryptionFlag value)
            {
                
                yield break;
            }
            BTTEncryptionFlag ITypeConverter<BTTEncryptionFlag>.ConvertFrom_BTTEncryptedClaims(BTTEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims' to 'BTTEncryptionFlag'.");
                
            }
            BTTEncryptedClaims ITypeConverter<BTTEncryptionFlag>.ConvertTo_BTTEncryptedClaims(BTTEncryptionFlag value)
            {
                return TypeConverter<BTTEncryptedClaims>.ConvertFrom_BTTEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptionFlag>.GetConversionActionTo_BTTEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims> ITypeConverter<BTTEncryptionFlag>.Enumerate_BTTEncryptedClaims(BTTEncryptionFlag value)
            {
                
                yield break;
            }
            BTTEncryptionFlag ITypeConverter<BTTEncryptionFlag>.ConvertFrom_BTTGenericCredential_Envelope(BTTGenericCredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_Envelope' to 'BTTEncryptionFlag'.");
                
            }
            BTTGenericCredential_Envelope ITypeConverter<BTTEncryptionFlag>.ConvertTo_BTTGenericCredential_Envelope(BTTEncryptionFlag value)
            {
                return TypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_BTTEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptionFlag>.GetConversionActionTo_BTTGenericCredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_Envelope> ITypeConverter<BTTEncryptionFlag>.Enumerate_BTTGenericCredential_Envelope(BTTEncryptionFlag value)
            {
                
                yield break;
            }
            BTTEncryptionFlag ITypeConverter<BTTEncryptionFlag>.ConvertFrom_BTTGenericCredential_EnvelopeContent(BTTGenericCredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeContent' to 'BTTEncryptionFlag'.");
                
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<BTTEncryptionFlag>.ConvertTo_BTTGenericCredential_EnvelopeContent(BTTEncryptionFlag value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_BTTEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptionFlag>.GetConversionActionTo_BTTGenericCredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeContent> ITypeConverter<BTTEncryptionFlag>.Enumerate_BTTGenericCredential_EnvelopeContent(BTTEncryptionFlag value)
            {
                
                yield break;
            }
            BTTEncryptionFlag ITypeConverter<BTTEncryptionFlag>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(BTTGenericCredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeSeal' to 'BTTEncryptionFlag'.");
                
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<BTTEncryptionFlag>.ConvertTo_BTTGenericCredential_EnvelopeSeal(BTTEncryptionFlag value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_BTTEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptionFlag>.GetConversionActionTo_BTTGenericCredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeSeal> ITypeConverter<BTTEncryptionFlag>.Enumerate_BTTGenericCredential_EnvelopeSeal(BTTEncryptionFlag value)
            {
                
                yield break;
            }
            BTTEncryptionFlag ITypeConverter<BTTEncryptionFlag>.ConvertFrom_BTTGenericCredential_PackingLabel(BTTGenericCredential_PackingLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_PackingLabel' to 'BTTEncryptionFlag'.");
                
            }
            BTTGenericCredential_PackingLabel ITypeConverter<BTTEncryptionFlag>.ConvertTo_BTTGenericCredential_PackingLabel(BTTEncryptionFlag value)
            {
                return TypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_BTTEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptionFlag>.GetConversionActionTo_BTTGenericCredential_PackingLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_PackingLabel> ITypeConverter<BTTEncryptionFlag>.Enumerate_BTTGenericCredential_PackingLabel(BTTEncryptionFlag value)
            {
                
                yield break;
            }
            BTTEncryptionFlag ITypeConverter<BTTEncryptionFlag>.ConvertFrom_BTTKeyValuePair(BTTKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTKeyValuePair' to 'BTTEncryptionFlag'.");
                
            }
            BTTKeyValuePair ITypeConverter<BTTEncryptionFlag>.ConvertTo_BTTKeyValuePair(BTTEncryptionFlag value)
            {
                return TypeConverter<BTTKeyValuePair>.ConvertFrom_BTTEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptionFlag>.GetConversionActionTo_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTKeyValuePair> ITypeConverter<BTTEncryptionFlag>.Enumerate_BTTKeyValuePair(BTTEncryptionFlag value)
            {
                
                yield break;
            }
            BTTEncryptionFlag ITypeConverter<BTTEncryptionFlag>.ConvertFrom_BTTNFE_N4K_Claims(BTTNFE_N4K_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims' to 'BTTEncryptionFlag'.");
                
            }
            BTTNFE_N4K_Claims ITypeConverter<BTTEncryptionFlag>.ConvertTo_BTTNFE_N4K_Claims(BTTEncryptionFlag value)
            {
                return TypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_BTTEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptionFlag>.GetConversionActionTo_BTTNFE_N4K_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims> ITypeConverter<BTTEncryptionFlag>.Enumerate_BTTNFE_N4K_Claims(BTTEncryptionFlag value)
            {
                
                yield break;
            }
            BTTEncryptionFlag ITypeConverter<BTTEncryptionFlag>.ConvertFrom_BTTNFE_N4K_Envelope(BTTNFE_N4K_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Envelope' to 'BTTEncryptionFlag'.");
                
            }
            BTTNFE_N4K_Envelope ITypeConverter<BTTEncryptionFlag>.ConvertTo_BTTNFE_N4K_Envelope(BTTEncryptionFlag value)
            {
                return TypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_BTTEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptionFlag>.GetConversionActionTo_BTTNFE_N4K_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Envelope> ITypeConverter<BTTEncryptionFlag>.Enumerate_BTTNFE_N4K_Envelope(BTTEncryptionFlag value)
            {
                
                yield break;
            }
            BTTEncryptionFlag ITypeConverter<BTTEncryptionFlag>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(BTTNFE_N4K_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_EnvelopeContent' to 'BTTEncryptionFlag'.");
                
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<BTTEncryptionFlag>.ConvertTo_BTTNFE_N4K_EnvelopeContent(BTTEncryptionFlag value)
            {
                return TypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_BTTEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptionFlag>.GetConversionActionTo_BTTNFE_N4K_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_EnvelopeContent> ITypeConverter<BTTEncryptionFlag>.Enumerate_BTTNFE_N4K_EnvelopeContent(BTTEncryptionFlag value)
            {
                
                yield break;
            }
            BTTEncryptionFlag ITypeConverter<BTTEncryptionFlag>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(BTTNFE_N4K_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_SealedEnvelope' to 'BTTEncryptionFlag'.");
                
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<BTTEncryptionFlag>.ConvertTo_BTTNFE_N4K_SealedEnvelope(BTTEncryptionFlag value)
            {
                return TypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_BTTEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptionFlag>.GetConversionActionTo_BTTNFE_N4K_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_SealedEnvelope> ITypeConverter<BTTEncryptionFlag>.Enumerate_BTTNFE_N4K_SealedEnvelope(BTTEncryptionFlag value)
            {
                
                yield break;
            }
            BTTEncryptionFlag ITypeConverter<BTTEncryptionFlag>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTVerifiableCredential_SealedEnvelope' to 'BTTEncryptionFlag'.");
                
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<BTTEncryptionFlag>.ConvertTo_BTTVerifiableCredential_SealedEnvelope(BTTEncryptionFlag value)
            {
                return TypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_BTTEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptionFlag>.GetConversionActionTo_BTTVerifiableCredential_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTVerifiableCredential_SealedEnvelope> ITypeConverter<BTTEncryptionFlag>.Enumerate_BTTVerifiableCredential_SealedEnvelope(BTTEncryptionFlag value)
            {
                
                yield break;
            }
            BTTEncryptionFlag ITypeConverter<BTTEncryptionFlag>.ConvertFrom_BTTEncryptionFlag(BTTEncryptionFlag value)
            {
                
                return (BTTEncryptionFlag)value;
                
            }
            BTTEncryptionFlag ITypeConverter<BTTEncryptionFlag>.ConvertTo_BTTEncryptionFlag(BTTEncryptionFlag value)
            {
                return TypeConverter<BTTEncryptionFlag>.ConvertFrom_BTTEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptionFlag>.GetConversionActionTo_BTTEncryptionFlag()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptionFlag> ITypeConverter<BTTEncryptionFlag>.Enumerate_BTTEncryptionFlag(BTTEncryptionFlag value)
            {
                
                yield break;
            }
            BTTEncryptionFlag ITypeConverter<BTTEncryptionFlag>.ConvertFrom_BTTGenericCredentialType(BTTGenericCredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredentialType' to 'BTTEncryptionFlag'.");
                
            }
            BTTGenericCredentialType ITypeConverter<BTTEncryptionFlag>.ConvertTo_BTTGenericCredentialType(BTTEncryptionFlag value)
            {
                return TypeConverter<BTTGenericCredentialType>.ConvertFrom_BTTEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptionFlag>.GetConversionActionTo_BTTGenericCredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredentialType> ITypeConverter<BTTEncryptionFlag>.Enumerate_BTTGenericCredentialType(BTTEncryptionFlag value)
            {
                
                yield break;
            }
            BTTEncryptionFlag ITypeConverter<BTTEncryptionFlag>.ConvertFrom_BTTNFEBodyPart(BTTNFEBodyPart value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFEBodyPart' to 'BTTEncryptionFlag'.");
                
            }
            BTTNFEBodyPart ITypeConverter<BTTEncryptionFlag>.ConvertTo_BTTNFEBodyPart(BTTEncryptionFlag value)
            {
                return TypeConverter<BTTNFEBodyPart>.ConvertFrom_BTTEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptionFlag>.GetConversionActionTo_BTTNFEBodyPart()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFEBodyPart> ITypeConverter<BTTEncryptionFlag>.Enumerate_BTTNFEBodyPart(BTTEncryptionFlag value)
            {
                
                yield break;
            }
            BTTEncryptionFlag ITypeConverter<BTTEncryptionFlag>.ConvertFrom_BTTTrustLevel(BTTTrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTTrustLevel' to 'BTTEncryptionFlag'.");
                
            }
            BTTTrustLevel ITypeConverter<BTTEncryptionFlag>.ConvertTo_BTTTrustLevel(BTTEncryptionFlag value)
            {
                return TypeConverter<BTTTrustLevel>.ConvertFrom_BTTEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptionFlag>.GetConversionActionTo_BTTTrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTTrustLevel> ITypeConverter<BTTEncryptionFlag>.Enumerate_BTTTrustLevel(BTTEncryptionFlag value)
            {
                
                yield break;
            }
            BTTEncryptionFlag ITypeConverter<BTTEncryptionFlag>.ConvertFrom_List_List_BTTKeyValuePair(List<List<BTTKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<BTTKeyValuePair>>' to 'BTTEncryptionFlag'.");
                
            }
            List<List<BTTKeyValuePair>> ITypeConverter<BTTEncryptionFlag>.ConvertTo_List_List_BTTKeyValuePair(BTTEncryptionFlag value)
            {
                return TypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_BTTEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptionFlag>.GetConversionActionTo_List_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<BTTKeyValuePair>>> ITypeConverter<BTTEncryptionFlag>.Enumerate_List_List_BTTKeyValuePair(BTTEncryptionFlag value)
            {
                
                yield break;
            }
            BTTEncryptionFlag ITypeConverter<BTTEncryptionFlag>.ConvertFrom_List_BTTClaim(List<BTTClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTClaim>' to 'BTTEncryptionFlag'.");
                
            }
            List<BTTClaim> ITypeConverter<BTTEncryptionFlag>.ConvertTo_List_BTTClaim(BTTEncryptionFlag value)
            {
                return TypeConverter<List<BTTClaim>>.ConvertFrom_BTTEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptionFlag>.GetConversionActionTo_List_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTClaim>> ITypeConverter<BTTEncryptionFlag>.Enumerate_List_BTTClaim(BTTEncryptionFlag value)
            {
                
                yield break;
            }
            BTTEncryptionFlag ITypeConverter<BTTEncryptionFlag>.ConvertFrom_BTTEncryptedClaims_nullable(BTTEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims?' to 'BTTEncryptionFlag'.");
                
            }
            BTTEncryptedClaims? ITypeConverter<BTTEncryptionFlag>.ConvertTo_BTTEncryptedClaims_nullable(BTTEncryptionFlag value)
            {
                return TypeConverter<BTTEncryptedClaims?>.ConvertFrom_BTTEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptionFlag>.GetConversionActionTo_BTTEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims?> ITypeConverter<BTTEncryptionFlag>.Enumerate_BTTEncryptedClaims_nullable(BTTEncryptionFlag value)
            {
                
                yield break;
            }
            BTTEncryptionFlag ITypeConverter<BTTEncryptionFlag>.ConvertFrom_BTTNFE_N4K_Claims_nullable(BTTNFE_N4K_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims?' to 'BTTEncryptionFlag'.");
                
            }
            BTTNFE_N4K_Claims? ITypeConverter<BTTEncryptionFlag>.ConvertTo_BTTNFE_N4K_Claims_nullable(BTTEncryptionFlag value)
            {
                return TypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_BTTEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptionFlag>.GetConversionActionTo_BTTNFE_N4K_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims?> ITypeConverter<BTTEncryptionFlag>.Enumerate_BTTNFE_N4K_Claims_nullable(BTTEncryptionFlag value)
            {
                
                yield break;
            }
            BTTGenericCredentialType ITypeConverter<BTTGenericCredentialType>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'BTTGenericCredentialType'.");
                
            }
            bool ITypeConverter<BTTGenericCredentialType>.ConvertTo_bool(BTTGenericCredentialType value)
            {
                return TypeConverter<bool>.ConvertFrom_BTTGenericCredentialType(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredentialType>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<BTTGenericCredentialType>.Enumerate_bool(BTTGenericCredentialType value)
            {
                
                yield break;
            }
            BTTGenericCredentialType ITypeConverter<BTTGenericCredentialType>.ConvertFrom_int(int value)
            {
                
                throw new InvalidCastException("Invalid cast from 'int' to 'BTTGenericCredentialType'.");
                
            }
            int ITypeConverter<BTTGenericCredentialType>.ConvertTo_int(BTTGenericCredentialType value)
            {
                return TypeConverter<int>.ConvertFrom_BTTGenericCredentialType(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredentialType>.GetConversionActionTo_int()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int> ITypeConverter<BTTGenericCredentialType>.Enumerate_int(BTTGenericCredentialType value)
            {
                
                yield break;
            }
            BTTGenericCredentialType ITypeConverter<BTTGenericCredentialType>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'BTTGenericCredentialType'.");
                
            }
            long ITypeConverter<BTTGenericCredentialType>.ConvertTo_long(BTTGenericCredentialType value)
            {
                return TypeConverter<long>.ConvertFrom_BTTGenericCredentialType(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredentialType>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<BTTGenericCredentialType>.Enumerate_long(BTTGenericCredentialType value)
            {
                
                yield break;
            }
            BTTGenericCredentialType ITypeConverter<BTTGenericCredentialType>.ConvertFrom_DateTime(DateTime value)
            {
                
                throw new InvalidCastException("Invalid cast from 'DateTime' to 'BTTGenericCredentialType'.");
                
            }
            DateTime ITypeConverter<BTTGenericCredentialType>.ConvertTo_DateTime(BTTGenericCredentialType value)
            {
                return TypeConverter<DateTime>.ConvertFrom_BTTGenericCredentialType(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredentialType>.GetConversionActionTo_DateTime()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<DateTime> ITypeConverter<BTTGenericCredentialType>.Enumerate_DateTime(BTTGenericCredentialType value)
            {
                
                yield break;
            }
            BTTGenericCredentialType ITypeConverter<BTTGenericCredentialType>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    BTTGenericCredentialType intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = BTTGenericCredentialType.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "BTTGenericCredentialType");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<BTTGenericCredentialType>.ConvertTo_string(BTTGenericCredentialType value)
            {
                return TypeConverter<string>.ConvertFrom_BTTGenericCredentialType(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredentialType>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<BTTGenericCredentialType>.Enumerate_string(BTTGenericCredentialType value)
            {
                
                yield break;
            }
            BTTGenericCredentialType ITypeConverter<BTTGenericCredentialType>.ConvertFrom_int_Array_150(int[] value)
            {
                
                throw new InvalidCastException("Invalid cast from 'int[]' to 'BTTGenericCredentialType'.");
                
            }
            int[] ITypeConverter<BTTGenericCredentialType>.ConvertTo_int_Array_150(BTTGenericCredentialType value)
            {
                return TypeConverter<int[]>.ConvertFrom_BTTGenericCredentialType(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredentialType>.GetConversionActionTo_int_Array_150()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int[]> ITypeConverter<BTTGenericCredentialType>.Enumerate_int_Array_150(BTTGenericCredentialType value)
            {
                
                yield break;
            }
            BTTGenericCredentialType ITypeConverter<BTTGenericCredentialType>.ConvertFrom_List_long(List<long> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<long>' to 'BTTGenericCredentialType'.");
                
            }
            List<long> ITypeConverter<BTTGenericCredentialType>.ConvertTo_List_long(BTTGenericCredentialType value)
            {
                return TypeConverter<List<long>>.ConvertFrom_BTTGenericCredentialType(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredentialType>.GetConversionActionTo_List_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<long>> ITypeConverter<BTTGenericCredentialType>.Enumerate_List_long(BTTGenericCredentialType value)
            {
                
                yield break;
            }
            BTTGenericCredentialType ITypeConverter<BTTGenericCredentialType>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'BTTGenericCredentialType'.");
                
            }
            List<string> ITypeConverter<BTTGenericCredentialType>.ConvertTo_List_string(BTTGenericCredentialType value)
            {
                return TypeConverter<List<string>>.ConvertFrom_BTTGenericCredentialType(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredentialType>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<BTTGenericCredentialType>.Enumerate_List_string(BTTGenericCredentialType value)
            {
                
                yield break;
            }
            BTTGenericCredentialType ITypeConverter<BTTGenericCredentialType>.ConvertFrom_List_BTTKeyValuePair(List<BTTKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTKeyValuePair>' to 'BTTGenericCredentialType'.");
                
            }
            List<BTTKeyValuePair> ITypeConverter<BTTGenericCredentialType>.ConvertTo_List_BTTKeyValuePair(BTTGenericCredentialType value)
            {
                return TypeConverter<List<BTTKeyValuePair>>.ConvertFrom_BTTGenericCredentialType(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredentialType>.GetConversionActionTo_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTKeyValuePair>> ITypeConverter<BTTGenericCredentialType>.Enumerate_List_BTTKeyValuePair(BTTGenericCredentialType value)
            {
                
                yield break;
            }
            BTTGenericCredentialType ITypeConverter<BTTGenericCredentialType>.ConvertFrom_BTTClaim(BTTClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTClaim' to 'BTTGenericCredentialType'.");
                
            }
            BTTClaim ITypeConverter<BTTGenericCredentialType>.ConvertTo_BTTClaim(BTTGenericCredentialType value)
            {
                return TypeConverter<BTTClaim>.ConvertFrom_BTTGenericCredentialType(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredentialType>.GetConversionActionTo_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTClaim> ITypeConverter<BTTGenericCredentialType>.Enumerate_BTTClaim(BTTGenericCredentialType value)
            {
                
                yield break;
            }
            BTTGenericCredentialType ITypeConverter<BTTGenericCredentialType>.ConvertFrom_BTTEncryptedClaims(BTTEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims' to 'BTTGenericCredentialType'.");
                
            }
            BTTEncryptedClaims ITypeConverter<BTTGenericCredentialType>.ConvertTo_BTTEncryptedClaims(BTTGenericCredentialType value)
            {
                return TypeConverter<BTTEncryptedClaims>.ConvertFrom_BTTGenericCredentialType(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredentialType>.GetConversionActionTo_BTTEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims> ITypeConverter<BTTGenericCredentialType>.Enumerate_BTTEncryptedClaims(BTTGenericCredentialType value)
            {
                
                yield break;
            }
            BTTGenericCredentialType ITypeConverter<BTTGenericCredentialType>.ConvertFrom_BTTGenericCredential_Envelope(BTTGenericCredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_Envelope' to 'BTTGenericCredentialType'.");
                
            }
            BTTGenericCredential_Envelope ITypeConverter<BTTGenericCredentialType>.ConvertTo_BTTGenericCredential_Envelope(BTTGenericCredentialType value)
            {
                return TypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_BTTGenericCredentialType(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredentialType>.GetConversionActionTo_BTTGenericCredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_Envelope> ITypeConverter<BTTGenericCredentialType>.Enumerate_BTTGenericCredential_Envelope(BTTGenericCredentialType value)
            {
                
                yield break;
            }
            BTTGenericCredentialType ITypeConverter<BTTGenericCredentialType>.ConvertFrom_BTTGenericCredential_EnvelopeContent(BTTGenericCredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeContent' to 'BTTGenericCredentialType'.");
                
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<BTTGenericCredentialType>.ConvertTo_BTTGenericCredential_EnvelopeContent(BTTGenericCredentialType value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_BTTGenericCredentialType(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredentialType>.GetConversionActionTo_BTTGenericCredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeContent> ITypeConverter<BTTGenericCredentialType>.Enumerate_BTTGenericCredential_EnvelopeContent(BTTGenericCredentialType value)
            {
                
                yield break;
            }
            BTTGenericCredentialType ITypeConverter<BTTGenericCredentialType>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(BTTGenericCredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeSeal' to 'BTTGenericCredentialType'.");
                
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<BTTGenericCredentialType>.ConvertTo_BTTGenericCredential_EnvelopeSeal(BTTGenericCredentialType value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_BTTGenericCredentialType(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredentialType>.GetConversionActionTo_BTTGenericCredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeSeal> ITypeConverter<BTTGenericCredentialType>.Enumerate_BTTGenericCredential_EnvelopeSeal(BTTGenericCredentialType value)
            {
                
                yield break;
            }
            BTTGenericCredentialType ITypeConverter<BTTGenericCredentialType>.ConvertFrom_BTTGenericCredential_PackingLabel(BTTGenericCredential_PackingLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_PackingLabel' to 'BTTGenericCredentialType'.");
                
            }
            BTTGenericCredential_PackingLabel ITypeConverter<BTTGenericCredentialType>.ConvertTo_BTTGenericCredential_PackingLabel(BTTGenericCredentialType value)
            {
                return TypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_BTTGenericCredentialType(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredentialType>.GetConversionActionTo_BTTGenericCredential_PackingLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_PackingLabel> ITypeConverter<BTTGenericCredentialType>.Enumerate_BTTGenericCredential_PackingLabel(BTTGenericCredentialType value)
            {
                
                yield break;
            }
            BTTGenericCredentialType ITypeConverter<BTTGenericCredentialType>.ConvertFrom_BTTKeyValuePair(BTTKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTKeyValuePair' to 'BTTGenericCredentialType'.");
                
            }
            BTTKeyValuePair ITypeConverter<BTTGenericCredentialType>.ConvertTo_BTTKeyValuePair(BTTGenericCredentialType value)
            {
                return TypeConverter<BTTKeyValuePair>.ConvertFrom_BTTGenericCredentialType(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredentialType>.GetConversionActionTo_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTKeyValuePair> ITypeConverter<BTTGenericCredentialType>.Enumerate_BTTKeyValuePair(BTTGenericCredentialType value)
            {
                
                yield break;
            }
            BTTGenericCredentialType ITypeConverter<BTTGenericCredentialType>.ConvertFrom_BTTNFE_N4K_Claims(BTTNFE_N4K_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims' to 'BTTGenericCredentialType'.");
                
            }
            BTTNFE_N4K_Claims ITypeConverter<BTTGenericCredentialType>.ConvertTo_BTTNFE_N4K_Claims(BTTGenericCredentialType value)
            {
                return TypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_BTTGenericCredentialType(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredentialType>.GetConversionActionTo_BTTNFE_N4K_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims> ITypeConverter<BTTGenericCredentialType>.Enumerate_BTTNFE_N4K_Claims(BTTGenericCredentialType value)
            {
                
                yield break;
            }
            BTTGenericCredentialType ITypeConverter<BTTGenericCredentialType>.ConvertFrom_BTTNFE_N4K_Envelope(BTTNFE_N4K_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Envelope' to 'BTTGenericCredentialType'.");
                
            }
            BTTNFE_N4K_Envelope ITypeConverter<BTTGenericCredentialType>.ConvertTo_BTTNFE_N4K_Envelope(BTTGenericCredentialType value)
            {
                return TypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_BTTGenericCredentialType(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredentialType>.GetConversionActionTo_BTTNFE_N4K_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Envelope> ITypeConverter<BTTGenericCredentialType>.Enumerate_BTTNFE_N4K_Envelope(BTTGenericCredentialType value)
            {
                
                yield break;
            }
            BTTGenericCredentialType ITypeConverter<BTTGenericCredentialType>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(BTTNFE_N4K_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_EnvelopeContent' to 'BTTGenericCredentialType'.");
                
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<BTTGenericCredentialType>.ConvertTo_BTTNFE_N4K_EnvelopeContent(BTTGenericCredentialType value)
            {
                return TypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_BTTGenericCredentialType(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredentialType>.GetConversionActionTo_BTTNFE_N4K_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_EnvelopeContent> ITypeConverter<BTTGenericCredentialType>.Enumerate_BTTNFE_N4K_EnvelopeContent(BTTGenericCredentialType value)
            {
                
                yield break;
            }
            BTTGenericCredentialType ITypeConverter<BTTGenericCredentialType>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(BTTNFE_N4K_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_SealedEnvelope' to 'BTTGenericCredentialType'.");
                
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<BTTGenericCredentialType>.ConvertTo_BTTNFE_N4K_SealedEnvelope(BTTGenericCredentialType value)
            {
                return TypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_BTTGenericCredentialType(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredentialType>.GetConversionActionTo_BTTNFE_N4K_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_SealedEnvelope> ITypeConverter<BTTGenericCredentialType>.Enumerate_BTTNFE_N4K_SealedEnvelope(BTTGenericCredentialType value)
            {
                
                yield break;
            }
            BTTGenericCredentialType ITypeConverter<BTTGenericCredentialType>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTVerifiableCredential_SealedEnvelope' to 'BTTGenericCredentialType'.");
                
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<BTTGenericCredentialType>.ConvertTo_BTTVerifiableCredential_SealedEnvelope(BTTGenericCredentialType value)
            {
                return TypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_BTTGenericCredentialType(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredentialType>.GetConversionActionTo_BTTVerifiableCredential_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTVerifiableCredential_SealedEnvelope> ITypeConverter<BTTGenericCredentialType>.Enumerate_BTTVerifiableCredential_SealedEnvelope(BTTGenericCredentialType value)
            {
                
                yield break;
            }
            BTTGenericCredentialType ITypeConverter<BTTGenericCredentialType>.ConvertFrom_BTTEncryptionFlag(BTTEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptionFlag' to 'BTTGenericCredentialType'.");
                
            }
            BTTEncryptionFlag ITypeConverter<BTTGenericCredentialType>.ConvertTo_BTTEncryptionFlag(BTTGenericCredentialType value)
            {
                return TypeConverter<BTTEncryptionFlag>.ConvertFrom_BTTGenericCredentialType(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredentialType>.GetConversionActionTo_BTTEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptionFlag> ITypeConverter<BTTGenericCredentialType>.Enumerate_BTTEncryptionFlag(BTTGenericCredentialType value)
            {
                
                yield break;
            }
            BTTGenericCredentialType ITypeConverter<BTTGenericCredentialType>.ConvertFrom_BTTGenericCredentialType(BTTGenericCredentialType value)
            {
                
                return (BTTGenericCredentialType)value;
                
            }
            BTTGenericCredentialType ITypeConverter<BTTGenericCredentialType>.ConvertTo_BTTGenericCredentialType(BTTGenericCredentialType value)
            {
                return TypeConverter<BTTGenericCredentialType>.ConvertFrom_BTTGenericCredentialType(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredentialType>.GetConversionActionTo_BTTGenericCredentialType()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredentialType> ITypeConverter<BTTGenericCredentialType>.Enumerate_BTTGenericCredentialType(BTTGenericCredentialType value)
            {
                
                yield break;
            }
            BTTGenericCredentialType ITypeConverter<BTTGenericCredentialType>.ConvertFrom_BTTNFEBodyPart(BTTNFEBodyPart value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFEBodyPart' to 'BTTGenericCredentialType'.");
                
            }
            BTTNFEBodyPart ITypeConverter<BTTGenericCredentialType>.ConvertTo_BTTNFEBodyPart(BTTGenericCredentialType value)
            {
                return TypeConverter<BTTNFEBodyPart>.ConvertFrom_BTTGenericCredentialType(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredentialType>.GetConversionActionTo_BTTNFEBodyPart()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFEBodyPart> ITypeConverter<BTTGenericCredentialType>.Enumerate_BTTNFEBodyPart(BTTGenericCredentialType value)
            {
                
                yield break;
            }
            BTTGenericCredentialType ITypeConverter<BTTGenericCredentialType>.ConvertFrom_BTTTrustLevel(BTTTrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTTrustLevel' to 'BTTGenericCredentialType'.");
                
            }
            BTTTrustLevel ITypeConverter<BTTGenericCredentialType>.ConvertTo_BTTTrustLevel(BTTGenericCredentialType value)
            {
                return TypeConverter<BTTTrustLevel>.ConvertFrom_BTTGenericCredentialType(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredentialType>.GetConversionActionTo_BTTTrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTTrustLevel> ITypeConverter<BTTGenericCredentialType>.Enumerate_BTTTrustLevel(BTTGenericCredentialType value)
            {
                
                yield break;
            }
            BTTGenericCredentialType ITypeConverter<BTTGenericCredentialType>.ConvertFrom_List_List_BTTKeyValuePair(List<List<BTTKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<BTTKeyValuePair>>' to 'BTTGenericCredentialType'.");
                
            }
            List<List<BTTKeyValuePair>> ITypeConverter<BTTGenericCredentialType>.ConvertTo_List_List_BTTKeyValuePair(BTTGenericCredentialType value)
            {
                return TypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_BTTGenericCredentialType(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredentialType>.GetConversionActionTo_List_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<BTTKeyValuePair>>> ITypeConverter<BTTGenericCredentialType>.Enumerate_List_List_BTTKeyValuePair(BTTGenericCredentialType value)
            {
                
                yield break;
            }
            BTTGenericCredentialType ITypeConverter<BTTGenericCredentialType>.ConvertFrom_List_BTTClaim(List<BTTClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTClaim>' to 'BTTGenericCredentialType'.");
                
            }
            List<BTTClaim> ITypeConverter<BTTGenericCredentialType>.ConvertTo_List_BTTClaim(BTTGenericCredentialType value)
            {
                return TypeConverter<List<BTTClaim>>.ConvertFrom_BTTGenericCredentialType(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredentialType>.GetConversionActionTo_List_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTClaim>> ITypeConverter<BTTGenericCredentialType>.Enumerate_List_BTTClaim(BTTGenericCredentialType value)
            {
                
                yield break;
            }
            BTTGenericCredentialType ITypeConverter<BTTGenericCredentialType>.ConvertFrom_BTTEncryptedClaims_nullable(BTTEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims?' to 'BTTGenericCredentialType'.");
                
            }
            BTTEncryptedClaims? ITypeConverter<BTTGenericCredentialType>.ConvertTo_BTTEncryptedClaims_nullable(BTTGenericCredentialType value)
            {
                return TypeConverter<BTTEncryptedClaims?>.ConvertFrom_BTTGenericCredentialType(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredentialType>.GetConversionActionTo_BTTEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims?> ITypeConverter<BTTGenericCredentialType>.Enumerate_BTTEncryptedClaims_nullable(BTTGenericCredentialType value)
            {
                
                yield break;
            }
            BTTGenericCredentialType ITypeConverter<BTTGenericCredentialType>.ConvertFrom_BTTNFE_N4K_Claims_nullable(BTTNFE_N4K_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims?' to 'BTTGenericCredentialType'.");
                
            }
            BTTNFE_N4K_Claims? ITypeConverter<BTTGenericCredentialType>.ConvertTo_BTTNFE_N4K_Claims_nullable(BTTGenericCredentialType value)
            {
                return TypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_BTTGenericCredentialType(value);
            }
            TypeConversionAction ITypeConverter<BTTGenericCredentialType>.GetConversionActionTo_BTTNFE_N4K_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims?> ITypeConverter<BTTGenericCredentialType>.Enumerate_BTTNFE_N4K_Claims_nullable(BTTGenericCredentialType value)
            {
                
                yield break;
            }
            BTTNFEBodyPart ITypeConverter<BTTNFEBodyPart>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'BTTNFEBodyPart'.");
                
            }
            bool ITypeConverter<BTTNFEBodyPart>.ConvertTo_bool(BTTNFEBodyPart value)
            {
                return TypeConverter<bool>.ConvertFrom_BTTNFEBodyPart(value);
            }
            TypeConversionAction ITypeConverter<BTTNFEBodyPart>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<BTTNFEBodyPart>.Enumerate_bool(BTTNFEBodyPart value)
            {
                
                yield break;
            }
            BTTNFEBodyPart ITypeConverter<BTTNFEBodyPart>.ConvertFrom_int(int value)
            {
                
                throw new InvalidCastException("Invalid cast from 'int' to 'BTTNFEBodyPart'.");
                
            }
            int ITypeConverter<BTTNFEBodyPart>.ConvertTo_int(BTTNFEBodyPart value)
            {
                return TypeConverter<int>.ConvertFrom_BTTNFEBodyPart(value);
            }
            TypeConversionAction ITypeConverter<BTTNFEBodyPart>.GetConversionActionTo_int()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int> ITypeConverter<BTTNFEBodyPart>.Enumerate_int(BTTNFEBodyPart value)
            {
                
                yield break;
            }
            BTTNFEBodyPart ITypeConverter<BTTNFEBodyPart>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'BTTNFEBodyPart'.");
                
            }
            long ITypeConverter<BTTNFEBodyPart>.ConvertTo_long(BTTNFEBodyPart value)
            {
                return TypeConverter<long>.ConvertFrom_BTTNFEBodyPart(value);
            }
            TypeConversionAction ITypeConverter<BTTNFEBodyPart>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<BTTNFEBodyPart>.Enumerate_long(BTTNFEBodyPart value)
            {
                
                yield break;
            }
            BTTNFEBodyPart ITypeConverter<BTTNFEBodyPart>.ConvertFrom_DateTime(DateTime value)
            {
                
                throw new InvalidCastException("Invalid cast from 'DateTime' to 'BTTNFEBodyPart'.");
                
            }
            DateTime ITypeConverter<BTTNFEBodyPart>.ConvertTo_DateTime(BTTNFEBodyPart value)
            {
                return TypeConverter<DateTime>.ConvertFrom_BTTNFEBodyPart(value);
            }
            TypeConversionAction ITypeConverter<BTTNFEBodyPart>.GetConversionActionTo_DateTime()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<DateTime> ITypeConverter<BTTNFEBodyPart>.Enumerate_DateTime(BTTNFEBodyPart value)
            {
                
                yield break;
            }
            BTTNFEBodyPart ITypeConverter<BTTNFEBodyPart>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    BTTNFEBodyPart intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = BTTNFEBodyPart.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "BTTNFEBodyPart");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<BTTNFEBodyPart>.ConvertTo_string(BTTNFEBodyPart value)
            {
                return TypeConverter<string>.ConvertFrom_BTTNFEBodyPart(value);
            }
            TypeConversionAction ITypeConverter<BTTNFEBodyPart>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<BTTNFEBodyPart>.Enumerate_string(BTTNFEBodyPart value)
            {
                
                yield break;
            }
            BTTNFEBodyPart ITypeConverter<BTTNFEBodyPart>.ConvertFrom_int_Array_150(int[] value)
            {
                
                throw new InvalidCastException("Invalid cast from 'int[]' to 'BTTNFEBodyPart'.");
                
            }
            int[] ITypeConverter<BTTNFEBodyPart>.ConvertTo_int_Array_150(BTTNFEBodyPart value)
            {
                return TypeConverter<int[]>.ConvertFrom_BTTNFEBodyPart(value);
            }
            TypeConversionAction ITypeConverter<BTTNFEBodyPart>.GetConversionActionTo_int_Array_150()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int[]> ITypeConverter<BTTNFEBodyPart>.Enumerate_int_Array_150(BTTNFEBodyPart value)
            {
                
                yield break;
            }
            BTTNFEBodyPart ITypeConverter<BTTNFEBodyPart>.ConvertFrom_List_long(List<long> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<long>' to 'BTTNFEBodyPart'.");
                
            }
            List<long> ITypeConverter<BTTNFEBodyPart>.ConvertTo_List_long(BTTNFEBodyPart value)
            {
                return TypeConverter<List<long>>.ConvertFrom_BTTNFEBodyPart(value);
            }
            TypeConversionAction ITypeConverter<BTTNFEBodyPart>.GetConversionActionTo_List_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<long>> ITypeConverter<BTTNFEBodyPart>.Enumerate_List_long(BTTNFEBodyPart value)
            {
                
                yield break;
            }
            BTTNFEBodyPart ITypeConverter<BTTNFEBodyPart>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'BTTNFEBodyPart'.");
                
            }
            List<string> ITypeConverter<BTTNFEBodyPart>.ConvertTo_List_string(BTTNFEBodyPart value)
            {
                return TypeConverter<List<string>>.ConvertFrom_BTTNFEBodyPart(value);
            }
            TypeConversionAction ITypeConverter<BTTNFEBodyPart>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<BTTNFEBodyPart>.Enumerate_List_string(BTTNFEBodyPart value)
            {
                
                yield break;
            }
            BTTNFEBodyPart ITypeConverter<BTTNFEBodyPart>.ConvertFrom_List_BTTKeyValuePair(List<BTTKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTKeyValuePair>' to 'BTTNFEBodyPart'.");
                
            }
            List<BTTKeyValuePair> ITypeConverter<BTTNFEBodyPart>.ConvertTo_List_BTTKeyValuePair(BTTNFEBodyPart value)
            {
                return TypeConverter<List<BTTKeyValuePair>>.ConvertFrom_BTTNFEBodyPart(value);
            }
            TypeConversionAction ITypeConverter<BTTNFEBodyPart>.GetConversionActionTo_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTKeyValuePair>> ITypeConverter<BTTNFEBodyPart>.Enumerate_List_BTTKeyValuePair(BTTNFEBodyPart value)
            {
                
                yield break;
            }
            BTTNFEBodyPart ITypeConverter<BTTNFEBodyPart>.ConvertFrom_BTTClaim(BTTClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTClaim' to 'BTTNFEBodyPart'.");
                
            }
            BTTClaim ITypeConverter<BTTNFEBodyPart>.ConvertTo_BTTClaim(BTTNFEBodyPart value)
            {
                return TypeConverter<BTTClaim>.ConvertFrom_BTTNFEBodyPart(value);
            }
            TypeConversionAction ITypeConverter<BTTNFEBodyPart>.GetConversionActionTo_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTClaim> ITypeConverter<BTTNFEBodyPart>.Enumerate_BTTClaim(BTTNFEBodyPart value)
            {
                
                yield break;
            }
            BTTNFEBodyPart ITypeConverter<BTTNFEBodyPart>.ConvertFrom_BTTEncryptedClaims(BTTEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims' to 'BTTNFEBodyPart'.");
                
            }
            BTTEncryptedClaims ITypeConverter<BTTNFEBodyPart>.ConvertTo_BTTEncryptedClaims(BTTNFEBodyPart value)
            {
                return TypeConverter<BTTEncryptedClaims>.ConvertFrom_BTTNFEBodyPart(value);
            }
            TypeConversionAction ITypeConverter<BTTNFEBodyPart>.GetConversionActionTo_BTTEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims> ITypeConverter<BTTNFEBodyPart>.Enumerate_BTTEncryptedClaims(BTTNFEBodyPart value)
            {
                
                yield break;
            }
            BTTNFEBodyPart ITypeConverter<BTTNFEBodyPart>.ConvertFrom_BTTGenericCredential_Envelope(BTTGenericCredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_Envelope' to 'BTTNFEBodyPart'.");
                
            }
            BTTGenericCredential_Envelope ITypeConverter<BTTNFEBodyPart>.ConvertTo_BTTGenericCredential_Envelope(BTTNFEBodyPart value)
            {
                return TypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_BTTNFEBodyPart(value);
            }
            TypeConversionAction ITypeConverter<BTTNFEBodyPart>.GetConversionActionTo_BTTGenericCredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_Envelope> ITypeConverter<BTTNFEBodyPart>.Enumerate_BTTGenericCredential_Envelope(BTTNFEBodyPart value)
            {
                
                yield break;
            }
            BTTNFEBodyPart ITypeConverter<BTTNFEBodyPart>.ConvertFrom_BTTGenericCredential_EnvelopeContent(BTTGenericCredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeContent' to 'BTTNFEBodyPart'.");
                
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<BTTNFEBodyPart>.ConvertTo_BTTGenericCredential_EnvelopeContent(BTTNFEBodyPart value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_BTTNFEBodyPart(value);
            }
            TypeConversionAction ITypeConverter<BTTNFEBodyPart>.GetConversionActionTo_BTTGenericCredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeContent> ITypeConverter<BTTNFEBodyPart>.Enumerate_BTTGenericCredential_EnvelopeContent(BTTNFEBodyPart value)
            {
                
                yield break;
            }
            BTTNFEBodyPart ITypeConverter<BTTNFEBodyPart>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(BTTGenericCredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeSeal' to 'BTTNFEBodyPart'.");
                
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<BTTNFEBodyPart>.ConvertTo_BTTGenericCredential_EnvelopeSeal(BTTNFEBodyPart value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_BTTNFEBodyPart(value);
            }
            TypeConversionAction ITypeConverter<BTTNFEBodyPart>.GetConversionActionTo_BTTGenericCredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeSeal> ITypeConverter<BTTNFEBodyPart>.Enumerate_BTTGenericCredential_EnvelopeSeal(BTTNFEBodyPart value)
            {
                
                yield break;
            }
            BTTNFEBodyPart ITypeConverter<BTTNFEBodyPart>.ConvertFrom_BTTGenericCredential_PackingLabel(BTTGenericCredential_PackingLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_PackingLabel' to 'BTTNFEBodyPart'.");
                
            }
            BTTGenericCredential_PackingLabel ITypeConverter<BTTNFEBodyPart>.ConvertTo_BTTGenericCredential_PackingLabel(BTTNFEBodyPart value)
            {
                return TypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_BTTNFEBodyPart(value);
            }
            TypeConversionAction ITypeConverter<BTTNFEBodyPart>.GetConversionActionTo_BTTGenericCredential_PackingLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_PackingLabel> ITypeConverter<BTTNFEBodyPart>.Enumerate_BTTGenericCredential_PackingLabel(BTTNFEBodyPart value)
            {
                
                yield break;
            }
            BTTNFEBodyPart ITypeConverter<BTTNFEBodyPart>.ConvertFrom_BTTKeyValuePair(BTTKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTKeyValuePair' to 'BTTNFEBodyPart'.");
                
            }
            BTTKeyValuePair ITypeConverter<BTTNFEBodyPart>.ConvertTo_BTTKeyValuePair(BTTNFEBodyPart value)
            {
                return TypeConverter<BTTKeyValuePair>.ConvertFrom_BTTNFEBodyPart(value);
            }
            TypeConversionAction ITypeConverter<BTTNFEBodyPart>.GetConversionActionTo_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTKeyValuePair> ITypeConverter<BTTNFEBodyPart>.Enumerate_BTTKeyValuePair(BTTNFEBodyPart value)
            {
                
                yield break;
            }
            BTTNFEBodyPart ITypeConverter<BTTNFEBodyPart>.ConvertFrom_BTTNFE_N4K_Claims(BTTNFE_N4K_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims' to 'BTTNFEBodyPart'.");
                
            }
            BTTNFE_N4K_Claims ITypeConverter<BTTNFEBodyPart>.ConvertTo_BTTNFE_N4K_Claims(BTTNFEBodyPart value)
            {
                return TypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_BTTNFEBodyPart(value);
            }
            TypeConversionAction ITypeConverter<BTTNFEBodyPart>.GetConversionActionTo_BTTNFE_N4K_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims> ITypeConverter<BTTNFEBodyPart>.Enumerate_BTTNFE_N4K_Claims(BTTNFEBodyPart value)
            {
                
                yield break;
            }
            BTTNFEBodyPart ITypeConverter<BTTNFEBodyPart>.ConvertFrom_BTTNFE_N4K_Envelope(BTTNFE_N4K_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Envelope' to 'BTTNFEBodyPart'.");
                
            }
            BTTNFE_N4K_Envelope ITypeConverter<BTTNFEBodyPart>.ConvertTo_BTTNFE_N4K_Envelope(BTTNFEBodyPart value)
            {
                return TypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_BTTNFEBodyPart(value);
            }
            TypeConversionAction ITypeConverter<BTTNFEBodyPart>.GetConversionActionTo_BTTNFE_N4K_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Envelope> ITypeConverter<BTTNFEBodyPart>.Enumerate_BTTNFE_N4K_Envelope(BTTNFEBodyPart value)
            {
                
                yield break;
            }
            BTTNFEBodyPart ITypeConverter<BTTNFEBodyPart>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(BTTNFE_N4K_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_EnvelopeContent' to 'BTTNFEBodyPart'.");
                
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<BTTNFEBodyPart>.ConvertTo_BTTNFE_N4K_EnvelopeContent(BTTNFEBodyPart value)
            {
                return TypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_BTTNFEBodyPart(value);
            }
            TypeConversionAction ITypeConverter<BTTNFEBodyPart>.GetConversionActionTo_BTTNFE_N4K_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_EnvelopeContent> ITypeConverter<BTTNFEBodyPart>.Enumerate_BTTNFE_N4K_EnvelopeContent(BTTNFEBodyPart value)
            {
                
                yield break;
            }
            BTTNFEBodyPart ITypeConverter<BTTNFEBodyPart>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(BTTNFE_N4K_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_SealedEnvelope' to 'BTTNFEBodyPart'.");
                
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<BTTNFEBodyPart>.ConvertTo_BTTNFE_N4K_SealedEnvelope(BTTNFEBodyPart value)
            {
                return TypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_BTTNFEBodyPart(value);
            }
            TypeConversionAction ITypeConverter<BTTNFEBodyPart>.GetConversionActionTo_BTTNFE_N4K_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_SealedEnvelope> ITypeConverter<BTTNFEBodyPart>.Enumerate_BTTNFE_N4K_SealedEnvelope(BTTNFEBodyPart value)
            {
                
                yield break;
            }
            BTTNFEBodyPart ITypeConverter<BTTNFEBodyPart>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTVerifiableCredential_SealedEnvelope' to 'BTTNFEBodyPart'.");
                
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<BTTNFEBodyPart>.ConvertTo_BTTVerifiableCredential_SealedEnvelope(BTTNFEBodyPart value)
            {
                return TypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_BTTNFEBodyPart(value);
            }
            TypeConversionAction ITypeConverter<BTTNFEBodyPart>.GetConversionActionTo_BTTVerifiableCredential_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTVerifiableCredential_SealedEnvelope> ITypeConverter<BTTNFEBodyPart>.Enumerate_BTTVerifiableCredential_SealedEnvelope(BTTNFEBodyPart value)
            {
                
                yield break;
            }
            BTTNFEBodyPart ITypeConverter<BTTNFEBodyPart>.ConvertFrom_BTTEncryptionFlag(BTTEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptionFlag' to 'BTTNFEBodyPart'.");
                
            }
            BTTEncryptionFlag ITypeConverter<BTTNFEBodyPart>.ConvertTo_BTTEncryptionFlag(BTTNFEBodyPart value)
            {
                return TypeConverter<BTTEncryptionFlag>.ConvertFrom_BTTNFEBodyPart(value);
            }
            TypeConversionAction ITypeConverter<BTTNFEBodyPart>.GetConversionActionTo_BTTEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptionFlag> ITypeConverter<BTTNFEBodyPart>.Enumerate_BTTEncryptionFlag(BTTNFEBodyPart value)
            {
                
                yield break;
            }
            BTTNFEBodyPart ITypeConverter<BTTNFEBodyPart>.ConvertFrom_BTTGenericCredentialType(BTTGenericCredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredentialType' to 'BTTNFEBodyPart'.");
                
            }
            BTTGenericCredentialType ITypeConverter<BTTNFEBodyPart>.ConvertTo_BTTGenericCredentialType(BTTNFEBodyPart value)
            {
                return TypeConverter<BTTGenericCredentialType>.ConvertFrom_BTTNFEBodyPart(value);
            }
            TypeConversionAction ITypeConverter<BTTNFEBodyPart>.GetConversionActionTo_BTTGenericCredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredentialType> ITypeConverter<BTTNFEBodyPart>.Enumerate_BTTGenericCredentialType(BTTNFEBodyPart value)
            {
                
                yield break;
            }
            BTTNFEBodyPart ITypeConverter<BTTNFEBodyPart>.ConvertFrom_BTTNFEBodyPart(BTTNFEBodyPart value)
            {
                
                return (BTTNFEBodyPart)value;
                
            }
            BTTNFEBodyPart ITypeConverter<BTTNFEBodyPart>.ConvertTo_BTTNFEBodyPart(BTTNFEBodyPart value)
            {
                return TypeConverter<BTTNFEBodyPart>.ConvertFrom_BTTNFEBodyPart(value);
            }
            TypeConversionAction ITypeConverter<BTTNFEBodyPart>.GetConversionActionTo_BTTNFEBodyPart()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFEBodyPart> ITypeConverter<BTTNFEBodyPart>.Enumerate_BTTNFEBodyPart(BTTNFEBodyPart value)
            {
                
                yield break;
            }
            BTTNFEBodyPart ITypeConverter<BTTNFEBodyPart>.ConvertFrom_BTTTrustLevel(BTTTrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTTrustLevel' to 'BTTNFEBodyPart'.");
                
            }
            BTTTrustLevel ITypeConverter<BTTNFEBodyPart>.ConvertTo_BTTTrustLevel(BTTNFEBodyPart value)
            {
                return TypeConverter<BTTTrustLevel>.ConvertFrom_BTTNFEBodyPart(value);
            }
            TypeConversionAction ITypeConverter<BTTNFEBodyPart>.GetConversionActionTo_BTTTrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTTrustLevel> ITypeConverter<BTTNFEBodyPart>.Enumerate_BTTTrustLevel(BTTNFEBodyPart value)
            {
                
                yield break;
            }
            BTTNFEBodyPart ITypeConverter<BTTNFEBodyPart>.ConvertFrom_List_List_BTTKeyValuePair(List<List<BTTKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<BTTKeyValuePair>>' to 'BTTNFEBodyPart'.");
                
            }
            List<List<BTTKeyValuePair>> ITypeConverter<BTTNFEBodyPart>.ConvertTo_List_List_BTTKeyValuePair(BTTNFEBodyPart value)
            {
                return TypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_BTTNFEBodyPart(value);
            }
            TypeConversionAction ITypeConverter<BTTNFEBodyPart>.GetConversionActionTo_List_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<BTTKeyValuePair>>> ITypeConverter<BTTNFEBodyPart>.Enumerate_List_List_BTTKeyValuePair(BTTNFEBodyPart value)
            {
                
                yield break;
            }
            BTTNFEBodyPart ITypeConverter<BTTNFEBodyPart>.ConvertFrom_List_BTTClaim(List<BTTClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTClaim>' to 'BTTNFEBodyPart'.");
                
            }
            List<BTTClaim> ITypeConverter<BTTNFEBodyPart>.ConvertTo_List_BTTClaim(BTTNFEBodyPart value)
            {
                return TypeConverter<List<BTTClaim>>.ConvertFrom_BTTNFEBodyPart(value);
            }
            TypeConversionAction ITypeConverter<BTTNFEBodyPart>.GetConversionActionTo_List_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTClaim>> ITypeConverter<BTTNFEBodyPart>.Enumerate_List_BTTClaim(BTTNFEBodyPart value)
            {
                
                yield break;
            }
            BTTNFEBodyPart ITypeConverter<BTTNFEBodyPart>.ConvertFrom_BTTEncryptedClaims_nullable(BTTEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims?' to 'BTTNFEBodyPart'.");
                
            }
            BTTEncryptedClaims? ITypeConverter<BTTNFEBodyPart>.ConvertTo_BTTEncryptedClaims_nullable(BTTNFEBodyPart value)
            {
                return TypeConverter<BTTEncryptedClaims?>.ConvertFrom_BTTNFEBodyPart(value);
            }
            TypeConversionAction ITypeConverter<BTTNFEBodyPart>.GetConversionActionTo_BTTEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims?> ITypeConverter<BTTNFEBodyPart>.Enumerate_BTTEncryptedClaims_nullable(BTTNFEBodyPart value)
            {
                
                yield break;
            }
            BTTNFEBodyPart ITypeConverter<BTTNFEBodyPart>.ConvertFrom_BTTNFE_N4K_Claims_nullable(BTTNFE_N4K_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims?' to 'BTTNFEBodyPart'.");
                
            }
            BTTNFE_N4K_Claims? ITypeConverter<BTTNFEBodyPart>.ConvertTo_BTTNFE_N4K_Claims_nullable(BTTNFEBodyPart value)
            {
                return TypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_BTTNFEBodyPart(value);
            }
            TypeConversionAction ITypeConverter<BTTNFEBodyPart>.GetConversionActionTo_BTTNFE_N4K_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims?> ITypeConverter<BTTNFEBodyPart>.Enumerate_BTTNFE_N4K_Claims_nullable(BTTNFEBodyPart value)
            {
                
                yield break;
            }
            BTTTrustLevel ITypeConverter<BTTTrustLevel>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'BTTTrustLevel'.");
                
            }
            bool ITypeConverter<BTTTrustLevel>.ConvertTo_bool(BTTTrustLevel value)
            {
                return TypeConverter<bool>.ConvertFrom_BTTTrustLevel(value);
            }
            TypeConversionAction ITypeConverter<BTTTrustLevel>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<BTTTrustLevel>.Enumerate_bool(BTTTrustLevel value)
            {
                
                yield break;
            }
            BTTTrustLevel ITypeConverter<BTTTrustLevel>.ConvertFrom_int(int value)
            {
                
                throw new InvalidCastException("Invalid cast from 'int' to 'BTTTrustLevel'.");
                
            }
            int ITypeConverter<BTTTrustLevel>.ConvertTo_int(BTTTrustLevel value)
            {
                return TypeConverter<int>.ConvertFrom_BTTTrustLevel(value);
            }
            TypeConversionAction ITypeConverter<BTTTrustLevel>.GetConversionActionTo_int()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int> ITypeConverter<BTTTrustLevel>.Enumerate_int(BTTTrustLevel value)
            {
                
                yield break;
            }
            BTTTrustLevel ITypeConverter<BTTTrustLevel>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'BTTTrustLevel'.");
                
            }
            long ITypeConverter<BTTTrustLevel>.ConvertTo_long(BTTTrustLevel value)
            {
                return TypeConverter<long>.ConvertFrom_BTTTrustLevel(value);
            }
            TypeConversionAction ITypeConverter<BTTTrustLevel>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<BTTTrustLevel>.Enumerate_long(BTTTrustLevel value)
            {
                
                yield break;
            }
            BTTTrustLevel ITypeConverter<BTTTrustLevel>.ConvertFrom_DateTime(DateTime value)
            {
                
                throw new InvalidCastException("Invalid cast from 'DateTime' to 'BTTTrustLevel'.");
                
            }
            DateTime ITypeConverter<BTTTrustLevel>.ConvertTo_DateTime(BTTTrustLevel value)
            {
                return TypeConverter<DateTime>.ConvertFrom_BTTTrustLevel(value);
            }
            TypeConversionAction ITypeConverter<BTTTrustLevel>.GetConversionActionTo_DateTime()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<DateTime> ITypeConverter<BTTTrustLevel>.Enumerate_DateTime(BTTTrustLevel value)
            {
                
                yield break;
            }
            BTTTrustLevel ITypeConverter<BTTTrustLevel>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    BTTTrustLevel intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = BTTTrustLevel.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "BTTTrustLevel");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<BTTTrustLevel>.ConvertTo_string(BTTTrustLevel value)
            {
                return TypeConverter<string>.ConvertFrom_BTTTrustLevel(value);
            }
            TypeConversionAction ITypeConverter<BTTTrustLevel>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<BTTTrustLevel>.Enumerate_string(BTTTrustLevel value)
            {
                
                yield break;
            }
            BTTTrustLevel ITypeConverter<BTTTrustLevel>.ConvertFrom_int_Array_150(int[] value)
            {
                
                throw new InvalidCastException("Invalid cast from 'int[]' to 'BTTTrustLevel'.");
                
            }
            int[] ITypeConverter<BTTTrustLevel>.ConvertTo_int_Array_150(BTTTrustLevel value)
            {
                return TypeConverter<int[]>.ConvertFrom_BTTTrustLevel(value);
            }
            TypeConversionAction ITypeConverter<BTTTrustLevel>.GetConversionActionTo_int_Array_150()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int[]> ITypeConverter<BTTTrustLevel>.Enumerate_int_Array_150(BTTTrustLevel value)
            {
                
                yield break;
            }
            BTTTrustLevel ITypeConverter<BTTTrustLevel>.ConvertFrom_List_long(List<long> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<long>' to 'BTTTrustLevel'.");
                
            }
            List<long> ITypeConverter<BTTTrustLevel>.ConvertTo_List_long(BTTTrustLevel value)
            {
                return TypeConverter<List<long>>.ConvertFrom_BTTTrustLevel(value);
            }
            TypeConversionAction ITypeConverter<BTTTrustLevel>.GetConversionActionTo_List_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<long>> ITypeConverter<BTTTrustLevel>.Enumerate_List_long(BTTTrustLevel value)
            {
                
                yield break;
            }
            BTTTrustLevel ITypeConverter<BTTTrustLevel>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'BTTTrustLevel'.");
                
            }
            List<string> ITypeConverter<BTTTrustLevel>.ConvertTo_List_string(BTTTrustLevel value)
            {
                return TypeConverter<List<string>>.ConvertFrom_BTTTrustLevel(value);
            }
            TypeConversionAction ITypeConverter<BTTTrustLevel>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<BTTTrustLevel>.Enumerate_List_string(BTTTrustLevel value)
            {
                
                yield break;
            }
            BTTTrustLevel ITypeConverter<BTTTrustLevel>.ConvertFrom_List_BTTKeyValuePair(List<BTTKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTKeyValuePair>' to 'BTTTrustLevel'.");
                
            }
            List<BTTKeyValuePair> ITypeConverter<BTTTrustLevel>.ConvertTo_List_BTTKeyValuePair(BTTTrustLevel value)
            {
                return TypeConverter<List<BTTKeyValuePair>>.ConvertFrom_BTTTrustLevel(value);
            }
            TypeConversionAction ITypeConverter<BTTTrustLevel>.GetConversionActionTo_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTKeyValuePair>> ITypeConverter<BTTTrustLevel>.Enumerate_List_BTTKeyValuePair(BTTTrustLevel value)
            {
                
                yield break;
            }
            BTTTrustLevel ITypeConverter<BTTTrustLevel>.ConvertFrom_BTTClaim(BTTClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTClaim' to 'BTTTrustLevel'.");
                
            }
            BTTClaim ITypeConverter<BTTTrustLevel>.ConvertTo_BTTClaim(BTTTrustLevel value)
            {
                return TypeConverter<BTTClaim>.ConvertFrom_BTTTrustLevel(value);
            }
            TypeConversionAction ITypeConverter<BTTTrustLevel>.GetConversionActionTo_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTClaim> ITypeConverter<BTTTrustLevel>.Enumerate_BTTClaim(BTTTrustLevel value)
            {
                
                yield break;
            }
            BTTTrustLevel ITypeConverter<BTTTrustLevel>.ConvertFrom_BTTEncryptedClaims(BTTEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims' to 'BTTTrustLevel'.");
                
            }
            BTTEncryptedClaims ITypeConverter<BTTTrustLevel>.ConvertTo_BTTEncryptedClaims(BTTTrustLevel value)
            {
                return TypeConverter<BTTEncryptedClaims>.ConvertFrom_BTTTrustLevel(value);
            }
            TypeConversionAction ITypeConverter<BTTTrustLevel>.GetConversionActionTo_BTTEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims> ITypeConverter<BTTTrustLevel>.Enumerate_BTTEncryptedClaims(BTTTrustLevel value)
            {
                
                yield break;
            }
            BTTTrustLevel ITypeConverter<BTTTrustLevel>.ConvertFrom_BTTGenericCredential_Envelope(BTTGenericCredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_Envelope' to 'BTTTrustLevel'.");
                
            }
            BTTGenericCredential_Envelope ITypeConverter<BTTTrustLevel>.ConvertTo_BTTGenericCredential_Envelope(BTTTrustLevel value)
            {
                return TypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_BTTTrustLevel(value);
            }
            TypeConversionAction ITypeConverter<BTTTrustLevel>.GetConversionActionTo_BTTGenericCredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_Envelope> ITypeConverter<BTTTrustLevel>.Enumerate_BTTGenericCredential_Envelope(BTTTrustLevel value)
            {
                
                yield break;
            }
            BTTTrustLevel ITypeConverter<BTTTrustLevel>.ConvertFrom_BTTGenericCredential_EnvelopeContent(BTTGenericCredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeContent' to 'BTTTrustLevel'.");
                
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<BTTTrustLevel>.ConvertTo_BTTGenericCredential_EnvelopeContent(BTTTrustLevel value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_BTTTrustLevel(value);
            }
            TypeConversionAction ITypeConverter<BTTTrustLevel>.GetConversionActionTo_BTTGenericCredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeContent> ITypeConverter<BTTTrustLevel>.Enumerate_BTTGenericCredential_EnvelopeContent(BTTTrustLevel value)
            {
                
                yield break;
            }
            BTTTrustLevel ITypeConverter<BTTTrustLevel>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(BTTGenericCredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeSeal' to 'BTTTrustLevel'.");
                
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<BTTTrustLevel>.ConvertTo_BTTGenericCredential_EnvelopeSeal(BTTTrustLevel value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_BTTTrustLevel(value);
            }
            TypeConversionAction ITypeConverter<BTTTrustLevel>.GetConversionActionTo_BTTGenericCredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeSeal> ITypeConverter<BTTTrustLevel>.Enumerate_BTTGenericCredential_EnvelopeSeal(BTTTrustLevel value)
            {
                
                yield break;
            }
            BTTTrustLevel ITypeConverter<BTTTrustLevel>.ConvertFrom_BTTGenericCredential_PackingLabel(BTTGenericCredential_PackingLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_PackingLabel' to 'BTTTrustLevel'.");
                
            }
            BTTGenericCredential_PackingLabel ITypeConverter<BTTTrustLevel>.ConvertTo_BTTGenericCredential_PackingLabel(BTTTrustLevel value)
            {
                return TypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_BTTTrustLevel(value);
            }
            TypeConversionAction ITypeConverter<BTTTrustLevel>.GetConversionActionTo_BTTGenericCredential_PackingLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_PackingLabel> ITypeConverter<BTTTrustLevel>.Enumerate_BTTGenericCredential_PackingLabel(BTTTrustLevel value)
            {
                
                yield break;
            }
            BTTTrustLevel ITypeConverter<BTTTrustLevel>.ConvertFrom_BTTKeyValuePair(BTTKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTKeyValuePair' to 'BTTTrustLevel'.");
                
            }
            BTTKeyValuePair ITypeConverter<BTTTrustLevel>.ConvertTo_BTTKeyValuePair(BTTTrustLevel value)
            {
                return TypeConverter<BTTKeyValuePair>.ConvertFrom_BTTTrustLevel(value);
            }
            TypeConversionAction ITypeConverter<BTTTrustLevel>.GetConversionActionTo_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTKeyValuePair> ITypeConverter<BTTTrustLevel>.Enumerate_BTTKeyValuePair(BTTTrustLevel value)
            {
                
                yield break;
            }
            BTTTrustLevel ITypeConverter<BTTTrustLevel>.ConvertFrom_BTTNFE_N4K_Claims(BTTNFE_N4K_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims' to 'BTTTrustLevel'.");
                
            }
            BTTNFE_N4K_Claims ITypeConverter<BTTTrustLevel>.ConvertTo_BTTNFE_N4K_Claims(BTTTrustLevel value)
            {
                return TypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_BTTTrustLevel(value);
            }
            TypeConversionAction ITypeConverter<BTTTrustLevel>.GetConversionActionTo_BTTNFE_N4K_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims> ITypeConverter<BTTTrustLevel>.Enumerate_BTTNFE_N4K_Claims(BTTTrustLevel value)
            {
                
                yield break;
            }
            BTTTrustLevel ITypeConverter<BTTTrustLevel>.ConvertFrom_BTTNFE_N4K_Envelope(BTTNFE_N4K_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Envelope' to 'BTTTrustLevel'.");
                
            }
            BTTNFE_N4K_Envelope ITypeConverter<BTTTrustLevel>.ConvertTo_BTTNFE_N4K_Envelope(BTTTrustLevel value)
            {
                return TypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_BTTTrustLevel(value);
            }
            TypeConversionAction ITypeConverter<BTTTrustLevel>.GetConversionActionTo_BTTNFE_N4K_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Envelope> ITypeConverter<BTTTrustLevel>.Enumerate_BTTNFE_N4K_Envelope(BTTTrustLevel value)
            {
                
                yield break;
            }
            BTTTrustLevel ITypeConverter<BTTTrustLevel>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(BTTNFE_N4K_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_EnvelopeContent' to 'BTTTrustLevel'.");
                
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<BTTTrustLevel>.ConvertTo_BTTNFE_N4K_EnvelopeContent(BTTTrustLevel value)
            {
                return TypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_BTTTrustLevel(value);
            }
            TypeConversionAction ITypeConverter<BTTTrustLevel>.GetConversionActionTo_BTTNFE_N4K_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_EnvelopeContent> ITypeConverter<BTTTrustLevel>.Enumerate_BTTNFE_N4K_EnvelopeContent(BTTTrustLevel value)
            {
                
                yield break;
            }
            BTTTrustLevel ITypeConverter<BTTTrustLevel>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(BTTNFE_N4K_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_SealedEnvelope' to 'BTTTrustLevel'.");
                
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<BTTTrustLevel>.ConvertTo_BTTNFE_N4K_SealedEnvelope(BTTTrustLevel value)
            {
                return TypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_BTTTrustLevel(value);
            }
            TypeConversionAction ITypeConverter<BTTTrustLevel>.GetConversionActionTo_BTTNFE_N4K_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_SealedEnvelope> ITypeConverter<BTTTrustLevel>.Enumerate_BTTNFE_N4K_SealedEnvelope(BTTTrustLevel value)
            {
                
                yield break;
            }
            BTTTrustLevel ITypeConverter<BTTTrustLevel>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTVerifiableCredential_SealedEnvelope' to 'BTTTrustLevel'.");
                
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<BTTTrustLevel>.ConvertTo_BTTVerifiableCredential_SealedEnvelope(BTTTrustLevel value)
            {
                return TypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_BTTTrustLevel(value);
            }
            TypeConversionAction ITypeConverter<BTTTrustLevel>.GetConversionActionTo_BTTVerifiableCredential_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTVerifiableCredential_SealedEnvelope> ITypeConverter<BTTTrustLevel>.Enumerate_BTTVerifiableCredential_SealedEnvelope(BTTTrustLevel value)
            {
                
                yield break;
            }
            BTTTrustLevel ITypeConverter<BTTTrustLevel>.ConvertFrom_BTTEncryptionFlag(BTTEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptionFlag' to 'BTTTrustLevel'.");
                
            }
            BTTEncryptionFlag ITypeConverter<BTTTrustLevel>.ConvertTo_BTTEncryptionFlag(BTTTrustLevel value)
            {
                return TypeConverter<BTTEncryptionFlag>.ConvertFrom_BTTTrustLevel(value);
            }
            TypeConversionAction ITypeConverter<BTTTrustLevel>.GetConversionActionTo_BTTEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptionFlag> ITypeConverter<BTTTrustLevel>.Enumerate_BTTEncryptionFlag(BTTTrustLevel value)
            {
                
                yield break;
            }
            BTTTrustLevel ITypeConverter<BTTTrustLevel>.ConvertFrom_BTTGenericCredentialType(BTTGenericCredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredentialType' to 'BTTTrustLevel'.");
                
            }
            BTTGenericCredentialType ITypeConverter<BTTTrustLevel>.ConvertTo_BTTGenericCredentialType(BTTTrustLevel value)
            {
                return TypeConverter<BTTGenericCredentialType>.ConvertFrom_BTTTrustLevel(value);
            }
            TypeConversionAction ITypeConverter<BTTTrustLevel>.GetConversionActionTo_BTTGenericCredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredentialType> ITypeConverter<BTTTrustLevel>.Enumerate_BTTGenericCredentialType(BTTTrustLevel value)
            {
                
                yield break;
            }
            BTTTrustLevel ITypeConverter<BTTTrustLevel>.ConvertFrom_BTTNFEBodyPart(BTTNFEBodyPart value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFEBodyPart' to 'BTTTrustLevel'.");
                
            }
            BTTNFEBodyPart ITypeConverter<BTTTrustLevel>.ConvertTo_BTTNFEBodyPart(BTTTrustLevel value)
            {
                return TypeConverter<BTTNFEBodyPart>.ConvertFrom_BTTTrustLevel(value);
            }
            TypeConversionAction ITypeConverter<BTTTrustLevel>.GetConversionActionTo_BTTNFEBodyPart()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFEBodyPart> ITypeConverter<BTTTrustLevel>.Enumerate_BTTNFEBodyPart(BTTTrustLevel value)
            {
                
                yield break;
            }
            BTTTrustLevel ITypeConverter<BTTTrustLevel>.ConvertFrom_BTTTrustLevel(BTTTrustLevel value)
            {
                
                return (BTTTrustLevel)value;
                
            }
            BTTTrustLevel ITypeConverter<BTTTrustLevel>.ConvertTo_BTTTrustLevel(BTTTrustLevel value)
            {
                return TypeConverter<BTTTrustLevel>.ConvertFrom_BTTTrustLevel(value);
            }
            TypeConversionAction ITypeConverter<BTTTrustLevel>.GetConversionActionTo_BTTTrustLevel()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTTrustLevel> ITypeConverter<BTTTrustLevel>.Enumerate_BTTTrustLevel(BTTTrustLevel value)
            {
                
                yield break;
            }
            BTTTrustLevel ITypeConverter<BTTTrustLevel>.ConvertFrom_List_List_BTTKeyValuePair(List<List<BTTKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<BTTKeyValuePair>>' to 'BTTTrustLevel'.");
                
            }
            List<List<BTTKeyValuePair>> ITypeConverter<BTTTrustLevel>.ConvertTo_List_List_BTTKeyValuePair(BTTTrustLevel value)
            {
                return TypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_BTTTrustLevel(value);
            }
            TypeConversionAction ITypeConverter<BTTTrustLevel>.GetConversionActionTo_List_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<BTTKeyValuePair>>> ITypeConverter<BTTTrustLevel>.Enumerate_List_List_BTTKeyValuePair(BTTTrustLevel value)
            {
                
                yield break;
            }
            BTTTrustLevel ITypeConverter<BTTTrustLevel>.ConvertFrom_List_BTTClaim(List<BTTClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTClaim>' to 'BTTTrustLevel'.");
                
            }
            List<BTTClaim> ITypeConverter<BTTTrustLevel>.ConvertTo_List_BTTClaim(BTTTrustLevel value)
            {
                return TypeConverter<List<BTTClaim>>.ConvertFrom_BTTTrustLevel(value);
            }
            TypeConversionAction ITypeConverter<BTTTrustLevel>.GetConversionActionTo_List_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTClaim>> ITypeConverter<BTTTrustLevel>.Enumerate_List_BTTClaim(BTTTrustLevel value)
            {
                
                yield break;
            }
            BTTTrustLevel ITypeConverter<BTTTrustLevel>.ConvertFrom_BTTEncryptedClaims_nullable(BTTEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims?' to 'BTTTrustLevel'.");
                
            }
            BTTEncryptedClaims? ITypeConverter<BTTTrustLevel>.ConvertTo_BTTEncryptedClaims_nullable(BTTTrustLevel value)
            {
                return TypeConverter<BTTEncryptedClaims?>.ConvertFrom_BTTTrustLevel(value);
            }
            TypeConversionAction ITypeConverter<BTTTrustLevel>.GetConversionActionTo_BTTEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims?> ITypeConverter<BTTTrustLevel>.Enumerate_BTTEncryptedClaims_nullable(BTTTrustLevel value)
            {
                
                yield break;
            }
            BTTTrustLevel ITypeConverter<BTTTrustLevel>.ConvertFrom_BTTNFE_N4K_Claims_nullable(BTTNFE_N4K_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims?' to 'BTTTrustLevel'.");
                
            }
            BTTNFE_N4K_Claims? ITypeConverter<BTTTrustLevel>.ConvertTo_BTTNFE_N4K_Claims_nullable(BTTTrustLevel value)
            {
                return TypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_BTTTrustLevel(value);
            }
            TypeConversionAction ITypeConverter<BTTTrustLevel>.GetConversionActionTo_BTTNFE_N4K_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims?> ITypeConverter<BTTTrustLevel>.Enumerate_BTTNFE_N4K_Claims_nullable(BTTTrustLevel value)
            {
                
                yield break;
            }
            List<List<BTTKeyValuePair>> ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'List<List<BTTKeyValuePair>>'.");
                
            }
            bool ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertTo_bool(List<List<BTTKeyValuePair>> value)
            {
                return TypeConverter<bool>.ConvertFrom_List_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<BTTKeyValuePair>>>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<List<List<BTTKeyValuePair>>>.Enumerate_bool(List<List<BTTKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<BTTKeyValuePair>> ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_int(int value)
            {
                
                throw new InvalidCastException("Invalid cast from 'int' to 'List<List<BTTKeyValuePair>>'.");
                
            }
            int ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertTo_int(List<List<BTTKeyValuePair>> value)
            {
                return TypeConverter<int>.ConvertFrom_List_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<BTTKeyValuePair>>>.GetConversionActionTo_int()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int> ITypeConverter<List<List<BTTKeyValuePair>>>.Enumerate_int(List<List<BTTKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<BTTKeyValuePair>> ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'List<List<BTTKeyValuePair>>'.");
                
            }
            long ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertTo_long(List<List<BTTKeyValuePair>> value)
            {
                return TypeConverter<long>.ConvertFrom_List_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<BTTKeyValuePair>>>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<List<List<BTTKeyValuePair>>>.Enumerate_long(List<List<BTTKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<BTTKeyValuePair>> ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_DateTime(DateTime value)
            {
                
                throw new InvalidCastException("Invalid cast from 'DateTime' to 'List<List<BTTKeyValuePair>>'.");
                
            }
            DateTime ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertTo_DateTime(List<List<BTTKeyValuePair>> value)
            {
                return TypeConverter<DateTime>.ConvertFrom_List_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<BTTKeyValuePair>>>.GetConversionActionTo_DateTime()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<DateTime> ITypeConverter<List<List<BTTKeyValuePair>>>.Enumerate_DateTime(List<List<BTTKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<BTTKeyValuePair>> ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    List<List<BTTKeyValuePair>> intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = ExternalParser.TryParse_List_List_BTTKeyValuePair(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        try
                        {
                            List<BTTKeyValuePair> element = TypeConverter<List<BTTKeyValuePair>>.ConvertFrom_string(value);
                            intermediate_result = new List<List<BTTKeyValuePair>>();
                            intermediate_result.Add(element);
                        }
                        catch
                        {
                            throw new ArgumentException("Cannot parse \"" + value + "\" into either 'List<List<BTTKeyValuePair>>' or 'List<BTTKeyValuePair>'.");
                        }
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertTo_string(List<List<BTTKeyValuePair>> value)
            {
                return TypeConverter<string>.ConvertFrom_List_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<BTTKeyValuePair>>>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<List<List<BTTKeyValuePair>>>.Enumerate_string(List<List<BTTKeyValuePair>> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<string>.ConvertFrom_List_BTTKeyValuePair(element);
                
                yield break;
            }
            List<List<BTTKeyValuePair>> ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_int_Array_150(int[] value)
            {
                
                throw new InvalidCastException("Invalid cast from 'int[]' to 'List<List<BTTKeyValuePair>>'.");
                
            }
            int[] ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertTo_int_Array_150(List<List<BTTKeyValuePair>> value)
            {
                return TypeConverter<int[]>.ConvertFrom_List_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<BTTKeyValuePair>>>.GetConversionActionTo_int_Array_150()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int[]> ITypeConverter<List<List<BTTKeyValuePair>>>.Enumerate_int_Array_150(List<List<BTTKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<BTTKeyValuePair>> ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_List_long(List<long> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<long>' to 'List<List<BTTKeyValuePair>>'.");
                
            }
            List<long> ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertTo_List_long(List<List<BTTKeyValuePair>> value)
            {
                return TypeConverter<List<long>>.ConvertFrom_List_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<BTTKeyValuePair>>>.GetConversionActionTo_List_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<long>> ITypeConverter<List<List<BTTKeyValuePair>>>.Enumerate_List_long(List<List<BTTKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<BTTKeyValuePair>> ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_List_string(List<string> value)
            {
                
                {
                    List<List<BTTKeyValuePair>> intermediate_result = new List<List<BTTKeyValuePair>>();
                    foreach (var element in value)
                    {
                        intermediate_result.Add(TypeConverter<List<BTTKeyValuePair>>.ConvertFrom_string(element));
                    }
                    return intermediate_result;
                }
                
            }
            List<string> ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertTo_List_string(List<List<BTTKeyValuePair>> value)
            {
                return TypeConverter<List<string>>.ConvertFrom_List_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<BTTKeyValuePair>>>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_CONVERTLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<List<List<BTTKeyValuePair>>>.Enumerate_List_string(List<List<BTTKeyValuePair>> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<string>>.ConvertFrom_List_BTTKeyValuePair(element);
                
                yield break;
            }
            List<List<BTTKeyValuePair>> ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_List_BTTKeyValuePair(List<BTTKeyValuePair> value)
            {
                
                {
                    List<List<BTTKeyValuePair>> intermediate_result = new List<List<BTTKeyValuePair>>();
                    foreach (var element in value)
                    {
                        intermediate_result.Add(TypeConverter<List<BTTKeyValuePair>>.ConvertFrom_BTTKeyValuePair(element));
                    }
                    return intermediate_result;
                }
                
            }
            List<BTTKeyValuePair> ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertTo_List_BTTKeyValuePair(List<List<BTTKeyValuePair>> value)
            {
                return TypeConverter<List<BTTKeyValuePair>>.ConvertFrom_List_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<BTTKeyValuePair>>>.GetConversionActionTo_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTKeyValuePair>> ITypeConverter<List<List<BTTKeyValuePair>>>.Enumerate_List_BTTKeyValuePair(List<List<BTTKeyValuePair>> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<BTTKeyValuePair>>.ConvertFrom_List_BTTKeyValuePair(element);
                
                yield break;
            }
            List<List<BTTKeyValuePair>> ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_BTTClaim(BTTClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTClaim' to 'List<List<BTTKeyValuePair>>'.");
                
            }
            BTTClaim ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertTo_BTTClaim(List<List<BTTKeyValuePair>> value)
            {
                return TypeConverter<BTTClaim>.ConvertFrom_List_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<BTTKeyValuePair>>>.GetConversionActionTo_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTClaim> ITypeConverter<List<List<BTTKeyValuePair>>>.Enumerate_BTTClaim(List<List<BTTKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<BTTKeyValuePair>> ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_BTTEncryptedClaims(BTTEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims' to 'List<List<BTTKeyValuePair>>'.");
                
            }
            BTTEncryptedClaims ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertTo_BTTEncryptedClaims(List<List<BTTKeyValuePair>> value)
            {
                return TypeConverter<BTTEncryptedClaims>.ConvertFrom_List_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<BTTKeyValuePair>>>.GetConversionActionTo_BTTEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims> ITypeConverter<List<List<BTTKeyValuePair>>>.Enumerate_BTTEncryptedClaims(List<List<BTTKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<BTTKeyValuePair>> ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_BTTGenericCredential_Envelope(BTTGenericCredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_Envelope' to 'List<List<BTTKeyValuePair>>'.");
                
            }
            BTTGenericCredential_Envelope ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertTo_BTTGenericCredential_Envelope(List<List<BTTKeyValuePair>> value)
            {
                return TypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_List_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<BTTKeyValuePair>>>.GetConversionActionTo_BTTGenericCredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_Envelope> ITypeConverter<List<List<BTTKeyValuePair>>>.Enumerate_BTTGenericCredential_Envelope(List<List<BTTKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<BTTKeyValuePair>> ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_BTTGenericCredential_EnvelopeContent(BTTGenericCredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeContent' to 'List<List<BTTKeyValuePair>>'.");
                
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertTo_BTTGenericCredential_EnvelopeContent(List<List<BTTKeyValuePair>> value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_List_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<BTTKeyValuePair>>>.GetConversionActionTo_BTTGenericCredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeContent> ITypeConverter<List<List<BTTKeyValuePair>>>.Enumerate_BTTGenericCredential_EnvelopeContent(List<List<BTTKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<BTTKeyValuePair>> ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(BTTGenericCredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeSeal' to 'List<List<BTTKeyValuePair>>'.");
                
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertTo_BTTGenericCredential_EnvelopeSeal(List<List<BTTKeyValuePair>> value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_List_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<BTTKeyValuePair>>>.GetConversionActionTo_BTTGenericCredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeSeal> ITypeConverter<List<List<BTTKeyValuePair>>>.Enumerate_BTTGenericCredential_EnvelopeSeal(List<List<BTTKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<BTTKeyValuePair>> ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_BTTGenericCredential_PackingLabel(BTTGenericCredential_PackingLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_PackingLabel' to 'List<List<BTTKeyValuePair>>'.");
                
            }
            BTTGenericCredential_PackingLabel ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertTo_BTTGenericCredential_PackingLabel(List<List<BTTKeyValuePair>> value)
            {
                return TypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_List_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<BTTKeyValuePair>>>.GetConversionActionTo_BTTGenericCredential_PackingLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_PackingLabel> ITypeConverter<List<List<BTTKeyValuePair>>>.Enumerate_BTTGenericCredential_PackingLabel(List<List<BTTKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<BTTKeyValuePair>> ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_BTTKeyValuePair(BTTKeyValuePair value)
            {
                
                {
                    List<List<BTTKeyValuePair>> intermediate_result = new List<List<BTTKeyValuePair>>();
                    intermediate_result.Add(TypeConverter<List<BTTKeyValuePair>>.ConvertFrom_BTTKeyValuePair(value));
                    return intermediate_result;
                }
                
            }
            BTTKeyValuePair ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertTo_BTTKeyValuePair(List<List<BTTKeyValuePair>> value)
            {
                return TypeConverter<BTTKeyValuePair>.ConvertFrom_List_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<BTTKeyValuePair>>>.GetConversionActionTo_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTKeyValuePair> ITypeConverter<List<List<BTTKeyValuePair>>>.Enumerate_BTTKeyValuePair(List<List<BTTKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<BTTKeyValuePair>> ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_BTTNFE_N4K_Claims(BTTNFE_N4K_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims' to 'List<List<BTTKeyValuePair>>'.");
                
            }
            BTTNFE_N4K_Claims ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertTo_BTTNFE_N4K_Claims(List<List<BTTKeyValuePair>> value)
            {
                return TypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_List_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<BTTKeyValuePair>>>.GetConversionActionTo_BTTNFE_N4K_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims> ITypeConverter<List<List<BTTKeyValuePair>>>.Enumerate_BTTNFE_N4K_Claims(List<List<BTTKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<BTTKeyValuePair>> ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_BTTNFE_N4K_Envelope(BTTNFE_N4K_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Envelope' to 'List<List<BTTKeyValuePair>>'.");
                
            }
            BTTNFE_N4K_Envelope ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertTo_BTTNFE_N4K_Envelope(List<List<BTTKeyValuePair>> value)
            {
                return TypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_List_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<BTTKeyValuePair>>>.GetConversionActionTo_BTTNFE_N4K_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Envelope> ITypeConverter<List<List<BTTKeyValuePair>>>.Enumerate_BTTNFE_N4K_Envelope(List<List<BTTKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<BTTKeyValuePair>> ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(BTTNFE_N4K_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_EnvelopeContent' to 'List<List<BTTKeyValuePair>>'.");
                
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertTo_BTTNFE_N4K_EnvelopeContent(List<List<BTTKeyValuePair>> value)
            {
                return TypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_List_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<BTTKeyValuePair>>>.GetConversionActionTo_BTTNFE_N4K_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_EnvelopeContent> ITypeConverter<List<List<BTTKeyValuePair>>>.Enumerate_BTTNFE_N4K_EnvelopeContent(List<List<BTTKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<BTTKeyValuePair>> ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(BTTNFE_N4K_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_SealedEnvelope' to 'List<List<BTTKeyValuePair>>'.");
                
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertTo_BTTNFE_N4K_SealedEnvelope(List<List<BTTKeyValuePair>> value)
            {
                return TypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_List_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<BTTKeyValuePair>>>.GetConversionActionTo_BTTNFE_N4K_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_SealedEnvelope> ITypeConverter<List<List<BTTKeyValuePair>>>.Enumerate_BTTNFE_N4K_SealedEnvelope(List<List<BTTKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<BTTKeyValuePair>> ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTVerifiableCredential_SealedEnvelope' to 'List<List<BTTKeyValuePair>>'.");
                
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertTo_BTTVerifiableCredential_SealedEnvelope(List<List<BTTKeyValuePair>> value)
            {
                return TypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_List_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<BTTKeyValuePair>>>.GetConversionActionTo_BTTVerifiableCredential_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTVerifiableCredential_SealedEnvelope> ITypeConverter<List<List<BTTKeyValuePair>>>.Enumerate_BTTVerifiableCredential_SealedEnvelope(List<List<BTTKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<BTTKeyValuePair>> ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_BTTEncryptionFlag(BTTEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptionFlag' to 'List<List<BTTKeyValuePair>>'.");
                
            }
            BTTEncryptionFlag ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertTo_BTTEncryptionFlag(List<List<BTTKeyValuePair>> value)
            {
                return TypeConverter<BTTEncryptionFlag>.ConvertFrom_List_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<BTTKeyValuePair>>>.GetConversionActionTo_BTTEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptionFlag> ITypeConverter<List<List<BTTKeyValuePair>>>.Enumerate_BTTEncryptionFlag(List<List<BTTKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<BTTKeyValuePair>> ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_BTTGenericCredentialType(BTTGenericCredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredentialType' to 'List<List<BTTKeyValuePair>>'.");
                
            }
            BTTGenericCredentialType ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertTo_BTTGenericCredentialType(List<List<BTTKeyValuePair>> value)
            {
                return TypeConverter<BTTGenericCredentialType>.ConvertFrom_List_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<BTTKeyValuePair>>>.GetConversionActionTo_BTTGenericCredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredentialType> ITypeConverter<List<List<BTTKeyValuePair>>>.Enumerate_BTTGenericCredentialType(List<List<BTTKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<BTTKeyValuePair>> ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_BTTNFEBodyPart(BTTNFEBodyPart value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFEBodyPart' to 'List<List<BTTKeyValuePair>>'.");
                
            }
            BTTNFEBodyPart ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertTo_BTTNFEBodyPart(List<List<BTTKeyValuePair>> value)
            {
                return TypeConverter<BTTNFEBodyPart>.ConvertFrom_List_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<BTTKeyValuePair>>>.GetConversionActionTo_BTTNFEBodyPart()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFEBodyPart> ITypeConverter<List<List<BTTKeyValuePair>>>.Enumerate_BTTNFEBodyPart(List<List<BTTKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<BTTKeyValuePair>> ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_BTTTrustLevel(BTTTrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTTrustLevel' to 'List<List<BTTKeyValuePair>>'.");
                
            }
            BTTTrustLevel ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertTo_BTTTrustLevel(List<List<BTTKeyValuePair>> value)
            {
                return TypeConverter<BTTTrustLevel>.ConvertFrom_List_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<BTTKeyValuePair>>>.GetConversionActionTo_BTTTrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTTrustLevel> ITypeConverter<List<List<BTTKeyValuePair>>>.Enumerate_BTTTrustLevel(List<List<BTTKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<BTTKeyValuePair>> ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_List_List_BTTKeyValuePair(List<List<BTTKeyValuePair>> value)
            {
                
                return (List<List<BTTKeyValuePair>>)value;
                
            }
            List<List<BTTKeyValuePair>> ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertTo_List_List_BTTKeyValuePair(List<List<BTTKeyValuePair>> value)
            {
                return TypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_List_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<BTTKeyValuePair>>>.GetConversionActionTo_List_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<BTTKeyValuePair>>> ITypeConverter<List<List<BTTKeyValuePair>>>.Enumerate_List_List_BTTKeyValuePair(List<List<BTTKeyValuePair>> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_List_BTTKeyValuePair(element);
                
                yield break;
            }
            List<List<BTTKeyValuePair>> ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_List_BTTClaim(List<BTTClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTClaim>' to 'List<List<BTTKeyValuePair>>'.");
                
            }
            List<BTTClaim> ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertTo_List_BTTClaim(List<List<BTTKeyValuePair>> value)
            {
                return TypeConverter<List<BTTClaim>>.ConvertFrom_List_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<BTTKeyValuePair>>>.GetConversionActionTo_List_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTClaim>> ITypeConverter<List<List<BTTKeyValuePair>>>.Enumerate_List_BTTClaim(List<List<BTTKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<BTTKeyValuePair>> ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_BTTEncryptedClaims_nullable(BTTEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims?' to 'List<List<BTTKeyValuePair>>'.");
                
            }
            BTTEncryptedClaims? ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertTo_BTTEncryptedClaims_nullable(List<List<BTTKeyValuePair>> value)
            {
                return TypeConverter<BTTEncryptedClaims?>.ConvertFrom_List_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<BTTKeyValuePair>>>.GetConversionActionTo_BTTEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims?> ITypeConverter<List<List<BTTKeyValuePair>>>.Enumerate_BTTEncryptedClaims_nullable(List<List<BTTKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<BTTKeyValuePair>> ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_BTTNFE_N4K_Claims_nullable(BTTNFE_N4K_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims?' to 'List<List<BTTKeyValuePair>>'.");
                
            }
            BTTNFE_N4K_Claims? ITypeConverter<List<List<BTTKeyValuePair>>>.ConvertTo_BTTNFE_N4K_Claims_nullable(List<List<BTTKeyValuePair>> value)
            {
                return TypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_List_List_BTTKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<BTTKeyValuePair>>>.GetConversionActionTo_BTTNFE_N4K_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims?> ITypeConverter<List<List<BTTKeyValuePair>>>.Enumerate_BTTNFE_N4K_Claims_nullable(List<List<BTTKeyValuePair>> value)
            {
                
                yield break;
            }
            List<BTTClaim> ITypeConverter<List<BTTClaim>>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'List<BTTClaim>'.");
                
            }
            bool ITypeConverter<List<BTTClaim>>.ConvertTo_bool(List<BTTClaim> value)
            {
                return TypeConverter<bool>.ConvertFrom_List_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<List<BTTClaim>>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<List<BTTClaim>>.Enumerate_bool(List<BTTClaim> value)
            {
                
                yield break;
            }
            List<BTTClaim> ITypeConverter<List<BTTClaim>>.ConvertFrom_int(int value)
            {
                
                throw new InvalidCastException("Invalid cast from 'int' to 'List<BTTClaim>'.");
                
            }
            int ITypeConverter<List<BTTClaim>>.ConvertTo_int(List<BTTClaim> value)
            {
                return TypeConverter<int>.ConvertFrom_List_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<List<BTTClaim>>.GetConversionActionTo_int()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int> ITypeConverter<List<BTTClaim>>.Enumerate_int(List<BTTClaim> value)
            {
                
                yield break;
            }
            List<BTTClaim> ITypeConverter<List<BTTClaim>>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'List<BTTClaim>'.");
                
            }
            long ITypeConverter<List<BTTClaim>>.ConvertTo_long(List<BTTClaim> value)
            {
                return TypeConverter<long>.ConvertFrom_List_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<List<BTTClaim>>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<List<BTTClaim>>.Enumerate_long(List<BTTClaim> value)
            {
                
                yield break;
            }
            List<BTTClaim> ITypeConverter<List<BTTClaim>>.ConvertFrom_DateTime(DateTime value)
            {
                
                throw new InvalidCastException("Invalid cast from 'DateTime' to 'List<BTTClaim>'.");
                
            }
            DateTime ITypeConverter<List<BTTClaim>>.ConvertTo_DateTime(List<BTTClaim> value)
            {
                return TypeConverter<DateTime>.ConvertFrom_List_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<List<BTTClaim>>.GetConversionActionTo_DateTime()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<DateTime> ITypeConverter<List<BTTClaim>>.Enumerate_DateTime(List<BTTClaim> value)
            {
                
                yield break;
            }
            List<BTTClaim> ITypeConverter<List<BTTClaim>>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    List<BTTClaim> intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = ExternalParser.TryParse_List_BTTClaim(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        try
                        {
                            BTTClaim element = TypeConverter<BTTClaim>.ConvertFrom_string(value);
                            intermediate_result = new List<BTTClaim>();
                            intermediate_result.Add(element);
                        }
                        catch
                        {
                            throw new ArgumentException("Cannot parse \"" + value + "\" into either 'List<BTTClaim>' or 'BTTClaim'.");
                        }
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<List<BTTClaim>>.ConvertTo_string(List<BTTClaim> value)
            {
                return TypeConverter<string>.ConvertFrom_List_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<List<BTTClaim>>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<List<BTTClaim>>.Enumerate_string(List<BTTClaim> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<string>.ConvertFrom_BTTClaim(element);
                
                yield break;
            }
            List<BTTClaim> ITypeConverter<List<BTTClaim>>.ConvertFrom_int_Array_150(int[] value)
            {
                
                throw new InvalidCastException("Invalid cast from 'int[]' to 'List<BTTClaim>'.");
                
            }
            int[] ITypeConverter<List<BTTClaim>>.ConvertTo_int_Array_150(List<BTTClaim> value)
            {
                return TypeConverter<int[]>.ConvertFrom_List_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<List<BTTClaim>>.GetConversionActionTo_int_Array_150()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int[]> ITypeConverter<List<BTTClaim>>.Enumerate_int_Array_150(List<BTTClaim> value)
            {
                
                yield break;
            }
            List<BTTClaim> ITypeConverter<List<BTTClaim>>.ConvertFrom_List_long(List<long> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<long>' to 'List<BTTClaim>'.");
                
            }
            List<long> ITypeConverter<List<BTTClaim>>.ConvertTo_List_long(List<BTTClaim> value)
            {
                return TypeConverter<List<long>>.ConvertFrom_List_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<List<BTTClaim>>.GetConversionActionTo_List_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<long>> ITypeConverter<List<BTTClaim>>.Enumerate_List_long(List<BTTClaim> value)
            {
                
                yield break;
            }
            List<BTTClaim> ITypeConverter<List<BTTClaim>>.ConvertFrom_List_string(List<string> value)
            {
                
                {
                    List<BTTClaim> intermediate_result = new List<BTTClaim>();
                    foreach (var element in value)
                    {
                        intermediate_result.Add(TypeConverter<BTTClaim>.ConvertFrom_string(element));
                    }
                    return intermediate_result;
                }
                
            }
            List<string> ITypeConverter<List<BTTClaim>>.ConvertTo_List_string(List<BTTClaim> value)
            {
                return TypeConverter<List<string>>.ConvertFrom_List_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<List<BTTClaim>>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_CONVERTLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<List<BTTClaim>>.Enumerate_List_string(List<BTTClaim> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<string>>.ConvertFrom_BTTClaim(element);
                
                yield break;
            }
            List<BTTClaim> ITypeConverter<List<BTTClaim>>.ConvertFrom_List_BTTKeyValuePair(List<BTTKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTKeyValuePair>' to 'List<BTTClaim>'.");
                
            }
            List<BTTKeyValuePair> ITypeConverter<List<BTTClaim>>.ConvertTo_List_BTTKeyValuePair(List<BTTClaim> value)
            {
                return TypeConverter<List<BTTKeyValuePair>>.ConvertFrom_List_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<List<BTTClaim>>.GetConversionActionTo_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTKeyValuePair>> ITypeConverter<List<BTTClaim>>.Enumerate_List_BTTKeyValuePair(List<BTTClaim> value)
            {
                
                yield break;
            }
            List<BTTClaim> ITypeConverter<List<BTTClaim>>.ConvertFrom_BTTClaim(BTTClaim value)
            {
                
                {
                    List<BTTClaim> intermediate_result = new List<BTTClaim>();
                    intermediate_result.Add(TypeConverter<BTTClaim>.ConvertFrom_BTTClaim(value));
                    return intermediate_result;
                }
                
            }
            BTTClaim ITypeConverter<List<BTTClaim>>.ConvertTo_BTTClaim(List<BTTClaim> value)
            {
                return TypeConverter<BTTClaim>.ConvertFrom_List_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<List<BTTClaim>>.GetConversionActionTo_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTClaim> ITypeConverter<List<BTTClaim>>.Enumerate_BTTClaim(List<BTTClaim> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<BTTClaim>.ConvertFrom_BTTClaim(element);
                
                yield break;
            }
            List<BTTClaim> ITypeConverter<List<BTTClaim>>.ConvertFrom_BTTEncryptedClaims(BTTEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims' to 'List<BTTClaim>'.");
                
            }
            BTTEncryptedClaims ITypeConverter<List<BTTClaim>>.ConvertTo_BTTEncryptedClaims(List<BTTClaim> value)
            {
                return TypeConverter<BTTEncryptedClaims>.ConvertFrom_List_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<List<BTTClaim>>.GetConversionActionTo_BTTEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims> ITypeConverter<List<BTTClaim>>.Enumerate_BTTEncryptedClaims(List<BTTClaim> value)
            {
                
                yield break;
            }
            List<BTTClaim> ITypeConverter<List<BTTClaim>>.ConvertFrom_BTTGenericCredential_Envelope(BTTGenericCredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_Envelope' to 'List<BTTClaim>'.");
                
            }
            BTTGenericCredential_Envelope ITypeConverter<List<BTTClaim>>.ConvertTo_BTTGenericCredential_Envelope(List<BTTClaim> value)
            {
                return TypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_List_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<List<BTTClaim>>.GetConversionActionTo_BTTGenericCredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_Envelope> ITypeConverter<List<BTTClaim>>.Enumerate_BTTGenericCredential_Envelope(List<BTTClaim> value)
            {
                
                yield break;
            }
            List<BTTClaim> ITypeConverter<List<BTTClaim>>.ConvertFrom_BTTGenericCredential_EnvelopeContent(BTTGenericCredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeContent' to 'List<BTTClaim>'.");
                
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<List<BTTClaim>>.ConvertTo_BTTGenericCredential_EnvelopeContent(List<BTTClaim> value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_List_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<List<BTTClaim>>.GetConversionActionTo_BTTGenericCredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeContent> ITypeConverter<List<BTTClaim>>.Enumerate_BTTGenericCredential_EnvelopeContent(List<BTTClaim> value)
            {
                
                yield break;
            }
            List<BTTClaim> ITypeConverter<List<BTTClaim>>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(BTTGenericCredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeSeal' to 'List<BTTClaim>'.");
                
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<List<BTTClaim>>.ConvertTo_BTTGenericCredential_EnvelopeSeal(List<BTTClaim> value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_List_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<List<BTTClaim>>.GetConversionActionTo_BTTGenericCredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeSeal> ITypeConverter<List<BTTClaim>>.Enumerate_BTTGenericCredential_EnvelopeSeal(List<BTTClaim> value)
            {
                
                yield break;
            }
            List<BTTClaim> ITypeConverter<List<BTTClaim>>.ConvertFrom_BTTGenericCredential_PackingLabel(BTTGenericCredential_PackingLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_PackingLabel' to 'List<BTTClaim>'.");
                
            }
            BTTGenericCredential_PackingLabel ITypeConverter<List<BTTClaim>>.ConvertTo_BTTGenericCredential_PackingLabel(List<BTTClaim> value)
            {
                return TypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_List_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<List<BTTClaim>>.GetConversionActionTo_BTTGenericCredential_PackingLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_PackingLabel> ITypeConverter<List<BTTClaim>>.Enumerate_BTTGenericCredential_PackingLabel(List<BTTClaim> value)
            {
                
                yield break;
            }
            List<BTTClaim> ITypeConverter<List<BTTClaim>>.ConvertFrom_BTTKeyValuePair(BTTKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTKeyValuePair' to 'List<BTTClaim>'.");
                
            }
            BTTKeyValuePair ITypeConverter<List<BTTClaim>>.ConvertTo_BTTKeyValuePair(List<BTTClaim> value)
            {
                return TypeConverter<BTTKeyValuePair>.ConvertFrom_List_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<List<BTTClaim>>.GetConversionActionTo_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTKeyValuePair> ITypeConverter<List<BTTClaim>>.Enumerate_BTTKeyValuePair(List<BTTClaim> value)
            {
                
                yield break;
            }
            List<BTTClaim> ITypeConverter<List<BTTClaim>>.ConvertFrom_BTTNFE_N4K_Claims(BTTNFE_N4K_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims' to 'List<BTTClaim>'.");
                
            }
            BTTNFE_N4K_Claims ITypeConverter<List<BTTClaim>>.ConvertTo_BTTNFE_N4K_Claims(List<BTTClaim> value)
            {
                return TypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_List_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<List<BTTClaim>>.GetConversionActionTo_BTTNFE_N4K_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims> ITypeConverter<List<BTTClaim>>.Enumerate_BTTNFE_N4K_Claims(List<BTTClaim> value)
            {
                
                yield break;
            }
            List<BTTClaim> ITypeConverter<List<BTTClaim>>.ConvertFrom_BTTNFE_N4K_Envelope(BTTNFE_N4K_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Envelope' to 'List<BTTClaim>'.");
                
            }
            BTTNFE_N4K_Envelope ITypeConverter<List<BTTClaim>>.ConvertTo_BTTNFE_N4K_Envelope(List<BTTClaim> value)
            {
                return TypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_List_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<List<BTTClaim>>.GetConversionActionTo_BTTNFE_N4K_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Envelope> ITypeConverter<List<BTTClaim>>.Enumerate_BTTNFE_N4K_Envelope(List<BTTClaim> value)
            {
                
                yield break;
            }
            List<BTTClaim> ITypeConverter<List<BTTClaim>>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(BTTNFE_N4K_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_EnvelopeContent' to 'List<BTTClaim>'.");
                
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<List<BTTClaim>>.ConvertTo_BTTNFE_N4K_EnvelopeContent(List<BTTClaim> value)
            {
                return TypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_List_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<List<BTTClaim>>.GetConversionActionTo_BTTNFE_N4K_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_EnvelopeContent> ITypeConverter<List<BTTClaim>>.Enumerate_BTTNFE_N4K_EnvelopeContent(List<BTTClaim> value)
            {
                
                yield break;
            }
            List<BTTClaim> ITypeConverter<List<BTTClaim>>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(BTTNFE_N4K_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_SealedEnvelope' to 'List<BTTClaim>'.");
                
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<List<BTTClaim>>.ConvertTo_BTTNFE_N4K_SealedEnvelope(List<BTTClaim> value)
            {
                return TypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_List_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<List<BTTClaim>>.GetConversionActionTo_BTTNFE_N4K_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_SealedEnvelope> ITypeConverter<List<BTTClaim>>.Enumerate_BTTNFE_N4K_SealedEnvelope(List<BTTClaim> value)
            {
                
                yield break;
            }
            List<BTTClaim> ITypeConverter<List<BTTClaim>>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTVerifiableCredential_SealedEnvelope' to 'List<BTTClaim>'.");
                
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<List<BTTClaim>>.ConvertTo_BTTVerifiableCredential_SealedEnvelope(List<BTTClaim> value)
            {
                return TypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_List_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<List<BTTClaim>>.GetConversionActionTo_BTTVerifiableCredential_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTVerifiableCredential_SealedEnvelope> ITypeConverter<List<BTTClaim>>.Enumerate_BTTVerifiableCredential_SealedEnvelope(List<BTTClaim> value)
            {
                
                yield break;
            }
            List<BTTClaim> ITypeConverter<List<BTTClaim>>.ConvertFrom_BTTEncryptionFlag(BTTEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptionFlag' to 'List<BTTClaim>'.");
                
            }
            BTTEncryptionFlag ITypeConverter<List<BTTClaim>>.ConvertTo_BTTEncryptionFlag(List<BTTClaim> value)
            {
                return TypeConverter<BTTEncryptionFlag>.ConvertFrom_List_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<List<BTTClaim>>.GetConversionActionTo_BTTEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptionFlag> ITypeConverter<List<BTTClaim>>.Enumerate_BTTEncryptionFlag(List<BTTClaim> value)
            {
                
                yield break;
            }
            List<BTTClaim> ITypeConverter<List<BTTClaim>>.ConvertFrom_BTTGenericCredentialType(BTTGenericCredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredentialType' to 'List<BTTClaim>'.");
                
            }
            BTTGenericCredentialType ITypeConverter<List<BTTClaim>>.ConvertTo_BTTGenericCredentialType(List<BTTClaim> value)
            {
                return TypeConverter<BTTGenericCredentialType>.ConvertFrom_List_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<List<BTTClaim>>.GetConversionActionTo_BTTGenericCredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredentialType> ITypeConverter<List<BTTClaim>>.Enumerate_BTTGenericCredentialType(List<BTTClaim> value)
            {
                
                yield break;
            }
            List<BTTClaim> ITypeConverter<List<BTTClaim>>.ConvertFrom_BTTNFEBodyPart(BTTNFEBodyPart value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFEBodyPart' to 'List<BTTClaim>'.");
                
            }
            BTTNFEBodyPart ITypeConverter<List<BTTClaim>>.ConvertTo_BTTNFEBodyPart(List<BTTClaim> value)
            {
                return TypeConverter<BTTNFEBodyPart>.ConvertFrom_List_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<List<BTTClaim>>.GetConversionActionTo_BTTNFEBodyPart()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFEBodyPart> ITypeConverter<List<BTTClaim>>.Enumerate_BTTNFEBodyPart(List<BTTClaim> value)
            {
                
                yield break;
            }
            List<BTTClaim> ITypeConverter<List<BTTClaim>>.ConvertFrom_BTTTrustLevel(BTTTrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTTrustLevel' to 'List<BTTClaim>'.");
                
            }
            BTTTrustLevel ITypeConverter<List<BTTClaim>>.ConvertTo_BTTTrustLevel(List<BTTClaim> value)
            {
                return TypeConverter<BTTTrustLevel>.ConvertFrom_List_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<List<BTTClaim>>.GetConversionActionTo_BTTTrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTTrustLevel> ITypeConverter<List<BTTClaim>>.Enumerate_BTTTrustLevel(List<BTTClaim> value)
            {
                
                yield break;
            }
            List<BTTClaim> ITypeConverter<List<BTTClaim>>.ConvertFrom_List_List_BTTKeyValuePair(List<List<BTTKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<BTTKeyValuePair>>' to 'List<BTTClaim>'.");
                
            }
            List<List<BTTKeyValuePair>> ITypeConverter<List<BTTClaim>>.ConvertTo_List_List_BTTKeyValuePair(List<BTTClaim> value)
            {
                return TypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_List_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<List<BTTClaim>>.GetConversionActionTo_List_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<BTTKeyValuePair>>> ITypeConverter<List<BTTClaim>>.Enumerate_List_List_BTTKeyValuePair(List<BTTClaim> value)
            {
                
                yield break;
            }
            List<BTTClaim> ITypeConverter<List<BTTClaim>>.ConvertFrom_List_BTTClaim(List<BTTClaim> value)
            {
                
                return (List<BTTClaim>)value;
                
            }
            List<BTTClaim> ITypeConverter<List<BTTClaim>>.ConvertTo_List_BTTClaim(List<BTTClaim> value)
            {
                return TypeConverter<List<BTTClaim>>.ConvertFrom_List_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<List<BTTClaim>>.GetConversionActionTo_List_BTTClaim()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTClaim>> ITypeConverter<List<BTTClaim>>.Enumerate_List_BTTClaim(List<BTTClaim> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<BTTClaim>>.ConvertFrom_BTTClaim(element);
                
                yield break;
            }
            List<BTTClaim> ITypeConverter<List<BTTClaim>>.ConvertFrom_BTTEncryptedClaims_nullable(BTTEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims?' to 'List<BTTClaim>'.");
                
            }
            BTTEncryptedClaims? ITypeConverter<List<BTTClaim>>.ConvertTo_BTTEncryptedClaims_nullable(List<BTTClaim> value)
            {
                return TypeConverter<BTTEncryptedClaims?>.ConvertFrom_List_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<List<BTTClaim>>.GetConversionActionTo_BTTEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims?> ITypeConverter<List<BTTClaim>>.Enumerate_BTTEncryptedClaims_nullable(List<BTTClaim> value)
            {
                
                yield break;
            }
            List<BTTClaim> ITypeConverter<List<BTTClaim>>.ConvertFrom_BTTNFE_N4K_Claims_nullable(BTTNFE_N4K_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims?' to 'List<BTTClaim>'.");
                
            }
            BTTNFE_N4K_Claims? ITypeConverter<List<BTTClaim>>.ConvertTo_BTTNFE_N4K_Claims_nullable(List<BTTClaim> value)
            {
                return TypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_List_BTTClaim(value);
            }
            TypeConversionAction ITypeConverter<List<BTTClaim>>.GetConversionActionTo_BTTNFE_N4K_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims?> ITypeConverter<List<BTTClaim>>.Enumerate_BTTNFE_N4K_Claims_nullable(List<BTTClaim> value)
            {
                
                yield break;
            }
            BTTEncryptedClaims? ITypeConverter<BTTEncryptedClaims?>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'BTTEncryptedClaims?'.");
                
            }
            bool ITypeConverter<BTTEncryptedClaims?>.ConvertTo_bool(BTTEncryptedClaims? value)
            {
                return TypeConverter<bool>.ConvertFrom_BTTEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims?>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<BTTEncryptedClaims?>.Enumerate_bool(BTTEncryptedClaims? value)
            {
                
                yield break;
            }
            BTTEncryptedClaims? ITypeConverter<BTTEncryptedClaims?>.ConvertFrom_int(int value)
            {
                
                throw new InvalidCastException("Invalid cast from 'int' to 'BTTEncryptedClaims?'.");
                
            }
            int ITypeConverter<BTTEncryptedClaims?>.ConvertTo_int(BTTEncryptedClaims? value)
            {
                return TypeConverter<int>.ConvertFrom_BTTEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims?>.GetConversionActionTo_int()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int> ITypeConverter<BTTEncryptedClaims?>.Enumerate_int(BTTEncryptedClaims? value)
            {
                
                yield break;
            }
            BTTEncryptedClaims? ITypeConverter<BTTEncryptedClaims?>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'BTTEncryptedClaims?'.");
                
            }
            long ITypeConverter<BTTEncryptedClaims?>.ConvertTo_long(BTTEncryptedClaims? value)
            {
                return TypeConverter<long>.ConvertFrom_BTTEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims?>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<BTTEncryptedClaims?>.Enumerate_long(BTTEncryptedClaims? value)
            {
                
                yield break;
            }
            BTTEncryptedClaims? ITypeConverter<BTTEncryptedClaims?>.ConvertFrom_DateTime(DateTime value)
            {
                
                throw new InvalidCastException("Invalid cast from 'DateTime' to 'BTTEncryptedClaims?'.");
                
            }
            DateTime ITypeConverter<BTTEncryptedClaims?>.ConvertTo_DateTime(BTTEncryptedClaims? value)
            {
                return TypeConverter<DateTime>.ConvertFrom_BTTEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims?>.GetConversionActionTo_DateTime()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<DateTime> ITypeConverter<BTTEncryptedClaims?>.Enumerate_DateTime(BTTEncryptedClaims? value)
            {
                
                yield break;
            }
            BTTEncryptedClaims? ITypeConverter<BTTEncryptedClaims?>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    BTTEncryptedClaims? intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = ExternalParser.TryParse_BTTEncryptedClaims_nullable(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "BTTEncryptedClaims?");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<BTTEncryptedClaims?>.ConvertTo_string(BTTEncryptedClaims? value)
            {
                return TypeConverter<string>.ConvertFrom_BTTEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims?>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<BTTEncryptedClaims?>.Enumerate_string(BTTEncryptedClaims? value)
            {
                
                yield break;
            }
            BTTEncryptedClaims? ITypeConverter<BTTEncryptedClaims?>.ConvertFrom_int_Array_150(int[] value)
            {
                
                throw new InvalidCastException("Invalid cast from 'int[]' to 'BTTEncryptedClaims?'.");
                
            }
            int[] ITypeConverter<BTTEncryptedClaims?>.ConvertTo_int_Array_150(BTTEncryptedClaims? value)
            {
                return TypeConverter<int[]>.ConvertFrom_BTTEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims?>.GetConversionActionTo_int_Array_150()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int[]> ITypeConverter<BTTEncryptedClaims?>.Enumerate_int_Array_150(BTTEncryptedClaims? value)
            {
                
                yield break;
            }
            BTTEncryptedClaims? ITypeConverter<BTTEncryptedClaims?>.ConvertFrom_List_long(List<long> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<long>' to 'BTTEncryptedClaims?'.");
                
            }
            List<long> ITypeConverter<BTTEncryptedClaims?>.ConvertTo_List_long(BTTEncryptedClaims? value)
            {
                return TypeConverter<List<long>>.ConvertFrom_BTTEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims?>.GetConversionActionTo_List_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<long>> ITypeConverter<BTTEncryptedClaims?>.Enumerate_List_long(BTTEncryptedClaims? value)
            {
                
                yield break;
            }
            BTTEncryptedClaims? ITypeConverter<BTTEncryptedClaims?>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'BTTEncryptedClaims?'.");
                
            }
            List<string> ITypeConverter<BTTEncryptedClaims?>.ConvertTo_List_string(BTTEncryptedClaims? value)
            {
                return TypeConverter<List<string>>.ConvertFrom_BTTEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims?>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<BTTEncryptedClaims?>.Enumerate_List_string(BTTEncryptedClaims? value)
            {
                
                yield break;
            }
            BTTEncryptedClaims? ITypeConverter<BTTEncryptedClaims?>.ConvertFrom_List_BTTKeyValuePair(List<BTTKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTKeyValuePair>' to 'BTTEncryptedClaims?'.");
                
            }
            List<BTTKeyValuePair> ITypeConverter<BTTEncryptedClaims?>.ConvertTo_List_BTTKeyValuePair(BTTEncryptedClaims? value)
            {
                return TypeConverter<List<BTTKeyValuePair>>.ConvertFrom_BTTEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims?>.GetConversionActionTo_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTKeyValuePair>> ITypeConverter<BTTEncryptedClaims?>.Enumerate_List_BTTKeyValuePair(BTTEncryptedClaims? value)
            {
                
                yield break;
            }
            BTTEncryptedClaims? ITypeConverter<BTTEncryptedClaims?>.ConvertFrom_BTTClaim(BTTClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTClaim' to 'BTTEncryptedClaims?'.");
                
            }
            BTTClaim ITypeConverter<BTTEncryptedClaims?>.ConvertTo_BTTClaim(BTTEncryptedClaims? value)
            {
                return TypeConverter<BTTClaim>.ConvertFrom_BTTEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims?>.GetConversionActionTo_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTClaim> ITypeConverter<BTTEncryptedClaims?>.Enumerate_BTTClaim(BTTEncryptedClaims? value)
            {
                
                yield break;
            }
            BTTEncryptedClaims? ITypeConverter<BTTEncryptedClaims?>.ConvertFrom_BTTEncryptedClaims(BTTEncryptedClaims value)
            {
                
                return (BTTEncryptedClaims?)value;
                
            }
            BTTEncryptedClaims ITypeConverter<BTTEncryptedClaims?>.ConvertTo_BTTEncryptedClaims(BTTEncryptedClaims? value)
            {
                return TypeConverter<BTTEncryptedClaims>.ConvertFrom_BTTEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims?>.GetConversionActionTo_BTTEncryptedClaims()
            {
                
                return TypeConversionAction.TC_EXTRACTNULLABLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims> ITypeConverter<BTTEncryptedClaims?>.Enumerate_BTTEncryptedClaims(BTTEncryptedClaims? value)
            {
                
                yield break;
            }
            BTTEncryptedClaims? ITypeConverter<BTTEncryptedClaims?>.ConvertFrom_BTTGenericCredential_Envelope(BTTGenericCredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_Envelope' to 'BTTEncryptedClaims?'.");
                
            }
            BTTGenericCredential_Envelope ITypeConverter<BTTEncryptedClaims?>.ConvertTo_BTTGenericCredential_Envelope(BTTEncryptedClaims? value)
            {
                return TypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_BTTEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims?>.GetConversionActionTo_BTTGenericCredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_Envelope> ITypeConverter<BTTEncryptedClaims?>.Enumerate_BTTGenericCredential_Envelope(BTTEncryptedClaims? value)
            {
                
                yield break;
            }
            BTTEncryptedClaims? ITypeConverter<BTTEncryptedClaims?>.ConvertFrom_BTTGenericCredential_EnvelopeContent(BTTGenericCredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeContent' to 'BTTEncryptedClaims?'.");
                
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<BTTEncryptedClaims?>.ConvertTo_BTTGenericCredential_EnvelopeContent(BTTEncryptedClaims? value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_BTTEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims?>.GetConversionActionTo_BTTGenericCredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeContent> ITypeConverter<BTTEncryptedClaims?>.Enumerate_BTTGenericCredential_EnvelopeContent(BTTEncryptedClaims? value)
            {
                
                yield break;
            }
            BTTEncryptedClaims? ITypeConverter<BTTEncryptedClaims?>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(BTTGenericCredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeSeal' to 'BTTEncryptedClaims?'.");
                
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<BTTEncryptedClaims?>.ConvertTo_BTTGenericCredential_EnvelopeSeal(BTTEncryptedClaims? value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_BTTEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims?>.GetConversionActionTo_BTTGenericCredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeSeal> ITypeConverter<BTTEncryptedClaims?>.Enumerate_BTTGenericCredential_EnvelopeSeal(BTTEncryptedClaims? value)
            {
                
                yield break;
            }
            BTTEncryptedClaims? ITypeConverter<BTTEncryptedClaims?>.ConvertFrom_BTTGenericCredential_PackingLabel(BTTGenericCredential_PackingLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_PackingLabel' to 'BTTEncryptedClaims?'.");
                
            }
            BTTGenericCredential_PackingLabel ITypeConverter<BTTEncryptedClaims?>.ConvertTo_BTTGenericCredential_PackingLabel(BTTEncryptedClaims? value)
            {
                return TypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_BTTEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims?>.GetConversionActionTo_BTTGenericCredential_PackingLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_PackingLabel> ITypeConverter<BTTEncryptedClaims?>.Enumerate_BTTGenericCredential_PackingLabel(BTTEncryptedClaims? value)
            {
                
                yield break;
            }
            BTTEncryptedClaims? ITypeConverter<BTTEncryptedClaims?>.ConvertFrom_BTTKeyValuePair(BTTKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTKeyValuePair' to 'BTTEncryptedClaims?'.");
                
            }
            BTTKeyValuePair ITypeConverter<BTTEncryptedClaims?>.ConvertTo_BTTKeyValuePair(BTTEncryptedClaims? value)
            {
                return TypeConverter<BTTKeyValuePair>.ConvertFrom_BTTEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims?>.GetConversionActionTo_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTKeyValuePair> ITypeConverter<BTTEncryptedClaims?>.Enumerate_BTTKeyValuePair(BTTEncryptedClaims? value)
            {
                
                yield break;
            }
            BTTEncryptedClaims? ITypeConverter<BTTEncryptedClaims?>.ConvertFrom_BTTNFE_N4K_Claims(BTTNFE_N4K_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims' to 'BTTEncryptedClaims?'.");
                
            }
            BTTNFE_N4K_Claims ITypeConverter<BTTEncryptedClaims?>.ConvertTo_BTTNFE_N4K_Claims(BTTEncryptedClaims? value)
            {
                return TypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_BTTEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims?>.GetConversionActionTo_BTTNFE_N4K_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims> ITypeConverter<BTTEncryptedClaims?>.Enumerate_BTTNFE_N4K_Claims(BTTEncryptedClaims? value)
            {
                
                yield break;
            }
            BTTEncryptedClaims? ITypeConverter<BTTEncryptedClaims?>.ConvertFrom_BTTNFE_N4K_Envelope(BTTNFE_N4K_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Envelope' to 'BTTEncryptedClaims?'.");
                
            }
            BTTNFE_N4K_Envelope ITypeConverter<BTTEncryptedClaims?>.ConvertTo_BTTNFE_N4K_Envelope(BTTEncryptedClaims? value)
            {
                return TypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_BTTEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims?>.GetConversionActionTo_BTTNFE_N4K_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Envelope> ITypeConverter<BTTEncryptedClaims?>.Enumerate_BTTNFE_N4K_Envelope(BTTEncryptedClaims? value)
            {
                
                yield break;
            }
            BTTEncryptedClaims? ITypeConverter<BTTEncryptedClaims?>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(BTTNFE_N4K_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_EnvelopeContent' to 'BTTEncryptedClaims?'.");
                
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<BTTEncryptedClaims?>.ConvertTo_BTTNFE_N4K_EnvelopeContent(BTTEncryptedClaims? value)
            {
                return TypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_BTTEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims?>.GetConversionActionTo_BTTNFE_N4K_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_EnvelopeContent> ITypeConverter<BTTEncryptedClaims?>.Enumerate_BTTNFE_N4K_EnvelopeContent(BTTEncryptedClaims? value)
            {
                
                yield break;
            }
            BTTEncryptedClaims? ITypeConverter<BTTEncryptedClaims?>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(BTTNFE_N4K_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_SealedEnvelope' to 'BTTEncryptedClaims?'.");
                
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<BTTEncryptedClaims?>.ConvertTo_BTTNFE_N4K_SealedEnvelope(BTTEncryptedClaims? value)
            {
                return TypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_BTTEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims?>.GetConversionActionTo_BTTNFE_N4K_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_SealedEnvelope> ITypeConverter<BTTEncryptedClaims?>.Enumerate_BTTNFE_N4K_SealedEnvelope(BTTEncryptedClaims? value)
            {
                
                yield break;
            }
            BTTEncryptedClaims? ITypeConverter<BTTEncryptedClaims?>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTVerifiableCredential_SealedEnvelope' to 'BTTEncryptedClaims?'.");
                
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<BTTEncryptedClaims?>.ConvertTo_BTTVerifiableCredential_SealedEnvelope(BTTEncryptedClaims? value)
            {
                return TypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_BTTEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims?>.GetConversionActionTo_BTTVerifiableCredential_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTVerifiableCredential_SealedEnvelope> ITypeConverter<BTTEncryptedClaims?>.Enumerate_BTTVerifiableCredential_SealedEnvelope(BTTEncryptedClaims? value)
            {
                
                yield break;
            }
            BTTEncryptedClaims? ITypeConverter<BTTEncryptedClaims?>.ConvertFrom_BTTEncryptionFlag(BTTEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptionFlag' to 'BTTEncryptedClaims?'.");
                
            }
            BTTEncryptionFlag ITypeConverter<BTTEncryptedClaims?>.ConvertTo_BTTEncryptionFlag(BTTEncryptedClaims? value)
            {
                return TypeConverter<BTTEncryptionFlag>.ConvertFrom_BTTEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims?>.GetConversionActionTo_BTTEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptionFlag> ITypeConverter<BTTEncryptedClaims?>.Enumerate_BTTEncryptionFlag(BTTEncryptedClaims? value)
            {
                
                yield break;
            }
            BTTEncryptedClaims? ITypeConverter<BTTEncryptedClaims?>.ConvertFrom_BTTGenericCredentialType(BTTGenericCredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredentialType' to 'BTTEncryptedClaims?'.");
                
            }
            BTTGenericCredentialType ITypeConverter<BTTEncryptedClaims?>.ConvertTo_BTTGenericCredentialType(BTTEncryptedClaims? value)
            {
                return TypeConverter<BTTGenericCredentialType>.ConvertFrom_BTTEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims?>.GetConversionActionTo_BTTGenericCredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredentialType> ITypeConverter<BTTEncryptedClaims?>.Enumerate_BTTGenericCredentialType(BTTEncryptedClaims? value)
            {
                
                yield break;
            }
            BTTEncryptedClaims? ITypeConverter<BTTEncryptedClaims?>.ConvertFrom_BTTNFEBodyPart(BTTNFEBodyPart value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFEBodyPart' to 'BTTEncryptedClaims?'.");
                
            }
            BTTNFEBodyPart ITypeConverter<BTTEncryptedClaims?>.ConvertTo_BTTNFEBodyPart(BTTEncryptedClaims? value)
            {
                return TypeConverter<BTTNFEBodyPart>.ConvertFrom_BTTEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims?>.GetConversionActionTo_BTTNFEBodyPart()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFEBodyPart> ITypeConverter<BTTEncryptedClaims?>.Enumerate_BTTNFEBodyPart(BTTEncryptedClaims? value)
            {
                
                yield break;
            }
            BTTEncryptedClaims? ITypeConverter<BTTEncryptedClaims?>.ConvertFrom_BTTTrustLevel(BTTTrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTTrustLevel' to 'BTTEncryptedClaims?'.");
                
            }
            BTTTrustLevel ITypeConverter<BTTEncryptedClaims?>.ConvertTo_BTTTrustLevel(BTTEncryptedClaims? value)
            {
                return TypeConverter<BTTTrustLevel>.ConvertFrom_BTTEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims?>.GetConversionActionTo_BTTTrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTTrustLevel> ITypeConverter<BTTEncryptedClaims?>.Enumerate_BTTTrustLevel(BTTEncryptedClaims? value)
            {
                
                yield break;
            }
            BTTEncryptedClaims? ITypeConverter<BTTEncryptedClaims?>.ConvertFrom_List_List_BTTKeyValuePair(List<List<BTTKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<BTTKeyValuePair>>' to 'BTTEncryptedClaims?'.");
                
            }
            List<List<BTTKeyValuePair>> ITypeConverter<BTTEncryptedClaims?>.ConvertTo_List_List_BTTKeyValuePair(BTTEncryptedClaims? value)
            {
                return TypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_BTTEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims?>.GetConversionActionTo_List_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<BTTKeyValuePair>>> ITypeConverter<BTTEncryptedClaims?>.Enumerate_List_List_BTTKeyValuePair(BTTEncryptedClaims? value)
            {
                
                yield break;
            }
            BTTEncryptedClaims? ITypeConverter<BTTEncryptedClaims?>.ConvertFrom_List_BTTClaim(List<BTTClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTClaim>' to 'BTTEncryptedClaims?'.");
                
            }
            List<BTTClaim> ITypeConverter<BTTEncryptedClaims?>.ConvertTo_List_BTTClaim(BTTEncryptedClaims? value)
            {
                return TypeConverter<List<BTTClaim>>.ConvertFrom_BTTEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims?>.GetConversionActionTo_List_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTClaim>> ITypeConverter<BTTEncryptedClaims?>.Enumerate_List_BTTClaim(BTTEncryptedClaims? value)
            {
                
                yield break;
            }
            BTTEncryptedClaims? ITypeConverter<BTTEncryptedClaims?>.ConvertFrom_BTTEncryptedClaims_nullable(BTTEncryptedClaims? value)
            {
                
                return (BTTEncryptedClaims?)value;
                
            }
            BTTEncryptedClaims? ITypeConverter<BTTEncryptedClaims?>.ConvertTo_BTTEncryptedClaims_nullable(BTTEncryptedClaims? value)
            {
                return TypeConverter<BTTEncryptedClaims?>.ConvertFrom_BTTEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims?>.GetConversionActionTo_BTTEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims?> ITypeConverter<BTTEncryptedClaims?>.Enumerate_BTTEncryptedClaims_nullable(BTTEncryptedClaims? value)
            {
                
                yield break;
            }
            BTTEncryptedClaims? ITypeConverter<BTTEncryptedClaims?>.ConvertFrom_BTTNFE_N4K_Claims_nullable(BTTNFE_N4K_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Claims?' to 'BTTEncryptedClaims?'.");
                
            }
            BTTNFE_N4K_Claims? ITypeConverter<BTTEncryptedClaims?>.ConvertTo_BTTNFE_N4K_Claims_nullable(BTTEncryptedClaims? value)
            {
                return TypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_BTTEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTEncryptedClaims?>.GetConversionActionTo_BTTNFE_N4K_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims?> ITypeConverter<BTTEncryptedClaims?>.Enumerate_BTTNFE_N4K_Claims_nullable(BTTEncryptedClaims? value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims? ITypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'BTTNFE_N4K_Claims?'.");
                
            }
            bool ITypeConverter<BTTNFE_N4K_Claims?>.ConvertTo_bool(BTTNFE_N4K_Claims? value)
            {
                return TypeConverter<bool>.ConvertFrom_BTTNFE_N4K_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims?>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<BTTNFE_N4K_Claims?>.Enumerate_bool(BTTNFE_N4K_Claims? value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims? ITypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_int(int value)
            {
                
                throw new InvalidCastException("Invalid cast from 'int' to 'BTTNFE_N4K_Claims?'.");
                
            }
            int ITypeConverter<BTTNFE_N4K_Claims?>.ConvertTo_int(BTTNFE_N4K_Claims? value)
            {
                return TypeConverter<int>.ConvertFrom_BTTNFE_N4K_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims?>.GetConversionActionTo_int()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int> ITypeConverter<BTTNFE_N4K_Claims?>.Enumerate_int(BTTNFE_N4K_Claims? value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims? ITypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'BTTNFE_N4K_Claims?'.");
                
            }
            long ITypeConverter<BTTNFE_N4K_Claims?>.ConvertTo_long(BTTNFE_N4K_Claims? value)
            {
                return TypeConverter<long>.ConvertFrom_BTTNFE_N4K_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims?>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<BTTNFE_N4K_Claims?>.Enumerate_long(BTTNFE_N4K_Claims? value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims? ITypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_DateTime(DateTime value)
            {
                
                throw new InvalidCastException("Invalid cast from 'DateTime' to 'BTTNFE_N4K_Claims?'.");
                
            }
            DateTime ITypeConverter<BTTNFE_N4K_Claims?>.ConvertTo_DateTime(BTTNFE_N4K_Claims? value)
            {
                return TypeConverter<DateTime>.ConvertFrom_BTTNFE_N4K_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims?>.GetConversionActionTo_DateTime()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<DateTime> ITypeConverter<BTTNFE_N4K_Claims?>.Enumerate_DateTime(BTTNFE_N4K_Claims? value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims? ITypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    BTTNFE_N4K_Claims? intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = ExternalParser.TryParse_BTTNFE_N4K_Claims_nullable(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "BTTNFE_N4K_Claims?");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<BTTNFE_N4K_Claims?>.ConvertTo_string(BTTNFE_N4K_Claims? value)
            {
                return TypeConverter<string>.ConvertFrom_BTTNFE_N4K_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims?>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<BTTNFE_N4K_Claims?>.Enumerate_string(BTTNFE_N4K_Claims? value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims? ITypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_int_Array_150(int[] value)
            {
                
                throw new InvalidCastException("Invalid cast from 'int[]' to 'BTTNFE_N4K_Claims?'.");
                
            }
            int[] ITypeConverter<BTTNFE_N4K_Claims?>.ConvertTo_int_Array_150(BTTNFE_N4K_Claims? value)
            {
                return TypeConverter<int[]>.ConvertFrom_BTTNFE_N4K_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims?>.GetConversionActionTo_int_Array_150()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<int[]> ITypeConverter<BTTNFE_N4K_Claims?>.Enumerate_int_Array_150(BTTNFE_N4K_Claims? value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims? ITypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_List_long(List<long> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<long>' to 'BTTNFE_N4K_Claims?'.");
                
            }
            List<long> ITypeConverter<BTTNFE_N4K_Claims?>.ConvertTo_List_long(BTTNFE_N4K_Claims? value)
            {
                return TypeConverter<List<long>>.ConvertFrom_BTTNFE_N4K_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims?>.GetConversionActionTo_List_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<long>> ITypeConverter<BTTNFE_N4K_Claims?>.Enumerate_List_long(BTTNFE_N4K_Claims? value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims? ITypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'BTTNFE_N4K_Claims?'.");
                
            }
            List<string> ITypeConverter<BTTNFE_N4K_Claims?>.ConvertTo_List_string(BTTNFE_N4K_Claims? value)
            {
                return TypeConverter<List<string>>.ConvertFrom_BTTNFE_N4K_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims?>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<BTTNFE_N4K_Claims?>.Enumerate_List_string(BTTNFE_N4K_Claims? value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims? ITypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_List_BTTKeyValuePair(List<BTTKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTKeyValuePair>' to 'BTTNFE_N4K_Claims?'.");
                
            }
            List<BTTKeyValuePair> ITypeConverter<BTTNFE_N4K_Claims?>.ConvertTo_List_BTTKeyValuePair(BTTNFE_N4K_Claims? value)
            {
                return TypeConverter<List<BTTKeyValuePair>>.ConvertFrom_BTTNFE_N4K_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims?>.GetConversionActionTo_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTKeyValuePair>> ITypeConverter<BTTNFE_N4K_Claims?>.Enumerate_List_BTTKeyValuePair(BTTNFE_N4K_Claims? value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims? ITypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_BTTClaim(BTTClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTClaim' to 'BTTNFE_N4K_Claims?'.");
                
            }
            BTTClaim ITypeConverter<BTTNFE_N4K_Claims?>.ConvertTo_BTTClaim(BTTNFE_N4K_Claims? value)
            {
                return TypeConverter<BTTClaim>.ConvertFrom_BTTNFE_N4K_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims?>.GetConversionActionTo_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTClaim> ITypeConverter<BTTNFE_N4K_Claims?>.Enumerate_BTTClaim(BTTNFE_N4K_Claims? value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims? ITypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_BTTEncryptedClaims(BTTEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims' to 'BTTNFE_N4K_Claims?'.");
                
            }
            BTTEncryptedClaims ITypeConverter<BTTNFE_N4K_Claims?>.ConvertTo_BTTEncryptedClaims(BTTNFE_N4K_Claims? value)
            {
                return TypeConverter<BTTEncryptedClaims>.ConvertFrom_BTTNFE_N4K_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims?>.GetConversionActionTo_BTTEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims> ITypeConverter<BTTNFE_N4K_Claims?>.Enumerate_BTTEncryptedClaims(BTTNFE_N4K_Claims? value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims? ITypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_BTTGenericCredential_Envelope(BTTGenericCredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_Envelope' to 'BTTNFE_N4K_Claims?'.");
                
            }
            BTTGenericCredential_Envelope ITypeConverter<BTTNFE_N4K_Claims?>.ConvertTo_BTTGenericCredential_Envelope(BTTNFE_N4K_Claims? value)
            {
                return TypeConverter<BTTGenericCredential_Envelope>.ConvertFrom_BTTNFE_N4K_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims?>.GetConversionActionTo_BTTGenericCredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_Envelope> ITypeConverter<BTTNFE_N4K_Claims?>.Enumerate_BTTGenericCredential_Envelope(BTTNFE_N4K_Claims? value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims? ITypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_BTTGenericCredential_EnvelopeContent(BTTGenericCredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeContent' to 'BTTNFE_N4K_Claims?'.");
                
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<BTTNFE_N4K_Claims?>.ConvertTo_BTTGenericCredential_EnvelopeContent(BTTNFE_N4K_Claims? value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeContent>.ConvertFrom_BTTNFE_N4K_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims?>.GetConversionActionTo_BTTGenericCredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeContent> ITypeConverter<BTTNFE_N4K_Claims?>.Enumerate_BTTGenericCredential_EnvelopeContent(BTTNFE_N4K_Claims? value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims? ITypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(BTTGenericCredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_EnvelopeSeal' to 'BTTNFE_N4K_Claims?'.");
                
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<BTTNFE_N4K_Claims?>.ConvertTo_BTTGenericCredential_EnvelopeSeal(BTTNFE_N4K_Claims? value)
            {
                return TypeConverter<BTTGenericCredential_EnvelopeSeal>.ConvertFrom_BTTNFE_N4K_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims?>.GetConversionActionTo_BTTGenericCredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_EnvelopeSeal> ITypeConverter<BTTNFE_N4K_Claims?>.Enumerate_BTTGenericCredential_EnvelopeSeal(BTTNFE_N4K_Claims? value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims? ITypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_BTTGenericCredential_PackingLabel(BTTGenericCredential_PackingLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredential_PackingLabel' to 'BTTNFE_N4K_Claims?'.");
                
            }
            BTTGenericCredential_PackingLabel ITypeConverter<BTTNFE_N4K_Claims?>.ConvertTo_BTTGenericCredential_PackingLabel(BTTNFE_N4K_Claims? value)
            {
                return TypeConverter<BTTGenericCredential_PackingLabel>.ConvertFrom_BTTNFE_N4K_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims?>.GetConversionActionTo_BTTGenericCredential_PackingLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredential_PackingLabel> ITypeConverter<BTTNFE_N4K_Claims?>.Enumerate_BTTGenericCredential_PackingLabel(BTTNFE_N4K_Claims? value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims? ITypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_BTTKeyValuePair(BTTKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTKeyValuePair' to 'BTTNFE_N4K_Claims?'.");
                
            }
            BTTKeyValuePair ITypeConverter<BTTNFE_N4K_Claims?>.ConvertTo_BTTKeyValuePair(BTTNFE_N4K_Claims? value)
            {
                return TypeConverter<BTTKeyValuePair>.ConvertFrom_BTTNFE_N4K_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims?>.GetConversionActionTo_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTKeyValuePair> ITypeConverter<BTTNFE_N4K_Claims?>.Enumerate_BTTKeyValuePair(BTTNFE_N4K_Claims? value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims? ITypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_BTTNFE_N4K_Claims(BTTNFE_N4K_Claims value)
            {
                
                return (BTTNFE_N4K_Claims?)value;
                
            }
            BTTNFE_N4K_Claims ITypeConverter<BTTNFE_N4K_Claims?>.ConvertTo_BTTNFE_N4K_Claims(BTTNFE_N4K_Claims? value)
            {
                return TypeConverter<BTTNFE_N4K_Claims>.ConvertFrom_BTTNFE_N4K_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims?>.GetConversionActionTo_BTTNFE_N4K_Claims()
            {
                
                return TypeConversionAction.TC_EXTRACTNULLABLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims> ITypeConverter<BTTNFE_N4K_Claims?>.Enumerate_BTTNFE_N4K_Claims(BTTNFE_N4K_Claims? value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims? ITypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_BTTNFE_N4K_Envelope(BTTNFE_N4K_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_Envelope' to 'BTTNFE_N4K_Claims?'.");
                
            }
            BTTNFE_N4K_Envelope ITypeConverter<BTTNFE_N4K_Claims?>.ConvertTo_BTTNFE_N4K_Envelope(BTTNFE_N4K_Claims? value)
            {
                return TypeConverter<BTTNFE_N4K_Envelope>.ConvertFrom_BTTNFE_N4K_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims?>.GetConversionActionTo_BTTNFE_N4K_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Envelope> ITypeConverter<BTTNFE_N4K_Claims?>.Enumerate_BTTNFE_N4K_Envelope(BTTNFE_N4K_Claims? value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims? ITypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(BTTNFE_N4K_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_EnvelopeContent' to 'BTTNFE_N4K_Claims?'.");
                
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<BTTNFE_N4K_Claims?>.ConvertTo_BTTNFE_N4K_EnvelopeContent(BTTNFE_N4K_Claims? value)
            {
                return TypeConverter<BTTNFE_N4K_EnvelopeContent>.ConvertFrom_BTTNFE_N4K_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims?>.GetConversionActionTo_BTTNFE_N4K_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_EnvelopeContent> ITypeConverter<BTTNFE_N4K_Claims?>.Enumerate_BTTNFE_N4K_EnvelopeContent(BTTNFE_N4K_Claims? value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims? ITypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(BTTNFE_N4K_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFE_N4K_SealedEnvelope' to 'BTTNFE_N4K_Claims?'.");
                
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<BTTNFE_N4K_Claims?>.ConvertTo_BTTNFE_N4K_SealedEnvelope(BTTNFE_N4K_Claims? value)
            {
                return TypeConverter<BTTNFE_N4K_SealedEnvelope>.ConvertFrom_BTTNFE_N4K_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims?>.GetConversionActionTo_BTTNFE_N4K_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_SealedEnvelope> ITypeConverter<BTTNFE_N4K_Claims?>.Enumerate_BTTNFE_N4K_SealedEnvelope(BTTNFE_N4K_Claims? value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims? ITypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(BTTVerifiableCredential_SealedEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTVerifiableCredential_SealedEnvelope' to 'BTTNFE_N4K_Claims?'.");
                
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<BTTNFE_N4K_Claims?>.ConvertTo_BTTVerifiableCredential_SealedEnvelope(BTTNFE_N4K_Claims? value)
            {
                return TypeConverter<BTTVerifiableCredential_SealedEnvelope>.ConvertFrom_BTTNFE_N4K_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims?>.GetConversionActionTo_BTTVerifiableCredential_SealedEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTVerifiableCredential_SealedEnvelope> ITypeConverter<BTTNFE_N4K_Claims?>.Enumerate_BTTVerifiableCredential_SealedEnvelope(BTTNFE_N4K_Claims? value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims? ITypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_BTTEncryptionFlag(BTTEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptionFlag' to 'BTTNFE_N4K_Claims?'.");
                
            }
            BTTEncryptionFlag ITypeConverter<BTTNFE_N4K_Claims?>.ConvertTo_BTTEncryptionFlag(BTTNFE_N4K_Claims? value)
            {
                return TypeConverter<BTTEncryptionFlag>.ConvertFrom_BTTNFE_N4K_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims?>.GetConversionActionTo_BTTEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptionFlag> ITypeConverter<BTTNFE_N4K_Claims?>.Enumerate_BTTEncryptionFlag(BTTNFE_N4K_Claims? value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims? ITypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_BTTGenericCredentialType(BTTGenericCredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTGenericCredentialType' to 'BTTNFE_N4K_Claims?'.");
                
            }
            BTTGenericCredentialType ITypeConverter<BTTNFE_N4K_Claims?>.ConvertTo_BTTGenericCredentialType(BTTNFE_N4K_Claims? value)
            {
                return TypeConverter<BTTGenericCredentialType>.ConvertFrom_BTTNFE_N4K_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims?>.GetConversionActionTo_BTTGenericCredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTGenericCredentialType> ITypeConverter<BTTNFE_N4K_Claims?>.Enumerate_BTTGenericCredentialType(BTTNFE_N4K_Claims? value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims? ITypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_BTTNFEBodyPart(BTTNFEBodyPart value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTNFEBodyPart' to 'BTTNFE_N4K_Claims?'.");
                
            }
            BTTNFEBodyPart ITypeConverter<BTTNFE_N4K_Claims?>.ConvertTo_BTTNFEBodyPart(BTTNFE_N4K_Claims? value)
            {
                return TypeConverter<BTTNFEBodyPart>.ConvertFrom_BTTNFE_N4K_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims?>.GetConversionActionTo_BTTNFEBodyPart()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFEBodyPart> ITypeConverter<BTTNFE_N4K_Claims?>.Enumerate_BTTNFEBodyPart(BTTNFE_N4K_Claims? value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims? ITypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_BTTTrustLevel(BTTTrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTTrustLevel' to 'BTTNFE_N4K_Claims?'.");
                
            }
            BTTTrustLevel ITypeConverter<BTTNFE_N4K_Claims?>.ConvertTo_BTTTrustLevel(BTTNFE_N4K_Claims? value)
            {
                return TypeConverter<BTTTrustLevel>.ConvertFrom_BTTNFE_N4K_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims?>.GetConversionActionTo_BTTTrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTTrustLevel> ITypeConverter<BTTNFE_N4K_Claims?>.Enumerate_BTTTrustLevel(BTTNFE_N4K_Claims? value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims? ITypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_List_List_BTTKeyValuePair(List<List<BTTKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<BTTKeyValuePair>>' to 'BTTNFE_N4K_Claims?'.");
                
            }
            List<List<BTTKeyValuePair>> ITypeConverter<BTTNFE_N4K_Claims?>.ConvertTo_List_List_BTTKeyValuePair(BTTNFE_N4K_Claims? value)
            {
                return TypeConverter<List<List<BTTKeyValuePair>>>.ConvertFrom_BTTNFE_N4K_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims?>.GetConversionActionTo_List_List_BTTKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<BTTKeyValuePair>>> ITypeConverter<BTTNFE_N4K_Claims?>.Enumerate_List_List_BTTKeyValuePair(BTTNFE_N4K_Claims? value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims? ITypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_List_BTTClaim(List<BTTClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<BTTClaim>' to 'BTTNFE_N4K_Claims?'.");
                
            }
            List<BTTClaim> ITypeConverter<BTTNFE_N4K_Claims?>.ConvertTo_List_BTTClaim(BTTNFE_N4K_Claims? value)
            {
                return TypeConverter<List<BTTClaim>>.ConvertFrom_BTTNFE_N4K_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims?>.GetConversionActionTo_List_BTTClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<BTTClaim>> ITypeConverter<BTTNFE_N4K_Claims?>.Enumerate_List_BTTClaim(BTTNFE_N4K_Claims? value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims? ITypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_BTTEncryptedClaims_nullable(BTTEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'BTTEncryptedClaims?' to 'BTTNFE_N4K_Claims?'.");
                
            }
            BTTEncryptedClaims? ITypeConverter<BTTNFE_N4K_Claims?>.ConvertTo_BTTEncryptedClaims_nullable(BTTNFE_N4K_Claims? value)
            {
                return TypeConverter<BTTEncryptedClaims?>.ConvertFrom_BTTNFE_N4K_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims?>.GetConversionActionTo_BTTEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTEncryptedClaims?> ITypeConverter<BTTNFE_N4K_Claims?>.Enumerate_BTTEncryptedClaims_nullable(BTTNFE_N4K_Claims? value)
            {
                
                yield break;
            }
            BTTNFE_N4K_Claims? ITypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_BTTNFE_N4K_Claims_nullable(BTTNFE_N4K_Claims? value)
            {
                
                return (BTTNFE_N4K_Claims?)value;
                
            }
            BTTNFE_N4K_Claims? ITypeConverter<BTTNFE_N4K_Claims?>.ConvertTo_BTTNFE_N4K_Claims_nullable(BTTNFE_N4K_Claims? value)
            {
                return TypeConverter<BTTNFE_N4K_Claims?>.ConvertFrom_BTTNFE_N4K_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<BTTNFE_N4K_Claims?>.GetConversionActionTo_BTTNFE_N4K_Claims_nullable()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<BTTNFE_N4K_Claims?> ITypeConverter<BTTNFE_N4K_Claims?>.Enumerate_BTTNFE_N4K_Claims_nullable(BTTNFE_N4K_Claims? value)
            {
                
                yield break;
            }
            
            object ITypeConverter<object>.ConvertFrom_bool(bool value)
            {
                return value;
            }
            bool ITypeConverter<object>.ConvertTo_bool(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_bool()
            {
                throw new NotImplementedException();
            }
            IEnumerable<bool> ITypeConverter<object>.Enumerate_bool(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_int(int value)
            {
                return value;
            }
            int ITypeConverter<object>.ConvertTo_int(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_int()
            {
                throw new NotImplementedException();
            }
            IEnumerable<int> ITypeConverter<object>.Enumerate_int(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_long(long value)
            {
                return value;
            }
            long ITypeConverter<object>.ConvertTo_long(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_long()
            {
                throw new NotImplementedException();
            }
            IEnumerable<long> ITypeConverter<object>.Enumerate_long(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_DateTime(DateTime value)
            {
                return value;
            }
            DateTime ITypeConverter<object>.ConvertTo_DateTime(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_DateTime()
            {
                throw new NotImplementedException();
            }
            IEnumerable<DateTime> ITypeConverter<object>.Enumerate_DateTime(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_string(string value)
            {
                return value;
            }
            string ITypeConverter<object>.ConvertTo_string(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_string()
            {
                throw new NotImplementedException();
            }
            IEnumerable<string> ITypeConverter<object>.Enumerate_string(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_int_Array_150(int[] value)
            {
                return value;
            }
            int[] ITypeConverter<object>.ConvertTo_int_Array_150(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_int_Array_150()
            {
                throw new NotImplementedException();
            }
            IEnumerable<int[]> ITypeConverter<object>.Enumerate_int_Array_150(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_List_long(List<long> value)
            {
                return value;
            }
            List<long> ITypeConverter<object>.ConvertTo_List_long(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_List_long()
            {
                throw new NotImplementedException();
            }
            IEnumerable<List<long>> ITypeConverter<object>.Enumerate_List_long(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_List_string(List<string> value)
            {
                return value;
            }
            List<string> ITypeConverter<object>.ConvertTo_List_string(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_List_string()
            {
                throw new NotImplementedException();
            }
            IEnumerable<List<string>> ITypeConverter<object>.Enumerate_List_string(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_List_BTTKeyValuePair(List<BTTKeyValuePair> value)
            {
                return value;
            }
            List<BTTKeyValuePair> ITypeConverter<object>.ConvertTo_List_BTTKeyValuePair(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_List_BTTKeyValuePair()
            {
                throw new NotImplementedException();
            }
            IEnumerable<List<BTTKeyValuePair>> ITypeConverter<object>.Enumerate_List_BTTKeyValuePair(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_BTTClaim(BTTClaim value)
            {
                return value;
            }
            BTTClaim ITypeConverter<object>.ConvertTo_BTTClaim(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_BTTClaim()
            {
                throw new NotImplementedException();
            }
            IEnumerable<BTTClaim> ITypeConverter<object>.Enumerate_BTTClaim(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_BTTEncryptedClaims(BTTEncryptedClaims value)
            {
                return value;
            }
            BTTEncryptedClaims ITypeConverter<object>.ConvertTo_BTTEncryptedClaims(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_BTTEncryptedClaims()
            {
                throw new NotImplementedException();
            }
            IEnumerable<BTTEncryptedClaims> ITypeConverter<object>.Enumerate_BTTEncryptedClaims(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_BTTGenericCredential_Envelope(BTTGenericCredential_Envelope value)
            {
                return value;
            }
            BTTGenericCredential_Envelope ITypeConverter<object>.ConvertTo_BTTGenericCredential_Envelope(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_BTTGenericCredential_Envelope()
            {
                throw new NotImplementedException();
            }
            IEnumerable<BTTGenericCredential_Envelope> ITypeConverter<object>.Enumerate_BTTGenericCredential_Envelope(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_BTTGenericCredential_EnvelopeContent(BTTGenericCredential_EnvelopeContent value)
            {
                return value;
            }
            BTTGenericCredential_EnvelopeContent ITypeConverter<object>.ConvertTo_BTTGenericCredential_EnvelopeContent(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_BTTGenericCredential_EnvelopeContent()
            {
                throw new NotImplementedException();
            }
            IEnumerable<BTTGenericCredential_EnvelopeContent> ITypeConverter<object>.Enumerate_BTTGenericCredential_EnvelopeContent(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(BTTGenericCredential_EnvelopeSeal value)
            {
                return value;
            }
            BTTGenericCredential_EnvelopeSeal ITypeConverter<object>.ConvertTo_BTTGenericCredential_EnvelopeSeal(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_BTTGenericCredential_EnvelopeSeal()
            {
                throw new NotImplementedException();
            }
            IEnumerable<BTTGenericCredential_EnvelopeSeal> ITypeConverter<object>.Enumerate_BTTGenericCredential_EnvelopeSeal(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_BTTGenericCredential_PackingLabel(BTTGenericCredential_PackingLabel value)
            {
                return value;
            }
            BTTGenericCredential_PackingLabel ITypeConverter<object>.ConvertTo_BTTGenericCredential_PackingLabel(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_BTTGenericCredential_PackingLabel()
            {
                throw new NotImplementedException();
            }
            IEnumerable<BTTGenericCredential_PackingLabel> ITypeConverter<object>.Enumerate_BTTGenericCredential_PackingLabel(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_BTTKeyValuePair(BTTKeyValuePair value)
            {
                return value;
            }
            BTTKeyValuePair ITypeConverter<object>.ConvertTo_BTTKeyValuePair(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_BTTKeyValuePair()
            {
                throw new NotImplementedException();
            }
            IEnumerable<BTTKeyValuePair> ITypeConverter<object>.Enumerate_BTTKeyValuePair(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_BTTNFE_N4K_Claims(BTTNFE_N4K_Claims value)
            {
                return value;
            }
            BTTNFE_N4K_Claims ITypeConverter<object>.ConvertTo_BTTNFE_N4K_Claims(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_BTTNFE_N4K_Claims()
            {
                throw new NotImplementedException();
            }
            IEnumerable<BTTNFE_N4K_Claims> ITypeConverter<object>.Enumerate_BTTNFE_N4K_Claims(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_BTTNFE_N4K_Envelope(BTTNFE_N4K_Envelope value)
            {
                return value;
            }
            BTTNFE_N4K_Envelope ITypeConverter<object>.ConvertTo_BTTNFE_N4K_Envelope(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_BTTNFE_N4K_Envelope()
            {
                throw new NotImplementedException();
            }
            IEnumerable<BTTNFE_N4K_Envelope> ITypeConverter<object>.Enumerate_BTTNFE_N4K_Envelope(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(BTTNFE_N4K_EnvelopeContent value)
            {
                return value;
            }
            BTTNFE_N4K_EnvelopeContent ITypeConverter<object>.ConvertTo_BTTNFE_N4K_EnvelopeContent(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_BTTNFE_N4K_EnvelopeContent()
            {
                throw new NotImplementedException();
            }
            IEnumerable<BTTNFE_N4K_EnvelopeContent> ITypeConverter<object>.Enumerate_BTTNFE_N4K_EnvelopeContent(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(BTTNFE_N4K_SealedEnvelope value)
            {
                return value;
            }
            BTTNFE_N4K_SealedEnvelope ITypeConverter<object>.ConvertTo_BTTNFE_N4K_SealedEnvelope(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_BTTNFE_N4K_SealedEnvelope()
            {
                throw new NotImplementedException();
            }
            IEnumerable<BTTNFE_N4K_SealedEnvelope> ITypeConverter<object>.Enumerate_BTTNFE_N4K_SealedEnvelope(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(BTTVerifiableCredential_SealedEnvelope value)
            {
                return value;
            }
            BTTVerifiableCredential_SealedEnvelope ITypeConverter<object>.ConvertTo_BTTVerifiableCredential_SealedEnvelope(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_BTTVerifiableCredential_SealedEnvelope()
            {
                throw new NotImplementedException();
            }
            IEnumerable<BTTVerifiableCredential_SealedEnvelope> ITypeConverter<object>.Enumerate_BTTVerifiableCredential_SealedEnvelope(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_BTTEncryptionFlag(BTTEncryptionFlag value)
            {
                return value;
            }
            BTTEncryptionFlag ITypeConverter<object>.ConvertTo_BTTEncryptionFlag(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_BTTEncryptionFlag()
            {
                throw new NotImplementedException();
            }
            IEnumerable<BTTEncryptionFlag> ITypeConverter<object>.Enumerate_BTTEncryptionFlag(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_BTTGenericCredentialType(BTTGenericCredentialType value)
            {
                return value;
            }
            BTTGenericCredentialType ITypeConverter<object>.ConvertTo_BTTGenericCredentialType(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_BTTGenericCredentialType()
            {
                throw new NotImplementedException();
            }
            IEnumerable<BTTGenericCredentialType> ITypeConverter<object>.Enumerate_BTTGenericCredentialType(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_BTTNFEBodyPart(BTTNFEBodyPart value)
            {
                return value;
            }
            BTTNFEBodyPart ITypeConverter<object>.ConvertTo_BTTNFEBodyPart(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_BTTNFEBodyPart()
            {
                throw new NotImplementedException();
            }
            IEnumerable<BTTNFEBodyPart> ITypeConverter<object>.Enumerate_BTTNFEBodyPart(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_BTTTrustLevel(BTTTrustLevel value)
            {
                return value;
            }
            BTTTrustLevel ITypeConverter<object>.ConvertTo_BTTTrustLevel(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_BTTTrustLevel()
            {
                throw new NotImplementedException();
            }
            IEnumerable<BTTTrustLevel> ITypeConverter<object>.Enumerate_BTTTrustLevel(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_List_List_BTTKeyValuePair(List<List<BTTKeyValuePair>> value)
            {
                return value;
            }
            List<List<BTTKeyValuePair>> ITypeConverter<object>.ConvertTo_List_List_BTTKeyValuePair(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_List_List_BTTKeyValuePair()
            {
                throw new NotImplementedException();
            }
            IEnumerable<List<List<BTTKeyValuePair>>> ITypeConverter<object>.Enumerate_List_List_BTTKeyValuePair(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_List_BTTClaim(List<BTTClaim> value)
            {
                return value;
            }
            List<BTTClaim> ITypeConverter<object>.ConvertTo_List_BTTClaim(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_List_BTTClaim()
            {
                throw new NotImplementedException();
            }
            IEnumerable<List<BTTClaim>> ITypeConverter<object>.Enumerate_List_BTTClaim(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_BTTEncryptedClaims_nullable(BTTEncryptedClaims? value)
            {
                return value;
            }
            BTTEncryptedClaims? ITypeConverter<object>.ConvertTo_BTTEncryptedClaims_nullable(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_BTTEncryptedClaims_nullable()
            {
                throw new NotImplementedException();
            }
            IEnumerable<BTTEncryptedClaims?> ITypeConverter<object>.Enumerate_BTTEncryptedClaims_nullable(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_BTTNFE_N4K_Claims_nullable(BTTNFE_N4K_Claims? value)
            {
                return value;
            }
            BTTNFE_N4K_Claims? ITypeConverter<object>.ConvertTo_BTTNFE_N4K_Claims_nullable(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_BTTNFE_N4K_Claims_nullable()
            {
                throw new NotImplementedException();
            }
            IEnumerable<BTTNFE_N4K_Claims?> ITypeConverter<object>.Enumerate_BTTNFE_N4K_Claims_nullable(object value)
            {
                throw new NotImplementedException();
            }
            
        }
        internal static readonly ITypeConverter<T> s_type_converter = new _TypeConverterImpl() as ITypeConverter<T> ?? new TypeConverter<T>();
        #region Default implementation
        
        T ITypeConverter<T>.ConvertFrom_bool(bool value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        bool ITypeConverter<T>.ConvertTo_bool(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_bool()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<bool> ITypeConverter<T>.Enumerate_bool(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_int(int value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        int ITypeConverter<T>.ConvertTo_int(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_int()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<int> ITypeConverter<T>.Enumerate_int(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_long(long value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        long ITypeConverter<T>.ConvertTo_long(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_long()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<long> ITypeConverter<T>.Enumerate_long(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_DateTime(DateTime value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        DateTime ITypeConverter<T>.ConvertTo_DateTime(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_DateTime()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<DateTime> ITypeConverter<T>.Enumerate_DateTime(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_string(string value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        string ITypeConverter<T>.ConvertTo_string(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_string()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<string> ITypeConverter<T>.Enumerate_string(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_int_Array_150(int[] value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        int[] ITypeConverter<T>.ConvertTo_int_Array_150(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_int_Array_150()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<int[]> ITypeConverter<T>.Enumerate_int_Array_150(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_List_long(List<long> value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        List<long> ITypeConverter<T>.ConvertTo_List_long(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_List_long()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<List<long>> ITypeConverter<T>.Enumerate_List_long(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_List_string(List<string> value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        List<string> ITypeConverter<T>.ConvertTo_List_string(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_List_string()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<List<string>> ITypeConverter<T>.Enumerate_List_string(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_List_BTTKeyValuePair(List<BTTKeyValuePair> value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        List<BTTKeyValuePair> ITypeConverter<T>.ConvertTo_List_BTTKeyValuePair(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_List_BTTKeyValuePair()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<List<BTTKeyValuePair>> ITypeConverter<T>.Enumerate_List_BTTKeyValuePair(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_BTTClaim(BTTClaim value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        BTTClaim ITypeConverter<T>.ConvertTo_BTTClaim(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_BTTClaim()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<BTTClaim> ITypeConverter<T>.Enumerate_BTTClaim(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_BTTEncryptedClaims(BTTEncryptedClaims value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        BTTEncryptedClaims ITypeConverter<T>.ConvertTo_BTTEncryptedClaims(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_BTTEncryptedClaims()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<BTTEncryptedClaims> ITypeConverter<T>.Enumerate_BTTEncryptedClaims(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_BTTGenericCredential_Envelope(BTTGenericCredential_Envelope value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        BTTGenericCredential_Envelope ITypeConverter<T>.ConvertTo_BTTGenericCredential_Envelope(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_BTTGenericCredential_Envelope()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<BTTGenericCredential_Envelope> ITypeConverter<T>.Enumerate_BTTGenericCredential_Envelope(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_BTTGenericCredential_EnvelopeContent(BTTGenericCredential_EnvelopeContent value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        BTTGenericCredential_EnvelopeContent ITypeConverter<T>.ConvertTo_BTTGenericCredential_EnvelopeContent(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_BTTGenericCredential_EnvelopeContent()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<BTTGenericCredential_EnvelopeContent> ITypeConverter<T>.Enumerate_BTTGenericCredential_EnvelopeContent(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_BTTGenericCredential_EnvelopeSeal(BTTGenericCredential_EnvelopeSeal value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        BTTGenericCredential_EnvelopeSeal ITypeConverter<T>.ConvertTo_BTTGenericCredential_EnvelopeSeal(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_BTTGenericCredential_EnvelopeSeal()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<BTTGenericCredential_EnvelopeSeal> ITypeConverter<T>.Enumerate_BTTGenericCredential_EnvelopeSeal(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_BTTGenericCredential_PackingLabel(BTTGenericCredential_PackingLabel value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        BTTGenericCredential_PackingLabel ITypeConverter<T>.ConvertTo_BTTGenericCredential_PackingLabel(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_BTTGenericCredential_PackingLabel()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<BTTGenericCredential_PackingLabel> ITypeConverter<T>.Enumerate_BTTGenericCredential_PackingLabel(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_BTTKeyValuePair(BTTKeyValuePair value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        BTTKeyValuePair ITypeConverter<T>.ConvertTo_BTTKeyValuePair(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_BTTKeyValuePair()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<BTTKeyValuePair> ITypeConverter<T>.Enumerate_BTTKeyValuePair(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_BTTNFE_N4K_Claims(BTTNFE_N4K_Claims value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        BTTNFE_N4K_Claims ITypeConverter<T>.ConvertTo_BTTNFE_N4K_Claims(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_BTTNFE_N4K_Claims()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<BTTNFE_N4K_Claims> ITypeConverter<T>.Enumerate_BTTNFE_N4K_Claims(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_BTTNFE_N4K_Envelope(BTTNFE_N4K_Envelope value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        BTTNFE_N4K_Envelope ITypeConverter<T>.ConvertTo_BTTNFE_N4K_Envelope(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_BTTNFE_N4K_Envelope()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<BTTNFE_N4K_Envelope> ITypeConverter<T>.Enumerate_BTTNFE_N4K_Envelope(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_BTTNFE_N4K_EnvelopeContent(BTTNFE_N4K_EnvelopeContent value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        BTTNFE_N4K_EnvelopeContent ITypeConverter<T>.ConvertTo_BTTNFE_N4K_EnvelopeContent(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_BTTNFE_N4K_EnvelopeContent()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<BTTNFE_N4K_EnvelopeContent> ITypeConverter<T>.Enumerate_BTTNFE_N4K_EnvelopeContent(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_BTTNFE_N4K_SealedEnvelope(BTTNFE_N4K_SealedEnvelope value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        BTTNFE_N4K_SealedEnvelope ITypeConverter<T>.ConvertTo_BTTNFE_N4K_SealedEnvelope(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_BTTNFE_N4K_SealedEnvelope()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<BTTNFE_N4K_SealedEnvelope> ITypeConverter<T>.Enumerate_BTTNFE_N4K_SealedEnvelope(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(BTTVerifiableCredential_SealedEnvelope value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        BTTVerifiableCredential_SealedEnvelope ITypeConverter<T>.ConvertTo_BTTVerifiableCredential_SealedEnvelope(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_BTTVerifiableCredential_SealedEnvelope()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<BTTVerifiableCredential_SealedEnvelope> ITypeConverter<T>.Enumerate_BTTVerifiableCredential_SealedEnvelope(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_BTTEncryptionFlag(BTTEncryptionFlag value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        BTTEncryptionFlag ITypeConverter<T>.ConvertTo_BTTEncryptionFlag(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_BTTEncryptionFlag()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<BTTEncryptionFlag> ITypeConverter<T>.Enumerate_BTTEncryptionFlag(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_BTTGenericCredentialType(BTTGenericCredentialType value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        BTTGenericCredentialType ITypeConverter<T>.ConvertTo_BTTGenericCredentialType(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_BTTGenericCredentialType()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<BTTGenericCredentialType> ITypeConverter<T>.Enumerate_BTTGenericCredentialType(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_BTTNFEBodyPart(BTTNFEBodyPart value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        BTTNFEBodyPart ITypeConverter<T>.ConvertTo_BTTNFEBodyPart(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_BTTNFEBodyPart()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<BTTNFEBodyPart> ITypeConverter<T>.Enumerate_BTTNFEBodyPart(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_BTTTrustLevel(BTTTrustLevel value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        BTTTrustLevel ITypeConverter<T>.ConvertTo_BTTTrustLevel(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_BTTTrustLevel()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<BTTTrustLevel> ITypeConverter<T>.Enumerate_BTTTrustLevel(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_List_List_BTTKeyValuePair(List<List<BTTKeyValuePair>> value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        List<List<BTTKeyValuePair>> ITypeConverter<T>.ConvertTo_List_List_BTTKeyValuePair(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_List_List_BTTKeyValuePair()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<List<List<BTTKeyValuePair>>> ITypeConverter<T>.Enumerate_List_List_BTTKeyValuePair(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_List_BTTClaim(List<BTTClaim> value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        List<BTTClaim> ITypeConverter<T>.ConvertTo_List_BTTClaim(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_List_BTTClaim()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<List<BTTClaim>> ITypeConverter<T>.Enumerate_List_BTTClaim(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_BTTEncryptedClaims_nullable(BTTEncryptedClaims? value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        BTTEncryptedClaims? ITypeConverter<T>.ConvertTo_BTTEncryptedClaims_nullable(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_BTTEncryptedClaims_nullable()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<BTTEncryptedClaims?> ITypeConverter<T>.Enumerate_BTTEncryptedClaims_nullable(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_BTTNFE_N4K_Claims_nullable(BTTNFE_N4K_Claims? value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        BTTNFE_N4K_Claims? ITypeConverter<T>.ConvertTo_BTTNFE_N4K_Claims_nullable(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_BTTNFE_N4K_Claims_nullable()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<BTTNFE_N4K_Claims?> ITypeConverter<T>.Enumerate_BTTNFE_N4K_Claims_nullable(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        #endregion
        internal static readonly uint type_id = TypeSystem.GetTypeID(typeof(T));
        
        internal static T ConvertFrom_bool(bool value)
        {
            return s_type_converter.ConvertFrom_bool(value);
        }
        internal static bool ConvertTo_bool(T value)
        {
            return s_type_converter.ConvertTo_bool(value);
        }
        internal static TypeConversionAction GetConversionActionTo_bool()
        {
            return s_type_converter.GetConversionActionTo_bool();
        }
        internal static IEnumerable<bool> Enumerate_bool(T value)
        {
            return s_type_converter.Enumerate_bool(value);
        }
        
        internal static T ConvertFrom_int(int value)
        {
            return s_type_converter.ConvertFrom_int(value);
        }
        internal static int ConvertTo_int(T value)
        {
            return s_type_converter.ConvertTo_int(value);
        }
        internal static TypeConversionAction GetConversionActionTo_int()
        {
            return s_type_converter.GetConversionActionTo_int();
        }
        internal static IEnumerable<int> Enumerate_int(T value)
        {
            return s_type_converter.Enumerate_int(value);
        }
        
        internal static T ConvertFrom_long(long value)
        {
            return s_type_converter.ConvertFrom_long(value);
        }
        internal static long ConvertTo_long(T value)
        {
            return s_type_converter.ConvertTo_long(value);
        }
        internal static TypeConversionAction GetConversionActionTo_long()
        {
            return s_type_converter.GetConversionActionTo_long();
        }
        internal static IEnumerable<long> Enumerate_long(T value)
        {
            return s_type_converter.Enumerate_long(value);
        }
        
        internal static T ConvertFrom_DateTime(DateTime value)
        {
            return s_type_converter.ConvertFrom_DateTime(value);
        }
        internal static DateTime ConvertTo_DateTime(T value)
        {
            return s_type_converter.ConvertTo_DateTime(value);
        }
        internal static TypeConversionAction GetConversionActionTo_DateTime()
        {
            return s_type_converter.GetConversionActionTo_DateTime();
        }
        internal static IEnumerable<DateTime> Enumerate_DateTime(T value)
        {
            return s_type_converter.Enumerate_DateTime(value);
        }
        
        internal static T ConvertFrom_string(string value)
        {
            return s_type_converter.ConvertFrom_string(value);
        }
        internal static string ConvertTo_string(T value)
        {
            return s_type_converter.ConvertTo_string(value);
        }
        internal static TypeConversionAction GetConversionActionTo_string()
        {
            return s_type_converter.GetConversionActionTo_string();
        }
        internal static IEnumerable<string> Enumerate_string(T value)
        {
            return s_type_converter.Enumerate_string(value);
        }
        
        internal static T ConvertFrom_int_Array_150(int[] value)
        {
            return s_type_converter.ConvertFrom_int_Array_150(value);
        }
        internal static int[] ConvertTo_int_Array_150(T value)
        {
            return s_type_converter.ConvertTo_int_Array_150(value);
        }
        internal static TypeConversionAction GetConversionActionTo_int_Array_150()
        {
            return s_type_converter.GetConversionActionTo_int_Array_150();
        }
        internal static IEnumerable<int[]> Enumerate_int_Array_150(T value)
        {
            return s_type_converter.Enumerate_int_Array_150(value);
        }
        
        internal static T ConvertFrom_List_long(List<long> value)
        {
            return s_type_converter.ConvertFrom_List_long(value);
        }
        internal static List<long> ConvertTo_List_long(T value)
        {
            return s_type_converter.ConvertTo_List_long(value);
        }
        internal static TypeConversionAction GetConversionActionTo_List_long()
        {
            return s_type_converter.GetConversionActionTo_List_long();
        }
        internal static IEnumerable<List<long>> Enumerate_List_long(T value)
        {
            return s_type_converter.Enumerate_List_long(value);
        }
        
        internal static T ConvertFrom_List_string(List<string> value)
        {
            return s_type_converter.ConvertFrom_List_string(value);
        }
        internal static List<string> ConvertTo_List_string(T value)
        {
            return s_type_converter.ConvertTo_List_string(value);
        }
        internal static TypeConversionAction GetConversionActionTo_List_string()
        {
            return s_type_converter.GetConversionActionTo_List_string();
        }
        internal static IEnumerable<List<string>> Enumerate_List_string(T value)
        {
            return s_type_converter.Enumerate_List_string(value);
        }
        
        internal static T ConvertFrom_List_BTTKeyValuePair(List<BTTKeyValuePair> value)
        {
            return s_type_converter.ConvertFrom_List_BTTKeyValuePair(value);
        }
        internal static List<BTTKeyValuePair> ConvertTo_List_BTTKeyValuePair(T value)
        {
            return s_type_converter.ConvertTo_List_BTTKeyValuePair(value);
        }
        internal static TypeConversionAction GetConversionActionTo_List_BTTKeyValuePair()
        {
            return s_type_converter.GetConversionActionTo_List_BTTKeyValuePair();
        }
        internal static IEnumerable<List<BTTKeyValuePair>> Enumerate_List_BTTKeyValuePair(T value)
        {
            return s_type_converter.Enumerate_List_BTTKeyValuePair(value);
        }
        
        internal static T ConvertFrom_BTTClaim(BTTClaim value)
        {
            return s_type_converter.ConvertFrom_BTTClaim(value);
        }
        internal static BTTClaim ConvertTo_BTTClaim(T value)
        {
            return s_type_converter.ConvertTo_BTTClaim(value);
        }
        internal static TypeConversionAction GetConversionActionTo_BTTClaim()
        {
            return s_type_converter.GetConversionActionTo_BTTClaim();
        }
        internal static IEnumerable<BTTClaim> Enumerate_BTTClaim(T value)
        {
            return s_type_converter.Enumerate_BTTClaim(value);
        }
        
        internal static T ConvertFrom_BTTEncryptedClaims(BTTEncryptedClaims value)
        {
            return s_type_converter.ConvertFrom_BTTEncryptedClaims(value);
        }
        internal static BTTEncryptedClaims ConvertTo_BTTEncryptedClaims(T value)
        {
            return s_type_converter.ConvertTo_BTTEncryptedClaims(value);
        }
        internal static TypeConversionAction GetConversionActionTo_BTTEncryptedClaims()
        {
            return s_type_converter.GetConversionActionTo_BTTEncryptedClaims();
        }
        internal static IEnumerable<BTTEncryptedClaims> Enumerate_BTTEncryptedClaims(T value)
        {
            return s_type_converter.Enumerate_BTTEncryptedClaims(value);
        }
        
        internal static T ConvertFrom_BTTGenericCredential_Envelope(BTTGenericCredential_Envelope value)
        {
            return s_type_converter.ConvertFrom_BTTGenericCredential_Envelope(value);
        }
        internal static BTTGenericCredential_Envelope ConvertTo_BTTGenericCredential_Envelope(T value)
        {
            return s_type_converter.ConvertTo_BTTGenericCredential_Envelope(value);
        }
        internal static TypeConversionAction GetConversionActionTo_BTTGenericCredential_Envelope()
        {
            return s_type_converter.GetConversionActionTo_BTTGenericCredential_Envelope();
        }
        internal static IEnumerable<BTTGenericCredential_Envelope> Enumerate_BTTGenericCredential_Envelope(T value)
        {
            return s_type_converter.Enumerate_BTTGenericCredential_Envelope(value);
        }
        
        internal static T ConvertFrom_BTTGenericCredential_EnvelopeContent(BTTGenericCredential_EnvelopeContent value)
        {
            return s_type_converter.ConvertFrom_BTTGenericCredential_EnvelopeContent(value);
        }
        internal static BTTGenericCredential_EnvelopeContent ConvertTo_BTTGenericCredential_EnvelopeContent(T value)
        {
            return s_type_converter.ConvertTo_BTTGenericCredential_EnvelopeContent(value);
        }
        internal static TypeConversionAction GetConversionActionTo_BTTGenericCredential_EnvelopeContent()
        {
            return s_type_converter.GetConversionActionTo_BTTGenericCredential_EnvelopeContent();
        }
        internal static IEnumerable<BTTGenericCredential_EnvelopeContent> Enumerate_BTTGenericCredential_EnvelopeContent(T value)
        {
            return s_type_converter.Enumerate_BTTGenericCredential_EnvelopeContent(value);
        }
        
        internal static T ConvertFrom_BTTGenericCredential_EnvelopeSeal(BTTGenericCredential_EnvelopeSeal value)
        {
            return s_type_converter.ConvertFrom_BTTGenericCredential_EnvelopeSeal(value);
        }
        internal static BTTGenericCredential_EnvelopeSeal ConvertTo_BTTGenericCredential_EnvelopeSeal(T value)
        {
            return s_type_converter.ConvertTo_BTTGenericCredential_EnvelopeSeal(value);
        }
        internal static TypeConversionAction GetConversionActionTo_BTTGenericCredential_EnvelopeSeal()
        {
            return s_type_converter.GetConversionActionTo_BTTGenericCredential_EnvelopeSeal();
        }
        internal static IEnumerable<BTTGenericCredential_EnvelopeSeal> Enumerate_BTTGenericCredential_EnvelopeSeal(T value)
        {
            return s_type_converter.Enumerate_BTTGenericCredential_EnvelopeSeal(value);
        }
        
        internal static T ConvertFrom_BTTGenericCredential_PackingLabel(BTTGenericCredential_PackingLabel value)
        {
            return s_type_converter.ConvertFrom_BTTGenericCredential_PackingLabel(value);
        }
        internal static BTTGenericCredential_PackingLabel ConvertTo_BTTGenericCredential_PackingLabel(T value)
        {
            return s_type_converter.ConvertTo_BTTGenericCredential_PackingLabel(value);
        }
        internal static TypeConversionAction GetConversionActionTo_BTTGenericCredential_PackingLabel()
        {
            return s_type_converter.GetConversionActionTo_BTTGenericCredential_PackingLabel();
        }
        internal static IEnumerable<BTTGenericCredential_PackingLabel> Enumerate_BTTGenericCredential_PackingLabel(T value)
        {
            return s_type_converter.Enumerate_BTTGenericCredential_PackingLabel(value);
        }
        
        internal static T ConvertFrom_BTTKeyValuePair(BTTKeyValuePair value)
        {
            return s_type_converter.ConvertFrom_BTTKeyValuePair(value);
        }
        internal static BTTKeyValuePair ConvertTo_BTTKeyValuePair(T value)
        {
            return s_type_converter.ConvertTo_BTTKeyValuePair(value);
        }
        internal static TypeConversionAction GetConversionActionTo_BTTKeyValuePair()
        {
            return s_type_converter.GetConversionActionTo_BTTKeyValuePair();
        }
        internal static IEnumerable<BTTKeyValuePair> Enumerate_BTTKeyValuePair(T value)
        {
            return s_type_converter.Enumerate_BTTKeyValuePair(value);
        }
        
        internal static T ConvertFrom_BTTNFE_N4K_Claims(BTTNFE_N4K_Claims value)
        {
            return s_type_converter.ConvertFrom_BTTNFE_N4K_Claims(value);
        }
        internal static BTTNFE_N4K_Claims ConvertTo_BTTNFE_N4K_Claims(T value)
        {
            return s_type_converter.ConvertTo_BTTNFE_N4K_Claims(value);
        }
        internal static TypeConversionAction GetConversionActionTo_BTTNFE_N4K_Claims()
        {
            return s_type_converter.GetConversionActionTo_BTTNFE_N4K_Claims();
        }
        internal static IEnumerable<BTTNFE_N4K_Claims> Enumerate_BTTNFE_N4K_Claims(T value)
        {
            return s_type_converter.Enumerate_BTTNFE_N4K_Claims(value);
        }
        
        internal static T ConvertFrom_BTTNFE_N4K_Envelope(BTTNFE_N4K_Envelope value)
        {
            return s_type_converter.ConvertFrom_BTTNFE_N4K_Envelope(value);
        }
        internal static BTTNFE_N4K_Envelope ConvertTo_BTTNFE_N4K_Envelope(T value)
        {
            return s_type_converter.ConvertTo_BTTNFE_N4K_Envelope(value);
        }
        internal static TypeConversionAction GetConversionActionTo_BTTNFE_N4K_Envelope()
        {
            return s_type_converter.GetConversionActionTo_BTTNFE_N4K_Envelope();
        }
        internal static IEnumerable<BTTNFE_N4K_Envelope> Enumerate_BTTNFE_N4K_Envelope(T value)
        {
            return s_type_converter.Enumerate_BTTNFE_N4K_Envelope(value);
        }
        
        internal static T ConvertFrom_BTTNFE_N4K_EnvelopeContent(BTTNFE_N4K_EnvelopeContent value)
        {
            return s_type_converter.ConvertFrom_BTTNFE_N4K_EnvelopeContent(value);
        }
        internal static BTTNFE_N4K_EnvelopeContent ConvertTo_BTTNFE_N4K_EnvelopeContent(T value)
        {
            return s_type_converter.ConvertTo_BTTNFE_N4K_EnvelopeContent(value);
        }
        internal static TypeConversionAction GetConversionActionTo_BTTNFE_N4K_EnvelopeContent()
        {
            return s_type_converter.GetConversionActionTo_BTTNFE_N4K_EnvelopeContent();
        }
        internal static IEnumerable<BTTNFE_N4K_EnvelopeContent> Enumerate_BTTNFE_N4K_EnvelopeContent(T value)
        {
            return s_type_converter.Enumerate_BTTNFE_N4K_EnvelopeContent(value);
        }
        
        internal static T ConvertFrom_BTTNFE_N4K_SealedEnvelope(BTTNFE_N4K_SealedEnvelope value)
        {
            return s_type_converter.ConvertFrom_BTTNFE_N4K_SealedEnvelope(value);
        }
        internal static BTTNFE_N4K_SealedEnvelope ConvertTo_BTTNFE_N4K_SealedEnvelope(T value)
        {
            return s_type_converter.ConvertTo_BTTNFE_N4K_SealedEnvelope(value);
        }
        internal static TypeConversionAction GetConversionActionTo_BTTNFE_N4K_SealedEnvelope()
        {
            return s_type_converter.GetConversionActionTo_BTTNFE_N4K_SealedEnvelope();
        }
        internal static IEnumerable<BTTNFE_N4K_SealedEnvelope> Enumerate_BTTNFE_N4K_SealedEnvelope(T value)
        {
            return s_type_converter.Enumerate_BTTNFE_N4K_SealedEnvelope(value);
        }
        
        internal static T ConvertFrom_BTTVerifiableCredential_SealedEnvelope(BTTVerifiableCredential_SealedEnvelope value)
        {
            return s_type_converter.ConvertFrom_BTTVerifiableCredential_SealedEnvelope(value);
        }
        internal static BTTVerifiableCredential_SealedEnvelope ConvertTo_BTTVerifiableCredential_SealedEnvelope(T value)
        {
            return s_type_converter.ConvertTo_BTTVerifiableCredential_SealedEnvelope(value);
        }
        internal static TypeConversionAction GetConversionActionTo_BTTVerifiableCredential_SealedEnvelope()
        {
            return s_type_converter.GetConversionActionTo_BTTVerifiableCredential_SealedEnvelope();
        }
        internal static IEnumerable<BTTVerifiableCredential_SealedEnvelope> Enumerate_BTTVerifiableCredential_SealedEnvelope(T value)
        {
            return s_type_converter.Enumerate_BTTVerifiableCredential_SealedEnvelope(value);
        }
        
        internal static T ConvertFrom_BTTEncryptionFlag(BTTEncryptionFlag value)
        {
            return s_type_converter.ConvertFrom_BTTEncryptionFlag(value);
        }
        internal static BTTEncryptionFlag ConvertTo_BTTEncryptionFlag(T value)
        {
            return s_type_converter.ConvertTo_BTTEncryptionFlag(value);
        }
        internal static TypeConversionAction GetConversionActionTo_BTTEncryptionFlag()
        {
            return s_type_converter.GetConversionActionTo_BTTEncryptionFlag();
        }
        internal static IEnumerable<BTTEncryptionFlag> Enumerate_BTTEncryptionFlag(T value)
        {
            return s_type_converter.Enumerate_BTTEncryptionFlag(value);
        }
        
        internal static T ConvertFrom_BTTGenericCredentialType(BTTGenericCredentialType value)
        {
            return s_type_converter.ConvertFrom_BTTGenericCredentialType(value);
        }
        internal static BTTGenericCredentialType ConvertTo_BTTGenericCredentialType(T value)
        {
            return s_type_converter.ConvertTo_BTTGenericCredentialType(value);
        }
        internal static TypeConversionAction GetConversionActionTo_BTTGenericCredentialType()
        {
            return s_type_converter.GetConversionActionTo_BTTGenericCredentialType();
        }
        internal static IEnumerable<BTTGenericCredentialType> Enumerate_BTTGenericCredentialType(T value)
        {
            return s_type_converter.Enumerate_BTTGenericCredentialType(value);
        }
        
        internal static T ConvertFrom_BTTNFEBodyPart(BTTNFEBodyPart value)
        {
            return s_type_converter.ConvertFrom_BTTNFEBodyPart(value);
        }
        internal static BTTNFEBodyPart ConvertTo_BTTNFEBodyPart(T value)
        {
            return s_type_converter.ConvertTo_BTTNFEBodyPart(value);
        }
        internal static TypeConversionAction GetConversionActionTo_BTTNFEBodyPart()
        {
            return s_type_converter.GetConversionActionTo_BTTNFEBodyPart();
        }
        internal static IEnumerable<BTTNFEBodyPart> Enumerate_BTTNFEBodyPart(T value)
        {
            return s_type_converter.Enumerate_BTTNFEBodyPart(value);
        }
        
        internal static T ConvertFrom_BTTTrustLevel(BTTTrustLevel value)
        {
            return s_type_converter.ConvertFrom_BTTTrustLevel(value);
        }
        internal static BTTTrustLevel ConvertTo_BTTTrustLevel(T value)
        {
            return s_type_converter.ConvertTo_BTTTrustLevel(value);
        }
        internal static TypeConversionAction GetConversionActionTo_BTTTrustLevel()
        {
            return s_type_converter.GetConversionActionTo_BTTTrustLevel();
        }
        internal static IEnumerable<BTTTrustLevel> Enumerate_BTTTrustLevel(T value)
        {
            return s_type_converter.Enumerate_BTTTrustLevel(value);
        }
        
        internal static T ConvertFrom_List_List_BTTKeyValuePair(List<List<BTTKeyValuePair>> value)
        {
            return s_type_converter.ConvertFrom_List_List_BTTKeyValuePair(value);
        }
        internal static List<List<BTTKeyValuePair>> ConvertTo_List_List_BTTKeyValuePair(T value)
        {
            return s_type_converter.ConvertTo_List_List_BTTKeyValuePair(value);
        }
        internal static TypeConversionAction GetConversionActionTo_List_List_BTTKeyValuePair()
        {
            return s_type_converter.GetConversionActionTo_List_List_BTTKeyValuePair();
        }
        internal static IEnumerable<List<List<BTTKeyValuePair>>> Enumerate_List_List_BTTKeyValuePair(T value)
        {
            return s_type_converter.Enumerate_List_List_BTTKeyValuePair(value);
        }
        
        internal static T ConvertFrom_List_BTTClaim(List<BTTClaim> value)
        {
            return s_type_converter.ConvertFrom_List_BTTClaim(value);
        }
        internal static List<BTTClaim> ConvertTo_List_BTTClaim(T value)
        {
            return s_type_converter.ConvertTo_List_BTTClaim(value);
        }
        internal static TypeConversionAction GetConversionActionTo_List_BTTClaim()
        {
            return s_type_converter.GetConversionActionTo_List_BTTClaim();
        }
        internal static IEnumerable<List<BTTClaim>> Enumerate_List_BTTClaim(T value)
        {
            return s_type_converter.Enumerate_List_BTTClaim(value);
        }
        
        internal static T ConvertFrom_BTTEncryptedClaims_nullable(BTTEncryptedClaims? value)
        {
            return s_type_converter.ConvertFrom_BTTEncryptedClaims_nullable(value);
        }
        internal static BTTEncryptedClaims? ConvertTo_BTTEncryptedClaims_nullable(T value)
        {
            return s_type_converter.ConvertTo_BTTEncryptedClaims_nullable(value);
        }
        internal static TypeConversionAction GetConversionActionTo_BTTEncryptedClaims_nullable()
        {
            return s_type_converter.GetConversionActionTo_BTTEncryptedClaims_nullable();
        }
        internal static IEnumerable<BTTEncryptedClaims?> Enumerate_BTTEncryptedClaims_nullable(T value)
        {
            return s_type_converter.Enumerate_BTTEncryptedClaims_nullable(value);
        }
        
        internal static T ConvertFrom_BTTNFE_N4K_Claims_nullable(BTTNFE_N4K_Claims? value)
        {
            return s_type_converter.ConvertFrom_BTTNFE_N4K_Claims_nullable(value);
        }
        internal static BTTNFE_N4K_Claims? ConvertTo_BTTNFE_N4K_Claims_nullable(T value)
        {
            return s_type_converter.ConvertTo_BTTNFE_N4K_Claims_nullable(value);
        }
        internal static TypeConversionAction GetConversionActionTo_BTTNFE_N4K_Claims_nullable()
        {
            return s_type_converter.GetConversionActionTo_BTTNFE_N4K_Claims_nullable();
        }
        internal static IEnumerable<BTTNFE_N4K_Claims?> Enumerate_BTTNFE_N4K_Claims_nullable(T value)
        {
            return s_type_converter.Enumerate_BTTNFE_N4K_Claims_nullable(value);
        }
        
    }
}

#pragma warning restore 162,168,649,660,661,1522
